// This file is auto generated by ScriptLinker at 11:21:36 13/03/2020
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: NearHuscarl
* description: This script convert IObjectPlayerProfileInfo, your Superfighter outfits from the Map Editor, to C# code
* mapmodes: 
*/

        // This script convert IObjectPlayerProfileInfo, your Superfighter outfits from the Map Editor, to C# code
        public void OnStartup()
        {
            // Search for 'PlayerProfileInfo' in the search bar. Drag'n'drop it to the Map Editor
            // Hit EDIT on Profile Info row to start editing your Superfighter outfits
            // Make sure all of your PlayerProfileInfo tiles are within the Camera Area

            // When you're done. Hit F7 (or go to Test > Map Debug)
            // - Tick Show script output
            // - Untick Freeze output
            // Hit F5 to test map

            // Depend on the number of PlayerProfileInfo tiles you have on the Map Editor, you may have to wait for a bit
            // Once you can focus the SFD Map Debug window, right click the area, select all and copy the generated C# code
            //
            // Convert all profiles found in the map editor
            // Convert();
            //
            // Convert a specific profile by profile name or IObjectPlayerProfileInfo's custom ID
            // Convert("Engineer", "Kinpin", "Police");
            Convert("SurvivorCrazy");

            //System.Diagnostics.Debugger.Break();
        }

        private void Convert(params string[] ids)
        {
            var idLookup = new HashSet<string>(ids);
            var playerProfiles = Game.GetObjects<IObjectPlayerProfileInfo>();

            foreach (var playerProfile in playerProfiles)
            {
                if (idLookup.Contains(playerProfile.CustomID) || idLookup.Contains(playerProfile.GetProfile().Name))
                    Game.WriteToConsole(Convert(playerProfile.GetProfile()));
            }
        }

        private static string EnumToString<T>(T enumVal)
        {
            return Enum.GetName(typeof(T), enumVal);
        }

        public string Convert(IProfile profile, int indentSize = 0)
        {
            if (profile == null) return "";

            var sb = new StringBuilder();
            var indent = new string(' ', indentSize);

            sb.AppendLine(indent + "new IProfile()");
            sb.AppendLine(indent + "{");
            sb.AppendLine(indent + "    Name = \"" + profile.Name + "\",");
            sb.AppendLine(indent + "    Accesory = " + GetClothingItemInfo(profile.Accessory) + ",");
            sb.AppendLine(indent + "    ChestOver = " + GetClothingItemInfo(profile.ChestOver) + ",");
            sb.AppendLine(indent + "    ChestUnder = " + GetClothingItemInfo(profile.ChestUnder) + ",");
            sb.AppendLine(indent + "    Feet = " + GetClothingItemInfo(profile.Feet) + ",");
            sb.AppendLine(indent + "    Gender = Gender." + EnumToString(profile.Gender) + ",");
            sb.AppendLine(indent + "    Hands = " + GetClothingItemInfo(profile.Hands) + ",");
            sb.AppendLine(indent + "    Head = " + GetClothingItemInfo(profile.Head) + ",");
            sb.AppendLine(indent + "    Legs = " + GetClothingItemInfo(profile.Legs) + ",");
            sb.AppendLine(indent + "    Skin = " + GetClothingItemInfo(profile.Skin) + ",");
            sb.AppendLine(indent + "    Waist = " + GetClothingItemInfo(profile.Waist) + ",");
            sb.AppendLine(indent + "};");

            return sb.ToString();
        }

        private string GetClothingItemInfo(IProfileClothingItem clothingItem)
        {
            if (clothingItem == null) return "null";

            return "new IProfileClothingItem(\"" + clothingItem.Name + "\", \"" + clothingItem.Color1 + "\", \"" + clothingItem.Color2 + "\", \"" + clothingItem.Color3 + "\")";
        }

    public enum SearchRange
    {
        Infinite,
        Large,
        Small,
        /// <summary>
        /// Set SearchForItems to false
        /// </summary>
        None,
    }
    public static class SearchRangeSettings
    {
        public const float Infinite = 0f;
        public const float Large = 125f;
        public const float Small = 30f;
    }

    public enum OffensiveLevel
    {
        ExtremelyHigh,
        VeryHigh,
        High,
        Normal,
        Low,
        VeryLow,
        ExtremelyLow,
    }
    public enum DefensiveLevel
    {
        ExtremelyHigh,
        VeryHigh,
        High,
        Normal,
        Low,
        VeryLow,
        ExtremelyLow,
    }

    public class OffenseDefenseLevelSettings
    {
        public static readonly float ExtremelyHigh = 1f;
        public static readonly float VeryHigh = 0.833f;
        public static readonly float High = .666f;
        public static readonly float Normal = .5f;
        public static readonly float Low = .333f;
        public static readonly float VeryLow = .166f;
        public static readonly float ExtremelyLow = 0.05f;
    }

    public enum NavigationPauseLevel
    {
        Always,
        Usually,
        Regularly,
        Sometimes,
        Occasionally,
        Rarely,
        Never,
    }

    public class NavigationPauseLevelSettings
    {
        public static readonly float Always = 1f;
        public static readonly float Usually = 0.833f;
        public static readonly float Regularly = .666f;
        public static readonly float Sometimes = .5f;
        public static readonly float Occasionally = .333f;
        public static readonly float Rarely = .166f;
        public static readonly float Never = 0f;
    }

    public enum MeleeUsage
    {
        BareHand,
        UseWeapon,
        UseWeaponFullRange,
    }

    public enum ShootDelayTime
    {
        ExtremelyShort,
        VeryShort,
        Short,
        Normal,
        Long,
        VeryLong,
        ExtremelyLong,
    }

    public enum BurstTime
    {
        ExtremelyShort,
        VeryShort,
        Short,
        Normal,
        Long,
        VeryLong,
        ExtremelyLong,
    }

    public static class ShootDelayTimeSettings
    {
        public static readonly int[] ExtremelyShort = new int[] {   0,   80 };
        public static readonly int[] VeryShort =      new int[] {  80,  200 };
        public static readonly int[] Short =          new int[] { 150,  400 };
        public static readonly int[] Normal =         new int[] { 250,  600 };
        public static readonly int[] Long =           new int[] { 400,  800 };
        public static readonly int[] VeryLong =       new int[] { 600, 1500 };
        public static readonly int[] ExtremelyLong =  new int[] { 800, 2000 };
    }

    public static class BurstTimeSettings
    {
        public static readonly int[] ExtremelyShort = new int[] {  200,  600 };
        public static readonly int[] VeryShort =      new int[] {  300,  800 };
        public static readonly int[] Short =          new int[] {  500, 1000 };
        public static readonly int[] Normal =         new int[] {  700, 1200 };
        public static readonly int[] Long =           new int[] { 1000, 1500 };
        public static readonly int[] VeryLong =       new int[] { 1400, 3000 };
        public static readonly int[] ExtremelyLong =  new int[] { 3000, 5000 };
    }

    // An abstraction to simplify editing BotBehaviorSet
    public class BehaviorSettings
    {
        public readonly SearchRange SearchRange;
        public readonly SearchItems SearchItems;
        public readonly NavigationPauseLevel NavigationPauseLevel;
        public readonly MeleeUsage MeleeUsage;
        public readonly ShootDelayTime ShootDelayTime;
        public readonly BurstTime BurstTime;
        public readonly OffensiveLevel OffensiveLevel;
        public readonly DefensiveLevel DefensiveLevel;

        public BehaviorSettings()
        {
            SearchRange = SearchRange.Infinite;
            SearchItems = SearchItems.All;
            NavigationPauseLevel = NavigationPauseLevel.Rarely;
            MeleeUsage = MeleeUsage.UseWeapon;
            ShootDelayTime = ShootDelayTime.Normal;
            BurstTime = BurstTime.Normal;
            OffensiveLevel = OffensiveLevel.Normal;
            DefensiveLevel = DefensiveLevel.Normal;
        }
    }

    public static class BehaviorHelper
    {
        public static BotBehaviorSet Apply(BotBehaviorSet botBehaviorSet, BehaviorSettings settings)
        {
            botBehaviorSet.SearchForItems = true;
            switch (settings.SearchRange)
            {
                case SearchRange.Infinite:
                    botBehaviorSet.SearchItemRange = SearchRangeSettings.Infinite;
                    break;
                case SearchRange.Large:
                    botBehaviorSet.SearchItemRange = SearchRangeSettings.Large;
                    break;
                case SearchRange.Small:
                    botBehaviorSet.SearchItemRange = SearchRangeSettings.Small;
                    break;
                case SearchRange.None:
                    botBehaviorSet.SearchForItems = false;
                    break;
            }

            botBehaviorSet.SearchItems = settings.SearchItems;

            switch (settings.OffensiveLevel)
            {
                case OffensiveLevel.ExtremelyHigh:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.ExtremelyHigh);
                    break;
                case OffensiveLevel.VeryHigh:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.VeryHigh);
                    break;
                case OffensiveLevel.High:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.High);
                    break;
                case OffensiveLevel.Normal:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.Normal);
                    break;
                case OffensiveLevel.Low:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.Low);
                    break;
                case OffensiveLevel.VeryLow:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.VeryLow);
                    break;
                case OffensiveLevel.ExtremelyLow:
                    Offensive(botBehaviorSet, OffenseDefenseLevelSettings.ExtremelyLow);
                    break;
            }

            switch (settings.DefensiveLevel)
            {
                case DefensiveLevel.ExtremelyHigh:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.ExtremelyHigh);
                    break;
                case DefensiveLevel.VeryHigh:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.VeryHigh);
                    break;
                case DefensiveLevel.High:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.High);
                    break;
                case DefensiveLevel.Normal:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.Normal);
                    break;
                case DefensiveLevel.Low:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.Low);
                    break;
                case DefensiveLevel.VeryLow:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.VeryLow);
                    break;
                case DefensiveLevel.ExtremelyLow:
                    Defensive(botBehaviorSet, OffenseDefenseLevelSettings.ExtremelyLow);
                    break;
            }

            switch (settings.MeleeUsage)
            {
                case MeleeUsage.BareHand:
                    botBehaviorSet.MeleeUsage = true;
                    break;
                case MeleeUsage.UseWeapon:
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    break;
                case MeleeUsage.UseWeaponFullRange:
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = true;
                    break;
            }

            switch (settings.ShootDelayTime)
            {
                case ShootDelayTime.ExtremelyLong:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.ExtremelyLong);
                    break;
                case ShootDelayTime.VeryLong:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.VeryLong);
                    break;
                case ShootDelayTime.Long:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.Long);
                    break;
                case ShootDelayTime.Normal:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.Normal);
                    break;
                case ShootDelayTime.Short:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.Short);
                    break;
                case ShootDelayTime.VeryShort:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.VeryShort);
                    break;
                case ShootDelayTime.ExtremelyShort:
                    SetShootDelay(botBehaviorSet, ShootDelayTimeSettings.ExtremelyShort);
                    break;
            }

            switch (settings.BurstTime)
            {
                case BurstTime.ExtremelyLong:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.ExtremelyLong);
                    break;
                case BurstTime.VeryLong:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.VeryLong);
                    break;
                case BurstTime.Long:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.Long);
                    break;
                case BurstTime.Normal:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.Normal);
                    break;
                case BurstTime.Short:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.Short);
                    break;
                case BurstTime.VeryShort:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.VeryShort);
                    break;
                case BurstTime.ExtremelyShort:
                    SetBurstTime(botBehaviorSet, BurstTimeSettings.ExtremelyShort);
                    break;
            }

            return botBehaviorSet;
        }

        // TriggerHappy
        // FastAndReckless // cowboy
        // FastAndHesitant // sniper
        // SlowAndReckless // terminator
        // SlowAndHesitant // newbie

        // All burst-related fields range from 0-5000
        public static BotBehaviorSet SetShootDelay(BotBehaviorSet botBehaviorSet, int[] shootDelay)
        {
            if (shootDelay.Length != 2) return botBehaviorSet;

            // Initial shoot delay after entering hip fire with the weapon in milliseconds
            botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = shootDelay[0];
            botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = shootDelay[1];

            // Initial shoot delay after aiming with the weapon in milliseconds
            botBehaviorSet.RangedWeaponAimShootDelayMin = shootDelay[0] * 3 / 2;
            botBehaviorSet.RangedWeaponAimShootDelayMax = shootDelay[1] * 3 / 2;

            // Initial shoot delay after aiming with the WeaponPrecision in milliseconds
            botBehaviorSet.RangedWeaponPrecisionAimShootDelayMin = shootDelay[0];
            botBehaviorSet.RangedWeaponPrecisionAimShootDelayMax = shootDelay[1];

            // Pause between bursts in milliseconds
            botBehaviorSet.RangedWeaponBurstPauseMin = shootDelay[0] * 3 / 2;
            botBehaviorSet.RangedWeaponBurstPauseMax = shootDelay[1] * 3 / 2;

            // Pause between bursts with the WeaponPrecision in milliseconds
            botBehaviorSet.RangedWeaponPrecisionBurstPauseMin = shootDelay[0];
            botBehaviorSet.RangedWeaponPrecisionBurstPauseMax = shootDelay[1];

            return botBehaviorSet;
        }

        public static BotBehaviorSet SetBurstTime(BotBehaviorSet botBehaviorSet, int[] burstTime)
        {
            if (burstTime.Length != 2) return botBehaviorSet;

            // Burst duration in milliseconds
            botBehaviorSet.RangedWeaponBurstTimeMin = burstTime[0] / 2;
            botBehaviorSet.RangedWeaponBurstTimeMax = burstTime[1] / 2;

            // Burst duration with the WeaponPrecision in milliseconds
            botBehaviorSet.RangedWeaponPrecisionBurstTimeMin = burstTime[0];
            botBehaviorSet.RangedWeaponPrecisionBurstTimeMax = burstTime[1];

            return botBehaviorSet;
        }

        // AI characteristics
        // Item Usage
        // - Melee, MeleeWeapon, MeleeWeaponFullRange, RangedWeapon, Powerup
        // Offensive
        // Defensive
        // Melee
        // Tatical
        // - SearchForItems
        // - SearchItems
        // - TeamLineUp
        // - SeekCoverWhileShooting
        // - ChokePointValue
        // - ChokePointPlayerCountThreshold
        // Reckless
        // - RangedWeaponLOSIgnoreTeammates
        // Shooting
        // - Precision
        // - Adjustment Speed

        // AI Type
        // Assassin
        // - Fast Reaction, Offensive, Tatical
        // - Assassin, Ninja
        // Tatical:
        // - Fast Reaction, Defensive, Tatical 
        // - Soldier, Agent
        // Thug:
        // - Offensive, NotTatical
        // 
        // Reckless: Thug, Biker
        // Rambo: Terminator, Demolitionist
        // Hulk:
        //
        // Zombie: 
        //

        // MeleeType
        // Sneaky
        // Tatical
        // Reckless
        // Hulk: Slow

        public static BotBehaviorSet Offensive(BotBehaviorSet botBehaviorSet, float offensiveLevel)
        {
            botBehaviorSet.OffensiveDiveLevel = offensiveLevel;
            botBehaviorSet.OffensiveEnrageLevel = offensiveLevel;
            botBehaviorSet.OffensiveClimbingLevel = offensiveLevel;
            botBehaviorSet.OffensiveSprintLevel = offensiveLevel;
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = offensiveLevel;

            return botBehaviorSet;
        }

        public static BotBehaviorSet Defensive(BotBehaviorSet botBehaviorSet, float defensiveLevel)
        {
            botBehaviorSet.DefensiveBlockLevel = defensiveLevel;
            botBehaviorSet.DefensiveAvoidProjectilesLevel = defensiveLevel;
            botBehaviorSet.DefensiveRollFireLevel = defensiveLevel;
            botBehaviorSet.SeekCoverWhileShooting = defensiveLevel;

            return botBehaviorSet;
        }
    }

