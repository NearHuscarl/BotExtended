// This file is auto generated by ScriptLinker at 19:24:22 05/04/2022
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: NearHuscarl
* description: Spawn a variety of bots from the campaign and challenge maps to make thing more chaotic.
* mapmodes: versus
*/
        /// <summary>
        /// Placeholder constructor that's not to be included in the ScriptWindow!
        /// </summary>

        public void OnStartup()
        {
            // invoke the static contructor to create the null instance IPlayer
            var bot = Bot.None;
        }

        public void AfterStartup()
        {
            // Initialize in AfterStartup instead of in OnStartup because we need to wait until the null IPlayer instance is removed from the world.
            // otherwise, IPlayer.IsRemoved is not updated yet after calling Remove() and Game.GetPlayers() still returns the null IPlayer
            Initialize();
        }

        private void Initialize()
        {
            // How to create a bot
            // 1. Define bot type in BotType.cs
            // 2. Define bot profile in BotProfiles.cs
            // 3. Define bot weapon in BotWeapons.cs
            // 4. Define bot behavior in BotBehaviors.cs (optional)
            // 5. Define bot info in BotInfos.cs
            // 6. Define bot class in Bots/ and add it to BotFactory.cs for additional behaviors (optional)
            // 7. Define bot faction name in BotFaction.cs (optional)
            // 8. Define bot faction and sub-faction in BotFactionSets.cs

            //System.Diagnostics.Debugger.Break();

            PowerupManager.Initialize();
            WeaponManager.Initialize();
            BotManager.Initialize();

            if (Game.IsEditorTest)
            {
                var player = Game.GetPlayers()[0];
                var modifiers = player.GetModifiers();

                //Events.UpdateCallback.Start(e =>
                //{
                //    var users = Game.GetActiveUsers();
                //    var plr = (users != null && users.Length > 0 ? users[0].GetPlayer() : null); // any player instance

                //    if (plr != null)
                //    {
                //        var worldPos = plr.GetWorldPosition() + Vector2.UnitY * 12f;
                //        var worldPosEnd = worldPos + plr.AimVector * 100f;

                //        if (Game.IsEditorTest)
                //        {
                //            Game.DrawLine(worldPos, worldPosEnd, Color.Red);
                //        }

                //        var rci = new RayCastInput() { IncludeOverlap = true, MaskBits = 0xFFFF, FilterOnMaskBits = true };
                //        var results = Game.RayCast(worldPos, worldPosEnd, rci);
                //        foreach (RayCastResult result in results)
                //        {

                //            if (Game.IsEditorTest)
                //            {
                //                Game.DrawCircle(result.Position, 1f, Color.Yellow);
                //                Game.DrawLine(result.Position, result.Position + result.Normal * 5f, Color.Yellow);
                //                Game.DrawArea(result.HitObject.GetAABB(), Color.Yellow);
                //                var cf = result.HitObject.GetCollisionFilter();
                //                Game.DrawText(cf.CategoryBits + " " + cf.ProjectileHit + " " + cf.AbsorbProjectile, result.Position, Color.Yellow);
                //            }

                //            // Destroy nearby glass that the player is looking at
                //            if (result.Fraction < 0.3f && result.HitObject.Name.IndexOf("glass", StringComparison.OrdinalIgnoreCase) >= 0)
                //            {
                //                result.HitObject.Destroy();
                //            }

                //        }
                //    }
                //}, 0);

                //player.SetProfile(new IProfile { Name = "Burnt", Skin = new IProfileClothingItem("BurntSkin", "Skin4", "ClothingLightGray") });

                var i = 0;
                foreach (var player2 in Game.GetPlayers().Where(p3 => p3.GetTeam() == PlayerTeam.Team4))
                {
                    if (i > 1)
                    {
                        player2.Kill();
                        //player2.SetWorldPosition(new Vector2(-195, 77));
                    }
                    //else
                    //player2.SetWorldPosition(new Vector2(-230, 77));
                    //player2.Kill();
                    //player2.SetHealth(40);
                    i++;
                }

                //BotManager.SpawnBot(BotType.Kriegbar, team: PlayerTeam.Independent, ignoreFullSpawner: true);

                player.SetWorldPosition(new Vector2(-250, 77));

                //for (i = 0; i < 5; i++)
                //{
                //    BotManager.SpawnBot(BotType.Cowboy, team: RandomHelper.GetEnumValue<PlayerTeam>(), ignoreFullSpawner: true);
                //}

                modifiers.MaxHealth = 1000;
                modifiers.CurrentHealth = 1000;
                modifiers.EnergyConsumptionModifier = .1f;
                modifiers.RunSpeedModifier = 1.25f;
                modifiers.SprintSpeedModifier = 1.25f;
                //modifiers.MeleeStunImmunity = 1;
                modifiers.InfiniteAmmo = 1;

                player.SetTeam(PlayerTeam.Team1);
                player.SetModifiers(modifiers);
                //player.GiveWeaponItem(WeaponItem.KNIFE);
                //player.GiveWeaponItem(WeaponItem.FLAREGUN);
                //player.GiveWeaponItem(WeaponItem.ASSAULT);
                player.GiveWeaponItem(WeaponItem.GRENADES);
                player.GiveWeaponItem(WeaponItem.STRENGTHBOOST);
            }
        }

        public void OnShutdown()
        {
            BotManager.OnShutdown();
        }

    public enum BotAI
    {
        Debug,
        None, // Normal SF (not extended bot)

        Hacker,
        Expert,
        Hard,
        Normal,
        Easy,

        MeleeExpert, // == BotAI.Hacker but with range weapons disabled
        MeleeHard, // == BotAI.Expert but with range weapons disabled
        RangeExpert, // == BotAI.Hacker but with melee weapons disabled
        RangeHard, // == BotAI.Expert but with melee weapons disabled

        Grunt,
        Hulk,
        RagingHulk,

        // Jogger + hard melee/shooting
        AssassinMelee,
        AssassinRange,

        // Trigger-happy Grunt
        Cowboy,
        // Trigger-happy hard
        Sheriff,
        Spacer,
        SpacerExpert,

        Babybear,
        Kingpin,
        Meatgrinder,
        Ninja,
        Hunter,
        Sniper,
        Soldier,

        ZombieSlow,
        ZombieFast,
        ZombieHulk,
        ZombieFighter,
    }
        public static BotMeleeActions HulkMeleeActions
        {
            get
            {
                return new BotMeleeActions()
                {
                    Attack = (ushort)10,
                    AttackCombo = (ushort)20,
                    Block = (ushort)1,
                    Kick = (ushort)1,
                    Jump = (ushort)1,
                    Wait = (ushort)10, // Hulk's original is 50
                    Grab = (ushort)6
                };
            }
        }

        public static BotBehaviorSet GetBehaviorSet(BotAI botAI)
        {
            var botBehaviorSet = new BotBehaviorSet()
            {
                MeleeActions = BotMeleeActions.Default,
                MeleeActionsWhenHit = BotMeleeActions.DefaultWhenHit,
                MeleeActionsWhenEnraged = BotMeleeActions.DefaultWhenEnraged,
                MeleeActionsWhenEnragedAndHit = BotMeleeActions.DefaultWhenEnragedAndHit,
                ChaseRange = 44f,
                GuardRange = 40f,
            };

            switch (botAI)
            {
                #region Debug
                case BotAI.Debug:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotD);
                    botBehaviorSet.RangedWeaponBurstTimeMin = 5000;
                    botBehaviorSet.RangedWeaponBurstTimeMax = 5000;
                    botBehaviorSet.RangedWeaponBurstPauseMin = 0;
                    botBehaviorSet.RangedWeaponBurstPauseMax = 0;
                    break;
                }
                #endregion

                #region Easy
                case BotAI.Easy:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotD);
                    break;
                }
                #endregion

                #region Normal
                case BotAI.Normal:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotC);
                    break;
                }
                #endregion

                #region Hard
                case BotAI.Hard:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotB);
                    break;
                }
                #endregion

                #region Expert
                case BotAI.Expert:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotA);
                    break;
                }
                #endregion

                #region Hacker
                case BotAI.Hacker:
                {
                    botBehaviorSet.NavigationMode = BotBehaviorNavigationMode.PathFinding;
                    botBehaviorSet.MeleeMode = BotBehaviorMeleeMode.Default;
                    botBehaviorSet.EliminateEnemies = true;
                    botBehaviorSet.SearchForItems = true;
                    botBehaviorSet.OffensiveEnrageLevel = 0.8f;
                    botBehaviorSet.NavigationRandomPausesLevel = 0.1f;
                    botBehaviorSet.DefensiveRollFireLevel = 0.95f;
                    botBehaviorSet.DefensiveAvoidProjectilesLevel = 0.7f;
                    botBehaviorSet.OffensiveClimbingLevel = 0.7f;
                    botBehaviorSet.OffensiveSprintLevel = 0.6f;
                    botBehaviorSet.OffensiveDiveLevel = 0.6f;
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.9f;
                    botBehaviorSet.ChokePointPlayerCountThreshold = 1;
                    botBehaviorSet.ChokePointValue = 150f;
                    botBehaviorSet.MeleeWaitTimeLimitMin = 100f;
                    botBehaviorSet.MeleeWaitTimeLimitMax = 200f;
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.SetMeleeActionsToExpert();
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.RangedWeaponUsage = true;
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 50f;
                    botBehaviorSet.RangedWeaponAimShootDelayMax = 200f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = 50f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = 50f;
                    botBehaviorSet.RangedWeaponBurstTimeMin = 400f;
                    botBehaviorSet.RangedWeaponBurstTimeMax = 800f;
                    botBehaviorSet.RangedWeaponBurstPauseMin = 400f;
                    botBehaviorSet.RangedWeaponBurstPauseMax = 800f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 800f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;
                    botBehaviorSet.RangedWeaponPrecisionAimShootDelayMin = 25f;
                    botBehaviorSet.RangedWeaponPrecisionAimShootDelayMax = 50f;
                    botBehaviorSet.RangedWeaponPrecisionBurstTimeMin = 800f;
                    botBehaviorSet.RangedWeaponPrecisionBurstTimeMax = 1600f;
                    botBehaviorSet.RangedWeaponPrecisionBurstPauseMin = 100f;
                    botBehaviorSet.RangedWeaponPrecisionBurstPauseMax = 200f;
                    break;
                }
                #endregion

                #region MeleeExpert
                case BotAI.MeleeExpert:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.MeleeB);
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.9f;
                    botBehaviorSet.MeleeWaitTimeLimitMin = 600f;
                    botBehaviorSet.MeleeWaitTimeLimitMax = 800f;
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = true;
                    break;
                }
                #endregion

                #region MeleeHard
                case BotAI.MeleeHard:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.MeleeB);
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.75f;
                    botBehaviorSet.MeleeWaitTimeLimitMin = 800f;
                    botBehaviorSet.MeleeWaitTimeLimitMax = 1000f;
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = false;
                    break;
                }
                #endregion

                #region Ninja == BotAI.MeleeExpert + more offensive melee tactic
                case BotAI.Ninja:
                {
                    botBehaviorSet = Rage(botBehaviorSet);
                    botBehaviorSet = VeryDefensive(botBehaviorSet);

                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = true;
                    botBehaviorSet.SearchForItems = true;
                    botBehaviorSet.SearchItems = SearchItems.Melee | SearchItems.Throwable;

                    botBehaviorSet.OffensiveEnrageLevel = 0.5f;
                    botBehaviorSet.OffensiveDiveLevel = 0.1f;
                    break;
                }
                #endregion

                #region RangeExpert
                case BotAI.RangeExpert:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 600f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;
                    break;
                }
                #endregion

                #region RangeHard
                case BotAI.RangeHard:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponAccuracy = 0.75f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 600f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.9f;
                    break;
                }
                #endregion

                #region Sniper == BotAI.RangeExpert + Defensive
                case BotAI.Hunter:
                case BotAI.Sniper:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponMode = BotBehaviorRangedWeaponMode.ManualAim;
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 600f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;
                    botBehaviorSet = VeryDefensive(botBehaviorSet);
                    botBehaviorSet = VeryInoffensive(botBehaviorSet);
                    botBehaviorSet.TeamLineUp = false;
                    break;
                }
                #endregion

                #region Spacer - Slow shooter
                case BotAI.Spacer:
                case BotAI.SpacerExpert:
                {
                    if (botAI == BotAI.SpacerExpert)
                        botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotA);
                    else
                        botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponMode = BotBehaviorRangedWeaponMode.ManualAim;
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 1000f;
                    botBehaviorSet.RangedWeaponAimShootDelayMax = 3000f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;
                    botBehaviorSet.RangedWeaponPrecisionAimShootDelayMin = 1500f;
                    break;
                }
                #endregion

                #region Grunt
                case BotAI.Grunt:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Grunt);

                    // Taken from PredefinedAIType.BotB, PredefinedAIType.Grunt is too slow in shooting
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 200f;
                    botBehaviorSet.RangedWeaponAimShootDelayMax = 600f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = 200f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = 600f;
                    botBehaviorSet.RangedWeaponBurstTimeMin = 400f;
                    botBehaviorSet.RangedWeaponBurstTimeMax = 800f;
                    botBehaviorSet.RangedWeaponBurstPauseMin = 400f;
                    botBehaviorSet.RangedWeaponBurstPauseMax = 800f;
                    break;
                }
                #endregion

                #region Hulk
                case BotAI.Hulk:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Hulk);
                    botBehaviorSet.SetMeleeActionsAll(HulkMeleeActions);
                    break;
                }
                #endregion

                #region RagingHulk
                case BotAI.RagingHulk:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hulk);
                    botBehaviorSet = Rage(botBehaviorSet);
                    botBehaviorSet.SetMeleeActionsAll(new BotMeleeActions()
                    {
                        Attack = (ushort)4,
                        AttackCombo = (ushort)20,
                        Block = (ushort)1,
                        Kick = (ushort)4,
                        Jump = (ushort)1,
                        Wait = (ushort)0,
                        Grab = (ushort)16,
                    });
                    break;
                }
                #endregion

                #region Meatgrinder
                case BotAI.Meatgrinder:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Meatgrinder);
                    break;
                }
                #endregion

                #region Assassin
                case BotAI.AssassinMelee:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.MeleeHard);
                    botBehaviorSet = Jogger(botBehaviorSet);
                    break;
                }
                case BotAI.AssassinRange:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.RangeHard);
                    botBehaviorSet = Jogger(botBehaviorSet);
                    break;
                }
                #endregion

                #region BabyBear
                case BotAI.Babybear:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Easy);
                    botBehaviorSet.RangedWeaponUsage = false;
                    botBehaviorSet.SearchForItems = false;
                    botBehaviorSet.OffensiveClimbingLevel = 0.9f;
                    botBehaviorSet.OffensiveSprintLevel = 0.85f;
                    botBehaviorSet.GuardRange = 16;
                    botBehaviorSet.ChaseRange = 16;
                    break;
                }
                #endregion

                #region Cowboy
                case BotAI.Cowboy:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Grunt);
                    botBehaviorSet = TriggerHappy(botBehaviorSet);
                    break;
                }
                #endregion

                #region Kingpin
                case BotAI.Kingpin:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hard);
                    botBehaviorSet.OffensiveSprintLevel = 0.8f;
                    botBehaviorSet.SetMeleeActionsAll(new BotMeleeActions()
                    {
                        Attack = (ushort)16,
                        AttackCombo = (ushort)24,
                        Block = (ushort)1,
                        Kick = (ushort)1,
                        Jump = (ushort)1,
                        Wait = (ushort)10, // Hulk's original is 50
                        Grab = (ushort)8
                    });
                    break;
                }
                #endregion

                #region Sheriff
                case BotAI.Sheriff:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hard);
                    botBehaviorSet = TriggerHappy(botBehaviorSet);
                    break;
                }
                #endregion

                #region Soldier
                case BotAI.Soldier:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hard);
                    botBehaviorSet = Defensive(botBehaviorSet);
                    break;
                }
                #endregion

                #region ZombieSlow
                case BotAI.ZombieSlow:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.ZombieA);
                    break;
                }
                #endregion

                #region ZombieFast
                case BotAI.ZombieFast:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.ZombieB);
                    break;
                }
                #endregion

                #region ZombieHulk
                case BotAI.ZombieHulk:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Hulk);
                    botBehaviorSet.AttackDeadEnemies = true;
                    botBehaviorSet.SearchForItems = false;
                    botBehaviorSet.MeleeWeaponUsage = false;
                    botBehaviorSet.RangedWeaponUsage = false;
                    botBehaviorSet.PowerupUsage = false;
                    botBehaviorSet.ChokePointValue = 32f;
                    botBehaviorSet.ChokePointPlayerCountThreshold = 5;
                    botBehaviorSet.DefensiveRollFireLevel = 0.1f;
                    botBehaviorSet.OffensiveDiveLevel = 0f;
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0f;
                    break;
                }
                #endregion

                #region ZombieFighter
                case BotAI.ZombieFighter:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.MeleeHard);
                    botBehaviorSet.AttackDeadEnemies = true;
                    botBehaviorSet.SearchForItems = false;
                    botBehaviorSet.PowerupUsage = false;
                    botBehaviorSet.ChokePointValue = 32f;
                    botBehaviorSet.ChokePointPlayerCountThreshold = 5;
                    botBehaviorSet.DefensiveRollFireLevel = 0.1f;
                    botBehaviorSet.OffensiveDiveLevel = 0f;
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0f;
                    botBehaviorSet.RocketRideProficiency = .8f;
                    break;
                }
                #endregion

                #region default
                default:
                {
                    botBehaviorSet.NavigationMode = BotBehaviorNavigationMode.None;
                    botBehaviorSet.MeleeMode = BotBehaviorMeleeMode.None;
                    botBehaviorSet.EliminateEnemies = false;
                    botBehaviorSet.SearchForItems = false;
                    break;
                }
                #endregion
            }

            botBehaviorSet.SearchForItems = true;
            botBehaviorSet.SearchItems = SearchItems.None; // Disable SearchItems by setting to None

            return botBehaviorSet;
        }

        private static BotBehaviorSet Offensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.75f;

            botBehaviorSet.OffensiveEnrageLevel = 0.6f;
            botBehaviorSet.OffensiveClimbingLevel = 0.7f;
            botBehaviorSet.OffensiveSprintLevel = 0.7f;
            botBehaviorSet.OffensiveDiveLevel = 0.7f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet VeryOffensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.9f;

            botBehaviorSet.OffensiveEnrageLevel = 0.7f;
            botBehaviorSet.OffensiveClimbingLevel = 0.9f;
            botBehaviorSet.OffensiveSprintLevel = 0.9f;
            botBehaviorSet.OffensiveDiveLevel = 0.8f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet Rage(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet = VeryOffensive(botBehaviorSet);
            botBehaviorSet.MeleeWaitTimeLimitMin = 200f;
            botBehaviorSet.MeleeWaitTimeLimitMax = 400f;
            botBehaviorSet.TeamLineUp = false;
            botBehaviorSet.RangedWeaponLOSIgnoreTeammates = true;

            botBehaviorSet.OffensiveEnrageLevel = 0.8f;
            botBehaviorSet.NavigationRandomPausesLevel = 0.1f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet VeryInoffensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.OffensiveEnrageLevel = 0.2f;
            botBehaviorSet.OffensiveClimbingLevel = 0f;
            botBehaviorSet.OffensiveSprintLevel = 0f;
            botBehaviorSet.OffensiveDiveLevel = 0f;
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet Defensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.DefensiveBlockLevel = 0f; // NOT YET IMPLEMENTED
            botBehaviorSet.DefensiveAvoidProjectilesLevel = .8f; // expert ref: .4f
            botBehaviorSet.DefensiveRollFireLevel = .85f; // .9f
            botBehaviorSet.SeekCoverWhileShooting = .85f; // .85f

            return botBehaviorSet;
        }

        private static BotBehaviorSet VeryDefensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.DefensiveBlockLevel = 0f; // NOT YET IMPLEMENTED
            botBehaviorSet.DefensiveAvoidProjectilesLevel = .95f;
            botBehaviorSet.DefensiveRollFireLevel = .95f;
            botBehaviorSet.SeekCoverWhileShooting = .99f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet Jogger(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.OffensiveClimbingLevel = 0.9f;
            botBehaviorSet.OffensiveSprintLevel = 0.9f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet TriggerHappy(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.RangedWeaponAimShootDelayMin = 0;
            botBehaviorSet.RangedWeaponAimShootDelayMax = 50;
            botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = 0;
            botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = 25;
            botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 50;

            return botBehaviorSet;
        }
        public static BotType[] CommonZombieTypes = new BotType[]
        {
            BotType.Zombie,
            BotType.ZombieAgent,
            BotType.ZombieFlamer,
            BotType.ZombieGangster,
            BotType.ZombieNinja,
            BotType.ZombiePolice,
            BotType.ZombieSoldier,
            BotType.ZombieThug,
            BotType.ZombieWorker,
        };
        public static BotType[] MutatedZombieTypes = new BotType[]
        {
            BotType.ZombieBruiser,
            BotType.ZombieChild,
            BotType.ZombieFat,
            BotType.ZombieFlamer,
        };

        public static FactionSet GetFactionSet(BotFaction botFaction)
        {
            var factionSet = new FactionSet(botFaction);
            var bosses = new List<SubFaction>();

            switch (botFaction)
            {
                #region Assassin
                case BotFaction.Assassin:
                {
                    factionSet.AddFaction(new SubFaction(BotType.AssassinMelee, 1f));
                    factionSet.AddFaction(new SubFaction(BotType.AssassinRange, 1f));
                    break;
                }
                #endregion

                #region Agent
                case BotFaction.Boss_Agent79:
                case BotFaction.Boss_President:
                case BotFaction.Agent:
                {
                    if (botFaction == BotFaction.Boss_Agent79) bosses.Add(new SubFaction(BotType.Agent79));
                    if (botFaction == BotFaction.Boss_President) bosses.Add(new SubFaction(BotType.President));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Agent, 1f),
                    });
                    break;
                }
                #endregion

                #region Bandido
                case BotFaction.Bandido:
                {
                    factionSet.AddFaction(new SubFaction(BotType.Bandido, 1f));
                    break;
                }
                #endregion

                #region Biker
                case BotFaction.Boss_Jo:
                case BotFaction.Biker:
                {
                    if (botFaction == BotFaction.Boss_Jo) bosses.Add(new SubFaction(BotType.Jo));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Biker, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Biker, 0.7f),
                        new SubFaction(BotType.BikerHulk, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Clown
                case BotFaction.Boss_Funnyman:
                case BotFaction.Boss_Balloonatic:
                case BotFaction.Clown:
                {
                    if (botFaction == BotFaction.Boss_Funnyman) bosses.Add(new SubFaction(BotType.Funnyman));
                    if (botFaction == BotFaction.Boss_Balloonatic) bosses.Add(new SubFaction(BotType.Balloonatic));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.ClownCowboy, 0.5f),
                        new SubFaction(BotType.ClownGangster, 0.25f),
                        new SubFaction(BotType.ClownBoxer, 0.25f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.ClownCowboy, 0.6f),
                        new SubFaction(BotType.ClownGangster, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.ClownBoxer, 0.7f),
                        new SubFaction(BotType.ClownGangster, 0.3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.ClownBodyguard, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(new BotType[]
                        {
                            BotType.ClownBoxer,
                            BotType.ClownCowboy,
                            BotType.ClownGangster,
                        }, 1f),
                    });
                    break;
                }
                #endregion

                #region Cowboy
                case BotFaction.Boss_Sheriff:
                case BotFaction.Cowboy:
                {
                    if (botFaction == BotFaction.Boss_Sheriff) bosses.Add(new SubFaction(BotType.Sheriff));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Cowboy, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Cowboy, .7f),
                        new SubFaction(BotType.Bandido, .3f),
                    });
                    break;
                }
                #endregion

                #region Engineer
                case BotFaction.Engineer:
                {
                    factionSet.AddFaction(new SubFaction(BotType.Engineer, 1f));
                    break;
                }
                #endregion

                #region Farmer
                case BotFaction.Boss_Handler:
                case BotFaction.Farmer:
                {
                    if (botFaction == BotFaction.Boss_Handler) bosses.Add(new SubFaction(BotType.Handler));
                    var nonFarmer = new BotType[] { BotType.Gardener, BotType.Lumberjack, BotType.Hunter, };

                    if (botFaction == BotFaction.Farmer)
                        factionSet.AddFaction(new SubFaction(BotType.Farmer, 1f));
                    else
                    {
                        factionSet.AddFaction(new List<SubFaction>(bosses)
                        {
                            new SubFaction(BotType.Farmer, 0.5f),
                            new SubFaction(nonFarmer, .5f),
                        });
                        factionSet.AddFaction(new List<SubFaction>(bosses)
                        {
                            new SubFaction(BotType.Farmer, 0.3f),
                            new SubFaction(nonFarmer, .7f),
                        });
                    }
                    break;
                }
                #endregion

                #region Gangster
                case BotFaction.Gangster:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Gangster, 0.8f),
                        new SubFaction(BotType.GangsterHulk, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Gangster, 0.7f),
                        new SubFaction(BotType.ThugHulk, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Hunter
                case BotFaction.Hunter:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Hunter, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Hunter, .7f),
                        new SubFaction(BotType.Farmer, .3f),
                    });
                    break;
                }
                #endregion

                #region MetroCop
                case BotFaction.Boss_MetroCop:
                case BotFaction.MetroCop:
                {
                    if (botFaction == BotFaction.Boss_MetroCop) bosses.Add(new SubFaction(BotType.MetroCop2));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.MetroCop, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.MetroCop, 0.7f),
                        new SubFaction(BotType.Agent, 0.3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.MetroCop, 0.5f),
                        new SubFaction(BotType.Agent, 0.5f),
                    });
                    break;
                }
                #endregion

                #region Mutant
                case BotFaction.Boss_BigMutant:
                case BotFaction.Mutant:
                {
                    if (botFaction == BotFaction.Boss_BigMutant) bosses.Add(new SubFaction(BotType.BigMutant));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Mutant, 1f),
                    });
                    break;
                }
                #endregion

                #region Nazi
                case BotFaction.Boss_MadScientist:
                case BotFaction.Boss_Kriegbar:
                case BotFaction.Nazi:
                {
                    if (botFaction == BotFaction.Boss_MadScientist) bosses.Add(new SubFaction(BotType.Fritzliebe));
                    if (botFaction == BotFaction.Boss_Kriegbar) bosses.Add(new SubFaction(BotType.Kriegbar));
                    factionSet.AddFaction(new List<SubFaction>(bosses));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.NaziSoldier, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.NaziSoldier, 0.6f),
                        new SubFaction(BotType.NaziMuscleSoldier, 0.4f),
                    });
                    break;
                }
                #endregion

                #region Police
                case BotFaction.Boss_Cindy:
                case BotFaction.Boss_PoliceChief:
                case BotFaction.Police:
                {
                    if (botFaction == BotFaction.Boss_Cindy) bosses.Add(new SubFaction(BotType.Cindy));
                    if (botFaction == BotFaction.Boss_PoliceChief) bosses.Add(new SubFaction(BotType.PoliceChief));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Police, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Police, 0.7f),
                        new SubFaction(BotType.PoliceSWAT, 0.3f),
                    });
                    break;
                }
                #endregion

                #region PoliceSWAT
                case BotFaction.Boss_Raze:
                case BotFaction.Boss_Smoker:
                case BotFaction.PoliceSWAT:
                {
                    if (botFaction == BotFaction.Boss_Raze) bosses.Add(new SubFaction(BotType.Raze));
                    if (botFaction == BotFaction.Boss_Smoker) bosses.Add(new SubFaction(BotType.Smoker));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.PoliceSWAT, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.PoliceSWAT, 0.8f),
                        new SubFaction(BotType.Police, 0.2f),
                    });
                    break;
                }
                #endregion

                #region Punk
                case BotFaction.Boss_Balista:
                case BotFaction.Boss_Firebug:
                case BotFaction.Punk:
                {
                    if (botFaction == BotFaction.Boss_Balista) bosses.Add(new SubFaction(BotType.Balista));
                    if (botFaction == BotFaction.Boss_Firebug) bosses.Add(new SubFaction(BotType.Firebug));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Punk, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Punk, 0.5f),
                        new SubFaction(BotType.Biker, 0.5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Punk, 0.6f),
                        new SubFaction(BotType.PunkHulk, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Punk, .75f),
                        new SubFaction(BotType.PunkHulk, .25f),
                    });
                    break;
                }
                #endregion

                #region Pyromaniac
                case BotFaction.Boss_Incinerator:
                case BotFaction.Boss_Fireman:
                case BotFaction.Pyromaniac:
                {
                    if (botFaction == BotFaction.Pyromaniac)
                    {
                        factionSet.AddFaction(new List<SubFaction>()
                        {
                            new SubFaction(BotType.Pyromaniac),
                            new SubFaction(BotType.Pyromaniac),
                            new SubFaction(BotType.Pyromaniac),
                        });
                        break;
                    }

                    if (botFaction == BotFaction.Boss_Incinerator) bosses.Add(new SubFaction(BotType.Incinerator));
                    if (botFaction == BotFaction.Boss_Fireman) bosses.Add(new SubFaction(BotType.Fireman));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Pyromaniac),
                        new SubFaction(BotType.Pyromaniac),
                    });
                    break;
                }
                #endregion

                #region Robot
                case BotFaction.Robot:
                {
                    factionSet.AddFaction(new SubFaction(BotType.Cyborg, 1f));
                    break;
                }
                #endregion

                #region Sniper
                case BotFaction.Sniper:
                {
                    factionSet.AddFaction(new SubFaction(BotType.Sniper, 1f));
                    break;
                }
                #endregion

                #region Spacer
                case BotFaction.Boss_Amos:
                case BotFaction.Boss_Reznor:
                case BotFaction.Spacer:
                {
                    if (botFaction == BotFaction.Boss_Amos) bosses.Add(new SubFaction(BotType.Amos));
                    if (botFaction == BotFaction.Boss_Reznor) bosses.Add(new SubFaction(BotType.Reznor));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Spacer, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Spacer, .7f),
                        new SubFaction(BotType.SpaceSniper, .3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Spacer, .9f),
                        new SubFaction(BotType.SpaceSniper, .1f),
                    });
                    break;
                }
                #endregion

                #region SpaceSniper
                case BotFaction.SpaceSniper:
                {
                    factionSet.AddFaction(new SubFaction(BotType.SpaceSniper, 1f));
                    break;
                }
                #endregion

                #region Stripper
                case BotFaction.Boss_Chairman:
                case BotFaction.Stripper:
                {
                    if (botFaction == BotFaction.Boss_Chairman) bosses.Add(new SubFaction(BotType.Chairman));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.Bodyguard, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.BikerHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.GangsterHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.PunkHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.ThugHulk, .5f),
                    });
                    break;
                }
                #endregion

                #region Soldier
                case BotFaction.Boss_Nadja:
                case BotFaction.Boss_BazookaJane:
                case BotFaction.Soldier:
                {
                    if (botFaction == BotFaction.Boss_BazookaJane) bosses.Add(new SubFaction(BotType.BazookaJane));
                    if (botFaction == BotFaction.Boss_Nadja) bosses.Add(new SubFaction(BotType.Nadja));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Soldier, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Soldier, 0.7f),
                        new SubFaction(BotType.Sniper, 0.3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Soldier, 0.9f),
                        new SubFaction(BotType.Soldier2, 0.1f),
                    });
                    break;
                }
                #endregion

                #region Survivor
                case BotFaction.Survivor:
                {
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Survivor, 1f),
                    });
                    break;
                }
                #endregion

                #region Thug
                case BotFaction.Boss_Beast:
                case BotFaction.Boss_Bobby:
                case BotFaction.Thug:
                {
                    if (botFaction == BotFaction.Boss_Beast) bosses.Add(new SubFaction(BotType.Beast));
                    if (botFaction == BotFaction.Boss_Bobby) bosses.Add(new SubFaction(BotType.Bobby));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Thug, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Thug, 0.5f),
                        new SubFaction(BotType.Biker, 0.5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(BotType.Thug, 0.6f),
                        new SubFaction(BotType.ThugHulk, 0.4f),
                    });
                    break;
                }
                #endregion

                #region Zombie
                case BotFaction.Zombie:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Zombie, 0.4f),
                        new SubFaction(CommonZombieTypes, 0.6f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieBruiser, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieBruiser, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieChild, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieChild, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieFat, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieFat, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieFlamer, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieFlamer, 0.4f),
                    });
                    break;
                }
                #endregion

                #region ZombieMutated
                case BotFaction.ZombieMutated:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(MutatedZombieTypes, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.2f),
                        new SubFaction(MutatedZombieTypes, 0.8f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.4f),
                        new SubFaction(MutatedZombieTypes, 0.6f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.7f),
                        new SubFaction(MutatedZombieTypes, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Boss_Standalone

                case BotFaction.Boss_Demolitionist:
                    factionSet.AddFaction(new SubFaction(BotType.Demolitionist));
                    break;
                case BotFaction.Boss_Hitman:
                    factionSet.AddFaction(new SubFaction(BotType.Hitman));
                    break;
                case BotFaction.Boss_Meatgrinder:
                    factionSet.AddFaction(new SubFaction(BotType.Meatgrinder));
                    break;
                case BotFaction.Boss_Mecha:
                    factionSet.AddFaction(new SubFaction(BotType.Mecha));
                    break;
                case BotFaction.Boss_MirrorMan:
                    factionSet.AddFaction(new SubFaction(BotType.MirrorMan));
                    break;
                case BotFaction.Boss_Ninja:
                    factionSet.AddFaction(new SubFaction(BotType.Ninja));
                    break;
                case BotFaction.Boss_Rambo:
                    factionSet.AddFaction(new SubFaction(BotType.Rambo));
                    break;
                case BotFaction.Boss_Survivalist:
                    factionSet.AddFaction(new SubFaction(BotType.Survivalist));
                    break;

                #endregion

                #region Boss_Boffin
                case BotFaction.Boss_Boffin:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Boffin),
                        new SubFaction(BotType.Scientist, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Boffin),
                        new SubFaction(BotType.LabAssistant, .5f),
                        new SubFaction(BotType.Scientist, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Boffin),
                        new SubFaction(BotType.Scientist, .75f),
                        new SubFaction(BotType.LabAssistant, .25f),
                    });
                    break;
                }
                #endregion

                #region Boss_Hacker
                case BotFaction.Boss_Hacker:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Hacker),
                        new SubFaction(BotType.Hacker),
                    });
                    break;
                }
                #endregion

                #region Boss_Kingpin
                case BotFaction.Boss_Kingpin:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Kingpin),
                        new SubFaction(BotType.Bodyguard, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Kingpin),
                        new SubFaction(BotType.GangsterHulk, 0.55f),
                        new SubFaction(BotType.Bodyguard2, 0.45f),
                    });
                    break;
                }
                #endregion
                
                #region Boss_Santa
                case BotFaction.Boss_Santa:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Santa),
                        new SubFaction(BotType.Elf, 1f),
                    });
                    break;
                }
                #endregion

                #region Boss_Teddybear
                case BotFaction.Boss_Teddybear:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Teddybear),
                        new SubFaction(BotType.Babybear),
                        new SubFaction(BotType.Babybear),
                    });
                    break;
                }
                #endregion

                #region Boss_Zombie
                case BotFaction.Boss_ZombieEater:
                case BotFaction.Boss_ZombieFighter:
                {
                    if (botFaction == BotFaction.Boss_ZombieEater) bosses.Add(new SubFaction(BotType.ZombieEater));
                    if (botFaction == BotFaction.Boss_ZombieFighter) bosses.Add(new SubFaction(BotType.ZombieFighter));
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(CommonZombieTypes, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>(bosses)
                    {
                        new SubFaction(CommonZombieTypes, 0.7f),
                        new SubFaction(MutatedZombieTypes, 0.3f),
                    });
                    break;
                }
                #endregion
            }

            return factionSet;
        }
    static class BotHelper
    {
        private static IScriptStorage _storage;
        public static IScriptStorage Storage
        {
            get
            {
                if (_storage == null)
                    _storage = Game.LocalStorage; return _storage;
            }
        }

        public static string StorageKey(string key)
        {
            return Constants.STORAGE_KEY_PREFIX + key;
        }
        public static string StorageKey(BotFaction botFaction, int factionIndex)
        {
            return Constants.STORAGE_KEY_PREFIX + SharpHelper.EnumToString(botFaction).ToUpperInvariant() + "_" + factionIndex;
        }

        public static IEnumerable<BotFaction> GetAvailableBotFactions()
        {
            return SharpHelper.EnumToList<BotFaction>().Where((f) => f != BotFaction.None);
        }

        public static BotFaction RandomFaction(List<BotFaction> botFactions, int botCount)
        {
            List<BotFaction> filteredBotFactions = null;
            if (botCount < 3) // Too few for a faction, spawn boss instead
            {
                filteredBotFactions = botFactions
                    .Select(g => g)
                    .Where(g => (int)g >= Constants.BOSS_FACTION_START_INDEX).ToList();
                if (!filteredBotFactions.Any())
                    filteredBotFactions = botFactions;
            }
            else
                filteredBotFactions = botFactions;

            var rndBotFaction = RandomHelper.GetItem(filteredBotFactions);

            return rndBotFaction;
        }

        public static List<PlayerSpawner> GetEmptyPlayerSpawners()
        {
            var spawners = Game.GetObjectsByName("SpawnPlayer");
            var emptySpawners = new List<PlayerSpawner>();
            var players = Game.GetPlayers();

            foreach (var spawner in spawners)
            {
                var spawnerHasPlayer = players.Any(x => x.GetAABB().Intersects(spawner.GetAABB()));
                if (!spawnerHasPlayer)
                {
                    emptySpawners.Add(new PlayerSpawner
                    {
                        Position = spawner.GetWorldPosition(),
                        HasSpawned = false,
                    });
                }
            }

            return emptySpawners;
        }

        // TODO: need better type detection
        public static BotType GetZombieType(BotType botType)
        {
            if (botType == BotType.None)
                return BotType.Zombie;

            var botInfo = GetInfo(botType);
            var aiType = botInfo.AIType;

            switch (aiType)
            {
                case BotAI.Hacker:
                case BotAI.Expert:
                case BotAI.MeleeExpert:
                    return BotType.ZombieFighter;

                case BotAI.Ninja:
                    return BotType.ZombieChild;

                case BotAI.Hulk:
                    return BotType.ZombieBruiser;
            }

            var modifiers = botInfo.Modifiers;

            if (modifiers.SprintSpeedModifier >= Speed.Fast)
                return BotType.ZombieChild;

            if (modifiers.SizeModifier >= Size.Big && modifiers.SizeModifier < Size.Chonky)
                return BotType.ZombieBruiser;
            if (modifiers.SizeModifier == Size.Chonky)
                return BotType.ZombieFat;

            return BotType.Zombie;
        }

        public static void Equip(IPlayer player, WeaponSet weaponSet)
        {
            if (player == null || weaponSet.IsEmpty) return;

            PowerupManager.SetPowerup(player, weaponSet.Melee, weaponSet.MeleePowerup);
            PowerupManager.SetPowerup(player, WeaponItem.NONE, weaponSet.MeleeHandPowerup); // order is important
            PowerupManager.SetPowerup(player, weaponSet.Primary, weaponSet.PrimaryPowerup);
            PowerupManager.SetPowerup(player, weaponSet.Secondary, weaponSet.SecondaryPowerup);
            // TODO: thrown weapon
            player.GiveWeaponItem(weaponSet.Throwable);
            player.GiveWeaponItem(weaponSet.Powerup);

            if (weaponSet.UseLazer) player.GiveWeaponItem(WeaponItem.LAZER);
        }

        public static WeaponSet GetWeaponSet(IPlayer player)
        {
            var bot = BotManager.GetBot(player);
            var playerWpn = PowerupManager.GetOrCreatePlayerWeapon(player);

            return new WeaponSet()
            {
                Melee = bot.CurrentMeleeWeapon,
                MeleePowerup = playerWpn != null ? playerWpn.Melee.Powerup : MeleeWeaponPowerup.None,
                MeleeHandPowerup = playerWpn.MeleeHand.Powerup,
                Primary = player.CurrentPrimaryWeapon.WeaponItem,
                PrimaryPowerup = playerWpn != null ? playerWpn.Primary.Powerup : RangedWeaponPowerup.None,
                Secondary = player.CurrentSecondaryWeapon.WeaponItem,
                SecondaryPowerup = playerWpn != null ? playerWpn.Secondary.Powerup : RangedWeaponPowerup.None,
                // TODO: add thrown powerup weapon here
                Throwable = player.CurrentThrownItem.WeaponItem,
                Powerup = player.CurrentPowerupItem.WeaponItem,
                // TODO: wait for gurt to add this: https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=4000
                //UseLazer = ...
            };
        }

        public static IProfile ToZombieProfile(IProfile profile)
        {
            switch (profile.Skin.Name)
            {
                case "Normal":
                case "Tattoos":
                case "Warpaint":
                    profile.Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", "");
                    break;

                case "Normal_fem":
                case "Tattoos_fem":
                case "Warpaint_fem":
                    profile.Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", "");
                    break;

                case "BearSkin":
                    profile.Skin = new IProfileClothingItem("FrankenbearSkin", "ClothingDarkGray", "ClothingLightBlue", "");
                    break;
            }

            return profile;
        }

        public static void SetPlayer(IPlayer player, BotType botType)
        {
            if (botType == BotType.None)
                return;
            BotManager.SpawnBot(botType, BotFaction.None, player, player.GetTeam());
        }

        public static void SetWeapon(IPlayer player, string weaponItemStr, string powerupStr)
        {
            var weaponItem = SharpHelper.StringToEnum<WeaponItem>(weaponItemStr);
            var type = Mapper.GetWeaponItemType(weaponItem);

            switch (type)
            {
                // TODO: thrown powerup
                case WeaponItemType.NONE: // bare hand
                case WeaponItemType.Melee:
                {
                    var powerup = SharpHelper.StringToEnum<MeleeWeaponPowerup>(powerupStr);
                    if (powerup == MeleeWeaponPowerup.None)
                    {
                        player.GiveWeaponItem(weaponItem);
                        break;
                    }
                    PowerupManager.SetPowerup(player, weaponItem, powerup);
                    break;
                }
                case WeaponItemType.Rifle:
                case WeaponItemType.Handgun:
                {
                    var powerup = SharpHelper.StringToEnum<RangedWeaponPowerup>(powerupStr);
                    PowerupManager.SetPowerup(player, weaponItem, powerup);
                    break;
                }
                default:
                    player.GiveWeaponItem(weaponItem);
                    break;
            }
        }
    }
    public class BotInfo
    {
        public BotInfo()
        {
            EquipWeaponChance = 1f;
            AIType = BotAI.Debug;
            SearchItems = SearchItems.None;
            IsBoss = false;
            SpawnLine = "";
            DeathLine = "";
            SpawnLineChance = .1f;
            DeathLineChance = .1f;
            ZombieStatus = ZombieStatus.Human;
            ImmuneToInfect = false;
            SearchRange = WpnSearchRange.Infinite;
            SpecificSearchItems = new HashSet<WeaponItem>();
        }

        public BotInfo(IPlayer player) : this()
        {
            // Fix wrong initial value. https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=4337
            if (player != null)
                player.ClearCommandQueue();

            EquipWeaponChance = 0f;
            AIType = BotAI.None;
            SearchItems = player == null ? SearchItems.None : player.GetBotBehaviorSet().SearchItems;
            Modifiers = player == null ? new PlayerModifiers() : player.GetModifiers();
        }

        private float equipWeaponChance;
        public float EquipWeaponChance
        {
            get { return equipWeaponChance; }
            set { equipWeaponChance = MathHelper.Clamp(value, 0, 1); }
        }

        public string Name { get; set; }
        public BotAI AIType { get; set; }
        public SearchItems SearchItems { get; set; }
        public HashSet<WeaponItem> SpecificSearchItems { get; set; }
        public PlayerModifiers Modifiers { get; set; }
        public bool IsBoss { get; set; }
        public float SearchRange { get; set; }
        public string SpawnLine { get; set; }
        public float SpawnLineChance { get; set; }
        public string DeathLine { get; set; }
        public float DeathLineChance { get; set; }

        private ZombieStatus zombieStatus;
        public ZombieStatus ZombieStatus
        {
            get { return zombieStatus; }
            set
            {
                if (ImmuneToInfect && value != ZombieStatus.Human)
                    throw new Exception("if ImmuneToInfect == true, ZombieStatus must be Human");
                zombieStatus = value;
            }
        }

        private bool immuneToInfect;
        public bool ImmuneToInfect
        {
            get { return immuneToInfect; }
            set
            {
                if (value == true && ZombieStatus != ZombieStatus.Human)
                    throw new Exception("if ImmuneToInfect == true, ZombieStatus must be Human");
                immuneToInfect = value;
            }
        }
    }
        public static BotInfo GetInfo(BotType botType)
        {
            var botInfo = new BotInfo();

            switch (botType)
            {
                #region Agent, Soldier
                case BotType.Agent:
                case BotType.Soldier:
                {
                    if (botType == BotType.Agent)
                    {
                        botInfo.SearchItems = SearchItems.Secondary;
                        botInfo.AIType = BotAI.Hard;
                    }
                    if (botType == BotType.Soldier || botType == BotType.Soldier2)
                    {
                        botInfo.SearchItems = SearchItems.Primary;
                        botInfo.AIType = BotAI.Soldier;
                    }
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                #endregion

                #region Assassin
                case BotType.AssassinMelee:
                {
                    botInfo.AIType = BotAI.AssassinMelee;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                case BotType.AssassinRange:
                {
                    botInfo.AIType = BotAI.AssassinRange;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                #endregion

                #region Boxer
                case BotType.ClownBoxer:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        ProjectileDamageDealtModifier = DamageDealt.VeryLow,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeForceModifier = MeleeForce.Strong,
                        SizeModifier = Size.VeryBig,
                    };
                    break;
                }
                #endregion

                #region Cowboy (faster grunt)
                case BotType.ClownCowboy:
                case BotType.Cowboy:
                {
                    botInfo.AIType = BotAI.Cowboy;
                    botInfo.EquipWeaponChance = 1f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        SizeModifier = Size.Small,
                    };
                    botInfo.SpawnLine = "Move 'em on, head 'em up...";
                    botInfo.SpawnLineChance = 0.05f;
                    botInfo.DeathLine = "Count 'em in, ride 'em... oof!";
                    botInfo.DeathLineChance = 0.05f;
                    break;
                }
                #endregion

                #region Hulk
                case BotType.BikerHulk:
                case BotType.GangsterHulk:
                case BotType.ThugHulk:
                case BotType.PunkHulk:
                case BotType.Lumberjack:
                case BotType.NaziMuscleSoldier:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ProjectileDamageDealtModifier = DamageDealt.VeryLow,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        SizeModifier = Size.VeryBig,
                    };
                    break;
                }
                #endregion

                #region Grunt
                case BotType.Biker:
                case BotType.NaziScientist:
                case BotType.Scientist:
                case BotType.Thug:
                case BotType.Punk:
                {
                    botInfo.AIType = BotAI.Grunt;
                    botInfo.EquipWeaponChance = 0.6f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };

                    if (botType == BotType.Thug)
                    {
                        botInfo.SearchItems = SearchItems.Primary | SearchItems.Secondary | SearchItems.Melee;
                        botInfo.SearchRange = WpnSearchRange.Nearby;
                    }
                    if (botType == BotType.Punk)
                    {
                        botInfo.EquipWeaponChance = 1;
                        botInfo.Modifiers.InfiniteAmmo = Constants.TOGGLE_ON;
                    }
                    break;
                }
                #endregion

                #region Grunt with weapon
                case BotType.Bandido:
                case BotType.Bodyguard:
                case BotType.Bodyguard2:
                case BotType.ClownBodyguard:
                case BotType.ClownGangster:
                case BotType.Cyborg:
                case BotType.Elf:
                case BotType.Engineer:
                case BotType.Farmer:
                case BotType.Gangster:
                case BotType.Gardener:
                case BotType.LabAssistant:
                case BotType.MetroCop:
                case BotType.NaziSoldier:
                case BotType.Police:
                case BotType.PoliceSWAT:
                case BotType.Spacer:
                {
                    botInfo.AIType = BotAI.Grunt;
                    botInfo.EquipWeaponChance = 1f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.SpawnLineChance = .01f;
                    botInfo.DeathLineChance = .01f;

                    if (botType == BotType.Bandido)
                    {
                        botInfo.AIType = BotAI.Cowboy;
                        botInfo.Modifiers.InfiniteAmmo = 1;
                    }
                    if (botType == BotType.Cyborg)
                        botInfo.ImmuneToInfect = true;
                    if (botType == BotType.Engineer)
                        botInfo.Modifiers.SizeModifier = Size.Normal;
                    if (botType == BotType.Gardener)
                        botInfo.SpawnLine = "It's almost harvesting season";
                    if (botType == BotType.Farmer)
                        botInfo.SpawnLine = "Look at all those chickens";
                    break;
                }
                #endregion

                #region Survivor
                case BotType.Survivor:
                {
                    botInfo.AIType = BotAI.Normal;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.ZombieStatus = ZombieStatus.Infected;
                    break;
                }
                #endregion

                #region Sniper
                case BotType.Hunter:
                case BotType.Sniper:
                case BotType.SpaceSniper:
                {
                    botInfo.AIType = BotAI.Sniper;
                    botInfo.SearchItems = SearchItems.Primary;
                    botInfo.SearchRange = WpnSearchRange.Nearby;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        ProjectileDamageDealtModifier = DamageDealt.FairlyHigh,
                        ProjectileCritChanceDealtModifier = DamageDealt.FairlyHigh,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        SizeModifier = Size.BelowNormal,
                    };

                    if (botType == BotType.SpaceSniper)
                    {
                        botInfo.Modifiers.ProjectileDamageDealtModifier = DamageDealt.Normal;
                        botInfo.Modifiers.ProjectileCritChanceDealtModifier = DamageDealt.Normal;
                    }
                    if (botType == BotType.Hunter)
                    {
                        botInfo.SearchItems = SearchItems.Health;
                        botInfo.AIType = BotAI.Hunter;
                        botInfo.Modifiers.InfiniteAmmo = Constants.TOGGLE_ON;
                        botInfo.SpawnLine = "You can run, but you cant hide";
                    }
                    break;
                }
                #endregion

                #region Stripper
                case BotType.Stripper:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Makeshift | SearchItems.Health;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        ProjectileDamageDealtModifier = DamageDealt.FairlyHigh,
                        ProjectileCritChanceDealtModifier = DamageDealt.FairlyHigh,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        FireDamageTakenModifier = DamageTaken.Vulnerable,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    break;
                }
                #endregion

                #region SuicideDwarf
                case BotType.SuicideDwarf:
                {
                    botInfo.AIType = BotAI.Easy;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyWeak,
                        CurrentHealth = Health.ExtremelyWeak,
                        SizeModifier = Size.ExtremelySmall,
                    };
                    break;
                }
                #endregion

                #region Zombie
                case BotType.Zombie:
                case BotType.ZombieAgent:
                case BotType.ZombieGangster:
                case BotType.ZombieNinja:
                case BotType.ZombiePolice:
                case BotType.ZombiePrussian:
                case BotType.ZombieSoldier:
                case BotType.ZombieThug:
                case BotType.ZombieWorker:
                {
                    botInfo.AIType = BotAI.ZombieSlow;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        MeleeDamageDealtModifier = DamageDealt.Low,
                        RunSpeedModifier = Speed.Slow,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.SpawnLine = "Brainzz";
                    botInfo.SpawnLineChance = 0.1f;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie fast
                case BotType.ZombieChild:
                {
                    botInfo.AIType = BotAI.ZombieFast;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyWeak,
                        CurrentHealth = Health.ExtremelyWeak,
                        MeleeDamageDealtModifier = DamageDealt.Low,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        MeleeForceModifier = MeleeForce.Weak,
                        SizeModifier = Size.VerySmall,
                    };
                    botInfo.SpawnLine = "Brainzz";
                    botInfo.SpawnLineChance = 0.1f;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie fat
                case BotType.ZombieFat:
                {
                    botInfo.AIType = BotAI.ZombieSlow;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.EmbarrassinglyWeak,
                        CurrentHealth = Health.EmbarrassinglyWeak,
                        MeleeDamageDealtModifier = DamageDealt.FairlyHigh,
                        RunSpeedModifier = Speed.BarelyAny,
                        SprintSpeedModifier = Speed.BarelyAny,
                        SizeModifier = Size.Chonky,
                    };
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie flamer
                case BotType.ZombieFlamer:
                {
                    botInfo.AIType = BotAI.ZombieFast;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyWeak,
                        CurrentHealth = Health.ExtremelyWeak,
                        FireDamageTakenModifier = DamageTaken.UltraResistant,
                        MeleeDamageDealtModifier = DamageDealt.VeryLow,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie hulk
                case BotType.ZombieBruiser:
                {
                    botInfo.AIType = BotAI.ZombieHulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        SizeModifier = Size.ExtremelyBig,
                    };
                    botInfo.SpawnLine = "Brainzz";
                    botInfo.SpawnLineChance = 0.1f;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Boss Agent79
                case BotType.Agent79:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Amos
                case BotType.Amos:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Primary;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MeleeDamageDealtModifier = DamageDealt.High,
                        ImpactDamageTakenModifier = DamageTaken.FairlyResistant,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.BelowNormal,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        SizeModifier = Size.Big,
                    };
                    break;
                }
                #endregion

                #region Boss Balista
                case BotType.Balista:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.All;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        SizeModifier = Size.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Balloonatic
                case BotType.Balloonatic:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        ImpactDamageTakenModifier = DamageTaken.VeryResistant,
                        SizeModifier = Size.VeryBig,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss BazookaJane
                case BotType.BazookaJane:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Melee | SearchItems.Powerups | SearchItems.Secondary;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        SizeModifier = Size.AboveNormal,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Beast
                case BotType.Beast:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        EnergyConsumptionModifier = 0,
                        SizeModifier = Size.ExtremelyBig,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Bobby
                case BotType.Bobby:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        SizeModifier = Size.AboveNormal,
                        ProjectileDamageTakenModifier = DamageTaken.Resistant,
                        ProjectileDamageDealtModifier = DamageDealt.FairlyHigh,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Boffin
                case BotType.Boffin:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.SpecificSearchItems.Add(WeaponItem.GRENADE_LAUNCHER);
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Chairman
                case BotType.Chairman:
                {
                    botInfo.AIType = BotAI.MeleeExpert;
                    botInfo.SearchItems = SearchItems.Makeshift | SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        SizeModifier = Size.AboveNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Cindy
                case BotType.Cindy:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Streetsweeper | SearchItems.Powerups | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        MaxEnergy = Stamina.High,
                        CurrentEnergy = Stamina.High,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Demolitionist
                case BotType.Demolitionist:
                {
                    botInfo.AIType = BotAI.RangeHard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ProjectileDamageDealtModifier = DamageDealt.UltraHigh,
                        ProjectileCritChanceDealtModifier = DamageDealt.UltraHigh,
                        MeleeDamageDealtModifier = DamageDealt.VeryHigh,
                        RunSpeedModifier = Speed.BarelyAny,
                        SprintSpeedModifier = Speed.BarelyAny,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Fritzliebe
                case BotType.Fritzliebe:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health;
                    botInfo.SearchRange = WpnSearchRange.Nearby;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Funnyman
                case BotType.Funnyman:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Powerups;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        MeleeDamageTakenModifier = DamageTaken.Resistant,
                        SizeModifier = Size.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Hacker
                case BotType.Hacker:
                {
                    botInfo.AIType = BotAI.Hacker;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        EnergyConsumptionModifier = Constants.TOGGLE_OFF,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Handler
                case BotType.Handler:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Powerups | SearchItems.Primary | SearchItems.Secondary;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        MaxEnergy = Stamina.VeryHigh,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Hitman
                case BotType.Hitman:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.All;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.Fast,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Incinerator
                case BotType.Incinerator:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        FireDamageTakenModifier = DamageTaken.ExtremelyResistant,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Pyromaniac
                case BotType.Pyromaniac:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        FireDamageTakenModifier = DamageTaken.VeryResistant,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Firebug
                case BotType.Firebug:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Melee | SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        FireDamageTakenModifier = DamageTaken.Unbeatable,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                        SizeModifier = Size.Big,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Fireman
                case BotType.Fireman:
                {
                    botInfo.AIType = BotAI.AssassinMelee;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        FireDamageTakenModifier = DamageTaken.ExtremelyResistant,
                        MeleeDamageTakenModifier = DamageTaken.Resistant,
                        RunSpeedModifier = Speed.Fast,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Jo
                case BotType.Jo:
                {
                    botInfo.AIType = BotAI.MeleeExpert;
                    botInfo.SearchItems = SearchItems.Makeshift | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        MeleeForceModifier = MeleeForce.Strong,
                        SizeModifier = Size.Big,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Kingpin
                case BotType.Kingpin:
                {
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Streetsweeper;
                    botInfo.AIType = BotAI.Kingpin;
                    botInfo.SearchRange = WpnSearchRange.Nearby; // encourage this bot to fight in melee to crush enemies
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        EnergyConsumptionModifier = .1f,
                        SizeModifier = Size.Big,
                        MeleeForceModifier = MeleeForce.Strong,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Kriegbär
                case BotType.Kriegbar:
                {
                    botInfo.AIType = BotAI.RagingHulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.UltraStrong,
                        CurrentHealth = Health.UltraStrong,
                        MaxEnergy = Stamina.UltraHigh,
                        CurrentEnergy = Stamina.UltraHigh,
                        FireDamageTakenModifier = DamageTaken.VeryVulnerable,
                        MeleeForceModifier = MeleeForce.VeryStrong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        SizeModifier = Size.Chonky,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SpawnLine = "HNNNARRRRRRRHHH!";
                    break;
                }
                #endregion

                #region Boss Meatgrinder
                case BotType.Meatgrinder:
                {
                    botInfo.AIType = BotAI.Meatgrinder;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        MaxEnergy = Stamina.ExtremelyHigh,
                        CurrentEnergy = Stamina.ExtremelyHigh,
                        ProjectileDamageDealtModifier = DamageDealt.VeryHigh,
                        MeleeDamageDealtModifier = DamageDealt.VeryHigh,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.Fast,
                        SizeModifier = Size.Big,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Mecha
                case BotType.Mecha:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        ExplosionDamageTakenModifier = DamageTaken.ExtremelyResistant, // 1200 (300 / 0.25)
                        ProjectileDamageTakenModifier = DamageTaken.VeryResistant, // 600
                        ImpactDamageTakenModifier = DamageTaken.Unbeatable,
                        MeleeForceModifier = MeleeForce.UltraStrong,
                        MeleeStunImmunity = Constants.TOGGLE_ON,
                        CanBurn = Constants.TOGGLE_OFF,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.BelowNormal,
                        SizeModifier = Size.ExtremelyBig,
                    };
                    botInfo.IsBoss = true;
                    botInfo.ImmuneToInfect = true;
                    break;
                }
                #endregion

                #region Boss MetroCop2
                case BotType.MetroCop2:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Streetsweeper | SearchItems.Powerups | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss MirrorMan
                case BotType.MirrorMan:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MaxEnergy = Stamina.VeryHigh,
                        CurrentEnergy = Stamina.VeryHigh,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        ProjectileDamageTakenModifier = DamageTaken.ExtremelyResistant,
                        ProjectileCritChanceTakenModifier = DamageTaken.ExtremelyResistant,
                        SizeModifier = Size.Small,
                    };
                    botInfo.ImmuneToInfect = true; // robot cannot be infected
                    botInfo.SpawnLine = "BRING IT ON!!!";
                    botInfo.SpawnLineChance = .1f;
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss BigMutant
                case BotType.Mutant:
                {
                    botInfo.AIType = BotAI.Grunt;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ImpactDamageTakenModifier = DamageTaken.ExtremelyVulnerable,
                        SizeModifier = Size.Big,
                    };
                    break;
                }
                case BotType.BigMutant:
                {
                    botInfo.AIType = BotAI.MeleeHard;
                    botInfo.Name = "Big Mutant";
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.UltraStrong,
                        CurrentHealth = Health.UltraStrong,
                        ImpactDamageTakenModifier = DamageTaken.ExtremelyVulnerable,
                        SizeModifier = Size.VeryBig,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Nadja
                case BotType.Nadja:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Ninja
                case BotType.Ninja:
                {
                    botInfo.AIType = BotAI.Ninja;
                    botInfo.SearchItems = SearchItems.Melee;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MeleeDamageDealtModifier = DamageDealt.FairlyHigh,
                        RunSpeedModifier = Speed.ExtremelyFast,
                        SprintSpeedModifier = Speed.ExtremelyFast,
                        SizeModifier = Size.Small,
                        EnergyRechargeModifier = EnergyRecharge.Quick,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SpawnLine = "Tatakai...";
                    botInfo.DeathLine = "H-h-haji...";
                    break;
                }
                #endregion

                #region Boss PoliceChief
                case BotType.PoliceChief:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        EnergyRechargeModifier = EnergyRecharge.Quick,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss President
                case BotType.President:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        EnergyRechargeModifier = EnergyRecharge.Slow,
                        ImpactDamageTakenModifier = DamageTaken.ExtremelyResistant,
                        SizeModifier = Size.Chonky,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Teddybear
                case BotType.Teddybear:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.UltraStrong,
                        CurrentHealth = Health.UltraStrong,
                        MaxEnergy = Stamina.UltraHigh,
                        CurrentEnergy = Stamina.UltraHigh,
                        MeleeDamageDealtModifier = DamageDealt.High,
                        MeleeForceModifier = MeleeForce.VeryStrong,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.BelowNormal,
                        SizeModifier = Size.Chonky,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Babybear
                case BotType.Babybear:
                {
                    botInfo.AIType = BotAI.Babybear;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryWeak,
                        CurrentHealth = Health.VeryWeak,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        MeleeForceModifier = MeleeForce.Weak,
                        SizeModifier = Size.Tiny,
                    };
                    botInfo.IsBoss = true; // set IsBoss to spawn once
                    break;
                }
                #endregion
                
                #region Boss Rambo
                case BotType.Rambo:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ExplosionDamageTakenModifier = DamageTaken.VeryResistant,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                        SizeModifier = Size.Big,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.BelowNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Raze
                case BotType.Raze:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Secondary | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        ExplosionDamageTakenModifier = DamageTaken.VeryResistant,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Reznor
                case BotType.Reznor:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        CanBurn = Constants.TOGGLE_ON,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                        SizeModifier = Size.Big,
                    };
                    botInfo.IsBoss = true; // set IsBoss to spawn once
                    break;
                }
                #endregion

                #region Boss Santa
                case BotType.Santa:
                {
                    botInfo.AIType = BotAI.Hard; // ChallengeA
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        ExplosionDamageTakenModifier = DamageTaken.VeryResistant,
                        MeleeForceModifier = MeleeForce.Strong,
                        SizeModifier = Size.Big,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SpawnLine = "Ho ho ho!";
                    botInfo.DeathLine = "Ho ohhhh...";
                    break;
                }
                #endregion

                #region Boss Sheriff
                case BotType.Sheriff:
                {
                    botInfo.AIType = BotAI.Sheriff;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        MaxEnergy = Stamina.AboveNormal,
                        CurrentEnergy = Stamina.AboveNormal,
                        ProjectileDamageTakenModifier = DamageTaken.FairlyResistant,
                        SizeModifier = Size.AboveNormal,
                        ItemDropMode = ItemDropMode.Break,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Powerups | SearchItems.Health;
                    botInfo.SpawnLine = "I wanted to break your jaw";
                    botInfo.SpawnLineChance = .1f;
                    break;
                }
                #endregion

                #region Boss Smoker
                case BotType.Smoker:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Powerups | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        FireDamageTakenModifier = DamageTaken.SlightlyResistant,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Survivalist
                case BotType.Survivalist:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Melee | SearchItems.Makeshift | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ProjectileDamageDealtModifier = DamageDealt.VeryHigh,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss ZombieEater
                case BotType.ZombieEater:
                {
                    botInfo.AIType = BotAI.ZombieFighter;
                    botInfo.Name = "Gluttonous Zombie";
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        SizeModifier = Size.Small,
                    };
                    botInfo.IsBoss = true;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Boss ZombieFighter
                case BotType.ZombieFighter:
                {
                    botInfo.AIType = BotAI.ZombieFighter;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        SizeModifier = Size.Big,
                        MeleeStunImmunity = Constants.TOGGLE_ON,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion
            }

            return botInfo;
        }
    public static class BotManager
    {
        private static Dictionary<PlayerTeam, BotFaction> CurrentBotFaction = new Dictionary<PlayerTeam, BotFaction>();
        public static int CurrentFactionSetIndex { get; private set; }
        public static Faction CurrentFaction { get; private set; }
        public const PlayerTeam BotTeam = PlayerTeam.Team4;

        // Player corpses waiting to be transformed into zombies
        private static Dictionary<int, InfectedCorpse> _infectedCorpses = new Dictionary<int, InfectedCorpse>();
        private static List<PlayerSpawner> m_playerSpawners;
        private static Dictionary<int, Bot> _bots = new Dictionary<int, Bot>();

        public static void Initialize()
        {
            m_playerSpawners = BotHelper.GetEmptyPlayerSpawners();

            Events.PlayerWeaponAddedActionCallback.Start(OnPlayerPickedupWeapon);
            Events.PlayerWeaponRemovedActionCallback.Start(OnPlayerDroppedWeapon);
            Events.PlayerMeleeActionCallback.Start(OnPlayerMeleeAction);
            Events.PlayerDamageCallback.Start(OnPlayerDamage);
            Events.PlayerDeathCallback.Start(OnPlayerDeath);
            Events.ProjectileHitCallback.Start(OnProjectileHit);
            Events.UpdateCallback.Start(OnUpdate);
            Events.PlayerKeyInputCallback.Start(OnPlayerKeyInput);
            Events.UserMessageCallback.Start(Command.OnUserMessage);

            var settings = Settings.Get();
            if (settings.RoundsUntilFactionRotation == 1 || settings.CurrentFaction[BotTeam] == BotFaction.None)
            {
                foreach (var team in SharpHelper.EnumToList<PlayerTeam>())
                {
                    if (team == PlayerTeam.Independent)
                        continue;

                    List<BotFaction> botFactions;

                    if (settings.BotFactions[team].Count > 1)
                        botFactions = settings.BotFactions[team]
                            .Where((f) => f != settings.CurrentFaction[team])
                            .ToList();
                    else
                        botFactions = settings.BotFactions[team];

                    // TODO: disregard spawning only boss or not when count < 3 if team != BotTeam
                    var faction = BotHelper.RandomFaction(botFactions, settings.BotCount);

                    if (team == BotTeam)
                        ScriptHelper.PrintMessage("Change faction to " + faction);
                    CurrentBotFaction[team] = faction;
                }
            }
            else
            {
                CurrentBotFaction = settings.CurrentFaction;
            }
            BotHelper.Storage.SetItem(BotHelper.StorageKey("CURRENT_FACTION"), CurrentBotFaction.Values.Select(f => f.ToString()).ToArray());

            if (settings.FactionRotationEnabled)
            {
                var roundTillNextFactionRotation = settings.RoundsUntilFactionRotation == 1 ?
                    settings.FactionRotationInterval
                    :
                    settings.RoundsUntilFactionRotation - 1;
                BotHelper.Storage.SetItem(BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION"), roundTillNextFactionRotation);
            }

            var botSpawnCount = Math.Min(settings.BotCount, m_playerSpawners.Count);

            foreach (var item in CurrentBotFaction)
            {
                var team = item.Key;
                var faction = item.Value;

                if (faction == BotFaction.None)
                    continue;

                if (team == BotTeam)
                {
                    SpawnRandomFaction(faction, botSpawnCount, team);
                }
                else
                {
                    SpawnRandomFaction(faction, 0, team);
                }
            }

            var activeUsers = ScriptHelper.GetActiveUsersByAccountID();

            foreach (var ps in settings.PlayerSettings)
            {
                var pst = PlayerSettings.Parse(ps);

                if (activeUsers.ContainsKey(pst.AccountID))
                {
                    var userID = activeUsers[pst.AccountID].UserIdentifier;
                    var player = Game.GetActiveUser(userID).GetPlayer();

                    if (pst.BotType != "None")
                    {
                        var botType = SharpHelper.StringToEnum<BotType>(pst.BotType);
                        BotHelper.SetPlayer(player, botType);
                    }

                    foreach (var w in pst.Weapons)
                    {
                        BotHelper.SetWeapon(player, w[0], w[1]);
                    }
                }
            }
        }

        private static void SpawnRandomFaction(BotFaction botFaction, int botCount, PlayerTeam team)
        {
            var factionSet = GetFactionSet(botFaction);
            if (factionSet.Factions.Count == 0) return;
            var rndFactionIndex = RandomHelper.Rnd.Next(factionSet.Factions.Count);
            CurrentFaction = factionSet.Factions[rndFactionIndex];
            CurrentFactionSetIndex = rndFactionIndex;

            var bots = botCount == 0
                ? CurrentFaction.Spawn(team)
                : CurrentFaction.Spawn(botCount, team);

            ScriptHelper.Timeout(() =>
            {
                // wait for the next frame. Since the IPlayer instance is created in this frame,
                // The game doesn't register that IPlayer yet. As a consequence, IGame.GetPlayers()
                // returns missing players.
                foreach (var bot in bots) TriggerOnSpawn(bot);
            }, 0);
        }

        public static void SetPlayer(Bot bot, IPlayer player)
        {
            var oldPlayer = bot.Player;
            Remove(oldPlayer.UniqueID);
            bot.IsRemoved = false; // Remove() will set it to true
            _bots[player.UniqueID] = bot;
        }

        public static void TriggerOnSpawn(Bot bot) { bot.OnSpawn(); }

        private static void OnPlayerPickedupWeapon(IPlayer player, PlayerWeaponAddedArg arg)
        {
            if (player == null) return;
            var bot = GetBot(player);
            if (bot == Bot.None) return;
            bot.OnPickedupWeapon(arg);
        }

        private static void OnPlayerDroppedWeapon(IPlayer player, PlayerWeaponRemovedArg arg)
        {
            if (player == null) return;
            var bot = GetBot(player);
            if (bot == Bot.None) return;
            bot.OnDroppedWeapon(arg);
        }

        private static float m_lastUpdateTime = 0f;
        public static void OnUpdate(float _)
        {
            var elapsed = Game.TotalElapsedGameTime - m_lastUpdateTime;

            // Turning corpses killed by zombie into another one after some time
            foreach (var corpse in _infectedCorpses.Values.ToList())
            {
                corpse.Update();

                if (corpse.IsZombie || !corpse.CanTurnIntoZombie)
                {
                    _infectedCorpses.Remove(corpse.UniqueID);
                }
            }

            foreach (var player in Game.GetPlayers())
            {
                var bot = GetBot(player);

                if (bot != Bot.None)
                {
                    if (bot.Player.IsDead && bot.IsInfectedByZombie && !_infectedCorpses.ContainsKey(bot.Player.UniqueID))
                    {
                        AddInfectedCorpse(bot);
                    }
                    bot.Update(elapsed);
                }
                else if (!player.IsRemoved && player.CustomID != Bot.NoneCustomID)
                {
                    Wrap(player); // Normal players that are not extended bots
                }
            }

            m_lastUpdateTime = Game.TotalElapsedGameTime;
        }

        private static void OnPlayerMeleeAction(IPlayer attacker, PlayerMeleeHitArg[] args)
        {
            if (attacker == null) return;
            
            GetBot(attacker).OnMeleeAction(args);

            foreach (var arg in args)
            {
                if (!arg.IsPlayer) continue;

                var maybePlayer = arg.HitObject;
                var bot = GetBot(maybePlayer);

                if (bot != Bot.None)
                    bot.OnMeleeDamage(attacker, arg);
            }
        }

        private static void OnPlayerDamage(IPlayer player, PlayerDamageArgs args)
        {
            if (player == null) return;

            IPlayer attacker = null;
            if (args.DamageType == PlayerDamageEventType.Melee)
            {
                attacker = Game.GetPlayer(args.SourceID);
            }
            if (args.DamageType == PlayerDamageEventType.Projectile)
            {
                var projectile = Game.GetProjectile(args.SourceID);
                attacker = Game.GetPlayer(projectile.OwnerPlayerID);
            }

            var bot = GetBot(player);
            if (bot != Bot.None)
            {
                bot.OnDamage(attacker, args);
            }
        }

        private static void Remove(int playerID)
        {
            var bot = GetBot(playerID);
            if (bot == Bot.None) return;
            bot.IsRemoved = true;
            _bots.Remove(playerID);
        }

        private static void OnPlayerDeath(IPlayer player, PlayerDeathArgs args)
        {
            if (player == null) return;

            var bot = GetBot(player);
            if (bot == Bot.None) return;

            bot.OnDeath(args);

            if (args.Removed)
            {
                Remove(bot.Player.UniqueID);
            }
            if (args.Killed)
            {
                AddInfectedCorpse(bot);
            }
        }

        private static void AddInfectedCorpse(Bot bot)
        {
            if (bot.Info.ZombieStatus == ZombieStatus.Infected)
            {
                var player = bot.Player;
                _infectedCorpses.Add(player.UniqueID, new InfectedCorpse(player, bot.Type, bot.Faction));
            }
        }

        private static void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            if (args.IsPlayer)
            {
                var player = Game.GetPlayer(args.HitObjectID);
                var bot = GetBot(player);
                if (bot == Bot.None) return;

                // I use this instead of PlayerDamage callback because this one include additional
                // info like normal vector
                bot.OnProjectileHit(projectile, args);
            }
        }

        private static void OnPlayerKeyInput(IPlayer player, VirtualKeyInfo[] keyInfos)
        {
            var bot = GetBot(player);
            if (bot == Bot.None) return;

            bot.OnPlayerKeyInput(keyInfos);
        }

        public static Bot GetBot(int uniqueID)
        {
            Bot bot;
            if (_bots.TryGetValue(uniqueID, out bot)) return bot;
            return Bot.None;
        }

        public static Bot GetBot(IObject player) { return GetBot(player.UniqueID); }

        private static IPlayer SpawnPlayer(bool ignoreFullSpawner = false)
        {
            List<PlayerSpawner> emptySpawners = null;

            if (ignoreFullSpawner)
            {
                emptySpawners = m_playerSpawners;
            }
            else
            {
                emptySpawners = m_playerSpawners
                    .Select(Q => Q)
                    .Where(Q => Q.HasSpawned == false)
                    .ToList();
            }

            if (!emptySpawners.Any())
            {
                return null;
            }

            var rndSpawner = RandomHelper.GetItem(emptySpawners);
            var player = Game.CreatePlayer(rndSpawner.Position);

            rndSpawner.HasSpawned = true;

            return player;
        }

        private static Bot Wrap(IPlayer player)
        {
            var bot = new Bot(player, BotType.None, BotFaction.None);
            _bots.Add(player.UniqueID, bot);
            TriggerOnSpawn(bot);

            return bot;
        }

        public static Bot SpawnBot(
            BotType botType,
            BotFaction faction = BotFaction.None,
            IPlayer player = null,
            PlayerTeam team = BotTeam,
            bool ignoreFullSpawner = false,
            bool equipWeapon = true,
            bool triggerOnSpawn = true)
        {
            if (player == null) player = SpawnPlayer(ignoreFullSpawner);
            if (player == null) return null;

            player.SetTeam(team);

            var bot = BotFactory.Create(player, botType, faction);
            var info = bot.Info;
            var weaponSet = WeaponSet.Empty;

            if (equipWeapon && RandomHelper.Percentage(info.EquipWeaponChance))
            {
                weaponSet = RandomHelper.GetItem(GetWeapons(botType));
            }
            BotHelper.Equip(player, weaponSet);

            var profile = RandomHelper.GetItem(GetProfiles(botType));
            player.SetProfile(profile);
            if (player.Name == "COM")
                player.SetBotName(info.Name ?? profile.Name);

            var behaviorSet = GetBehaviorSet(info.AIType);

            behaviorSet.SearchItems = info.SearchItems;
            behaviorSet.SearchItemRange = info.SearchRange;

            bot.SetBotBehaviorSet(behaviorSet, true);
            player.SetModifiers(info.Modifiers);
            player.SetBotBehaviorActive(true);

            Remove(player.UniqueID);
            _bots[player.UniqueID] = bot; // This may be updated if using setplayer command

            if (triggerOnSpawn)
                TriggerOnSpawn(bot);

            return bot;
        }

        public static void OnShutdown() { StoreStatistics(); }

        private static void StoreStatistics()
        {
            if (!Game.IsGameOver) return; // User exits in the middle of the round
            var factionDead = true;

            foreach (var player in Game.GetPlayers())
            {
                if (!player.IsDead && player.GetTeam() == BotTeam)
                {
                    factionDead = false;
                    break;
                }
            }

            var bosses = string.Join(".", CurrentFaction.Bosses);
            var factionWinStatsKey = BotHelper.StorageKey(CurrentBotFaction[BotTeam], CurrentFactionSetIndex)
                + "_" + bosses.ToUpper() + "_WIN_STATS";
            int[] factionOldWinStats;
            int winCount, totalMatch;

            if (BotHelper.Storage.TryGetItemIntArr(factionWinStatsKey, out factionOldWinStats))
            {
                if (factionDead)
                    winCount = factionOldWinStats[0];
                else
                    winCount = factionOldWinStats[0] + 1;
                totalMatch = factionOldWinStats[1] + 1;
            }
            else
            {
                winCount = factionDead ? 0 : 1;
                totalMatch = 1;
            }

            BotHelper.Storage.SetItem(factionWinStatsKey, new int[] { winCount, totalMatch });
        }

        public static IEnumerable<Bot> GetBots() { return GetBots<Bot>(); }
        public static IEnumerable<T> GetBots<T>() where T : Bot
        {
            foreach (var bot in _bots.Values)
            {
                var b = bot as T;
                if (b != null) yield return b;
            }
        }
    }
        public static List<IProfile> GetProfiles(BotType botType)
        {
            var profiles = new List<IProfile>();

            switch (botType)
            {
                #region Agent
                case BotType.Agent:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj2jj71L7ZY2n5Z2U7Z01ZjYY
                    profiles.Add(new IProfile() { Name = "Agent", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown"), Accesory = new IProfileClothingItem("AgentSunglasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M1Fzj2jj71L7ZY2n5Z2U7Z01ZjYY
                    profiles.Add(new IProfile() { Name = "Agent", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown"), Accesory = new IProfileClothingItem("AgentSunglasses", "", "ClothingLightGray"), });
                    break;
                }
                #endregion

                #region Agent79
                case BotType.Agent79:
                {
                    // https://profile-editor.vercel.app?p=M38yg367Z2H7Z0ieg0qeZ13ZZ01Zl10eZ0QeZ
                    profiles.Add(new IProfile() { Name = "Agent 79", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightBlue"), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("GrenadeBelt", ""), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightBlue"), Legs = new IProfileClothingItem("StripedPants", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("AgentSunglasses", "", "ClothingLightOrange"), });
                    break;
                }
                #endregion

                #region Amos
                case BotType.Amos:
                {
                    // https://profile-editor.vercel.app?p=M38xe363Z1K6Z0i7e0p7Z3j66YYY
                    profiles.Add(new IProfile() { Name = "Amos", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingGray"), ChestOver = new IProfileClothingItem("Vest", "ClothingDarkCyan", "ClothingDarkCyan"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingCyan"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkCyan"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Assassin
                case BotType.AssassinMelee:
                case BotType.AssassinRange:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj334Z1L4ZY2neZY1r4ZYY
                    profiles.Add(new IProfile() { Name = "Assassin", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=F1Gzj344Z1M4ZY2neZY1r4ZYY
                    profiles.Add(new IProfile() { Name = "Assassin", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=M1Fzj334Z1L4ZY2neZY0f4ZYY
                    profiles.Add(new IProfile() { Name = "Assassin", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=F1Gzj344Z1M4ZY2neZY0f4ZYY
                    profiles.Add(new IProfile() { Name = "Assassin", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=M1Fzj2jj71L4ZY2neZ2U4Z0f4ZYY
                    profiles.Add(new IProfile() { Name = "Assassin", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=M1Fzj2jj71L4ZY2neZ2U4Z1r4ZYY
                    profiles.Add(new IProfile() { Name = "Assassin", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkBlue"), });
                    break;
                }
                #endregion

                #region Balloonatic
                case BotType.Balloonatic:
                {
                    // https://profile-editor.vercel.app?p=M1FAj2jcp1KqZY2D971dqk0yoZY00nZ
                    profiles.Add(new IProfile() { Name = "Balloonatic", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), Head = new IProfileClothingItem("Afro", "ClothingLightPurple"), ChestOver = new IProfileClothingItem("Jacket", "ClothingOrange", "ClothingLightGreen"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingDarkRed", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingOrange"), Feet = new IProfileClothingItem("Sneakers", "ClothingDarkOrange", "ClothingDarkGray"), Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Bandido
                case BotType.Bandido:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj2g9Z1KcZ2cqZ202Z1Tdp1rcZY2EqZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Sombrero", "ClothingOrange"), ChestOver = new IProfileClothingItem("Poncho2", "ClothingDarkYellow", "ClothingLightYellow"), ChestUnder = new IProfileClothingItem("Shirt", "ClothingDarkOrange"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingOrange"), Legs = new IProfileClothingItem("Pants", "ClothingDarkRed"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed"), });
                    // https://profile-editor.vercel.app?p=M1Fxj3h9Z1KcZ03qZ202ZY2elZ0OdZ2EhZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Sombrero", "ClothingLightBrown"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingOrange"), Legs = new IProfileClothingItem("Pants", "ClothingDarkRed"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Scarf", "ClothingLightOrange"), });
                    // https://profile-editor.vercel.app?p=M1Fxj3h9Z1KdZ0iqv202Z027ZYY18tZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange"), Waist = new IProfileClothingItem("Belt", "ClothingOrange", "ClothingYellow"), Legs = new IProfileClothingItem("Pants", "ClothingDarkYellow"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=F1Gxj3i9Z1NjZ04qZ202Z057Z2eqZ0OeZ2FlZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Sombrero2", "ClothingLightOrange"), ChestOver = new IProfileClothingItem("AmmoBelt_fem", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt_fem", "ClothingDarkOrange"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingGray"), Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingOrange"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightGray"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Scarf", "ClothingOrange"), });
                    // https://profile-editor.vercel.app?p=M1Fxj3h9Z1KbZ03qZ202ZY0x7Z0OdZ2EhZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Sombrero", "ClothingLightBrown"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingOrange"), Legs = new IProfileClothingItem("Pants", "ClothingDarkPurple"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=F1Gxd3gqZ1NpZ2dqZ202Z057Z0x7ZY2FlZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("Sombrero2", "ClothingLightOrange"), ChestOver = new IProfileClothingItem("AmmoBelt_fem", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("TrainingShirt_fem", "ClothingOrange"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingOrange"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightYellow"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=F1Gxd2iqj1N9Z04qZ202Z1V9d1rcZY2EaZ
                    profiles.Add(new IProfile() { Name = "Bandido", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("Sombrero", "ClothingDarkPink"), ChestOver = new IProfileClothingItem("Poncho_fem", "ClothingDarkOrange", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie_fem", "ClothingOrange", "ClothingLightGray"), Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingOrange"), Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkOrange"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed"), });
                    break;
                }
                #endregion

                #region BazookaJane
                case BotType.BazookaJane:
                {
                    // https://profile-editor.vercel.app?p=F1Gyj37tZ1MdZ2ddZ2neZ31ejY10eZ1adZ
                    profiles.Add(new IProfile() { Name = "Bazooka Jane", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("Helmet2", "ClothingDarkYellow"), ChestOver = new IProfileClothingItem("Suspenders_fem", "ClothingGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingRed"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkYellow"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Balista
                case BotType.Balista:
                {
                    // https://profile-editor.vercel.app?p=F1Gwj2zpZ1M6Z2B2j0q1Z1ydo2XZj0O7Z004Z
                    profiles.Add(new IProfile() { Name = "Balista", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("Afro", "ClothingDarkBlue"), ChestOver = new IProfileClothingItem("MilitaryJacket_fem", "ClothingDarkYellow", "ClothingLightRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightYellow"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray"), Waist = new IProfileClothingItem("SmallBelt_fem", "ClothingBrown", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    break;
                }
                #endregion

                #region Beast
                case BotType.Beast:
                {
                    // https://profile-editor.vercel.app?p=M1FwjY1K1Z2A6j0qsZ3j4411ZZ0PsZY
                    profiles.Add(new IProfile() { Name = "The Beast", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Vest", "ClothingDarkBlue", "ClothingDarkBlue"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingPurple"), Waist = new IProfileClothingItem("SmallBelt", "ClothingDarkCyan", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingPurple"), Accesory = new IProfileClothingItem("GoalieMask", ""), });
                    break;
                }
                #endregion

                #region Biker
                case BotType.Biker:
                case BotType.BikerHulk:
                {
                    // https://profile-editor.vercel.app?p=F1Gwd2zdZ3cbZ0j4j0q1Z2M142XZj101ZY
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingDarkYellow"), ChestOver = new IProfileClothingItem("StuddedJacket_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkYellow"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkPurple"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M38xg2wdZ3bbZ0i4j0q1Z2Q142XZj101Z18gZ
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightBlue"), Head = new IProfileClothingItem("Headband", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkYellow"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkPurple"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=F1Gxd2zaZ1MeZ0j4j0q1Z3l14Y0P1Z0a2j
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray"), ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkPink"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=F1Gxd2zaZ1M4Z0j4j0q1Z2M142XZj101ZY
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), ChestOver = new IProfileClothingItem("StuddedJacket_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkPink"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxd2wgZ1KgZ0i4j0q1Z2Q14Y0P1Z18gZ
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("Headband", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightBlue"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=M1Fxd2wgZ1KgZ0i4j0q1Z2Q14Y0P1Z0a2j
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightBlue"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=F1Gxd37dZ3cgZ0j4j0q1Z3l142XZj101Z18gZ
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("Headband", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingDarkYellow"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxg2x7Z1L4Z0i4j0q1Z2Q142XZj0P1Z18gZ
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightBlue"), Head = new IProfileClothingItem("Headband", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingDarkGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=F1Gxd2zdZ1NgZ0j4j0q1Z2R14Y0P1Z0a2j
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray"), ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkYellow"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=F1Gxd2zdZ3cbZ0j4j0q1Z2M142XZj101Z1C4g
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkBlue", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("StuddedJacket_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkYellow"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkPurple"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxd2waZ1KgZ0i4j0q1Z2Q14Y0P1Z1C4g
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkBlue", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkPink"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=M38yg2waZ1KgZ0i4j0q1Z2L142XZjY18gZ
                    profiles.Add(new IProfile() { Name = "Biker", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightBlue"), Head = new IProfileClothingItem("Headband", "ClothingLightBlue"), ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkPink"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray"), });
                    break;
                }
                #endregion

                #region Bobby
                case BotType.Bobby:
                {
                    // https://profile-editor.vercel.app?p=M3oxjY1KgZ0i7j0q1Z3k440HZZ0O7Z0r7p
                    profiles.Add(new IProfile() { Name = "Bobby", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("BucketHat", "ClothingDarkGray", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("VestBlack", "ClothingDarkBlue", "ClothingDarkBlue"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("DogTag",""), });
                    break;
                }
                #endregion

                #region Bodyguard
                case BotType.Bodyguard:
                case BotType.Bodyguard2:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj337Z1KeZY2neZ2TeZ01ZjYY
                    profiles.Add(new IProfile() { Name = "Bodyguard", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), Accesory = new IProfileClothingItem("AgentSunglasses", "", "ClothingLightGray"), });
                    break;
                }
                #endregion

                #region Boffin
                case BotType.Boffin:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1jjj1LeZY0q1Z0Ajj0Wfk25vZ1BjZ
                    profiles.Add(new IProfile() { Name = "Boffin", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("Mohawk", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Coat", "ClothingLightGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingLightGray", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingYellow"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Glasses", "ClothingGreen", "ClothingLightGreen"), });
                    break;
                }
                #endregion
                
                #region Chairman
                case BotType.Chairman:
                {
                    // https://profile-editor.vercel.app?p=M1Fyk2woZ2ooZ0igj0qgZY0x2ZY0a2j
                    profiles.Add(new IProfile() { Name = "Chairman", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGreen"), Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightRed"), Waist = new IProfileClothingItem("Belt", "ClothingLightBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("Shorts", "ClothingLightRed"), Feet = new IProfileClothingItem("BootsBlack", "ClothingLightBlue"), Accesory = new IProfileClothingItem("Cigar", "ClothingBrown"), });
                    break;
                }
                #endregion
                
                #region Cindy
                case BotType.Cindy:
                {
                    // https://profile-editor.vercel.app?p=F1Gxj1R6Z1M6Z2d6Z0q5Z3l7q2XZg0PeZ0v6Z
                    profiles.Add(new IProfile() { Name = "Cindy", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Cap", "ClothingDarkCyan"), ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingDarkGray", "ClothingOrange"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkCyan"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightBlue"), });
                    break;
                }
                #endregion

                #region ClownBodyguard
                case BotType.ClownBodyguard:
                {
                    // https://profile-editor.vercel.app?p=F1GxiYYY1biZ2WiZ0zoZY0rij
                    profiles.Add(new IProfile() { Name = "Clown Bodyguard", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightCyan"), Head = new IProfileClothingItem("BucketHat", "ClothingLightCyan", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingLightCyan"), Feet = new IProfileClothingItem("HighHeels", "ClothingLightCyan"), Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F1GxpYYY1bpZ2WpZ0zoZY0rpj
                    profiles.Add(new IProfile() { Name = "Clown Bodyguard", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("BucketHat", "ClothingLightYellow", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingLightYellow"), Feet = new IProfileClothingItem("HighHeels", "ClothingLightYellow"), Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F1GxrYYY1brZ2WrZ0zoZY0rrj
                    profiles.Add(new IProfile() { Name = "Clown Bodyguard", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingPink"), Head = new IProfileClothingItem("BucketHat", "ClothingPink", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingPink"), Feet = new IProfileClothingItem("HighHeels", "ClothingPink"), Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F1GxkYYY1bkZ2WkZ0zoZY0rkj
                    profiles.Add(new IProfile() { Name = "Clown Bodyguard", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGreen"), Head = new IProfileClothingItem("BucketHat", "ClothingLightGreen", "ClothingLightGray"), ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingLightGreen"), Feet = new IProfileClothingItem("HighHeels", "ClothingLightGreen"), Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region ClownBoxer
                case BotType.ClownBoxer:
                {
                    // https://profile-editor.vercel.app?p=M1FxjY2HlZ0iep2n4Z309q0yoZ0XtZY
                    profiles.Add(new IProfile() { Name = "Clown Boxer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingDarkOrange", "ClothingOrange"), Hands = new IProfileClothingItem("Gloves", "ClothingRed"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightYellow"), Legs = new IProfileClothingItem("StripedPants", "ClothingLightOrange"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBlue"), Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region ClownCowboy
                case BotType.ClownCowboy:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj2hpg0tjj037Z21hZ1Ssf0yoZY0Mqs
                    profiles.Add(new IProfile() { Name = "Clown Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Fedora2", "ClothingOrange", "ClothingPurple"), ChestOver = new IProfileClothingItem("Poncho", "ClothingPurple", "ClothingGreen"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightGray", "ClothingLightGray"), Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingLightBrown"), Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region ClownGangster
                case BotType.ClownGangster:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj2jje2HsZ0i2p2nhZ302p0yoZY2Ssk
                    profiles.Add(new IProfile() { Name = "Clown Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("StylishHat", "ClothingPurple", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingLightYellow"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingGray"), Waist = new IProfileClothingItem("Belt", "ClothingBrown", "ClothingLightYellow"), Legs = new IProfileClothingItem("StripedPants", "ClothingPurple"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingLightBrown"), Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Cowboy
                case BotType.Cowboy:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj2hj71KgZ0i5p202Z3j22YY0Ghj
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("CowboyHat", "ClothingLightBrown", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Vest", "ClothingBrown", "ClothingBrown"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fyj3h9Z1KcZ03qZ202ZY2elZ0OdZ0Lhj
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("Fedora", "ClothingLightBrown", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingOrange"), Legs = new IProfileClothingItem("Pants", "ClothingDarkRed"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), Accesory = new IProfileClothingItem("Scarf", "ClothingLightOrange"), });
                    // https://profile-editor.vercel.app?p=M1Fxj3hpZ1KgZ0i9j219ZY2epZY0M2j
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Fedora2", "ClothingBrown", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingLightYellow"), Waist = new IProfileClothingItem("Belt", "ClothingDarkOrange", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingDarkOrange"), Accesory = new IProfileClothingItem("Scarf", "ClothingLightYellow"), });
                    // https://profile-editor.vercel.app?p=M1Fxj1oaa1KeZ0i5p202ZYYY0Ghk
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("CowboyHat", "ClothingLightBrown", "ClothingLightGreen"), ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingDarkPink", "ClothingDarkPink"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fyj2hj71KgZ035Z212Z3j22YYY
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Vest", "ClothingBrown", "ClothingBrown"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkBrown"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fxj1occ1KjZ035Z202ZYYY0G5h
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("CowboyHat", "ClothingDarkBrown", "ClothingLightBrown"), ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingDarkRed", "ClothingDarkRed"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkBrown"), Legs = new IProfileClothingItem("Pants", "ClothingLightGray"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fyj2hj71KgZ0i5p212Z3j77YY0G2j
                    profiles.Add(new IProfile() { Name = "Cowboy", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("CowboyHat", "ClothingBrown", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Vest", "ClothingDarkGray", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingBrown"), });
                    break;
                }
                #endregion

                #region Cyborg
                case BotType.Cyborg:
                {
                    // https://profile-editor.vercel.app?p=M1FAj0n3Z0tjjY2Dij1Iji2XZo0PiZY
                    profiles.Add(new IProfile() { Name = "Cyborg", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingLightGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightGray", "ClothingLightGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=M1FAj0n3Z0tjjY2Dij1Iji3n7o0PiZY
                    profiles.Add(new IProfile() { Name = "Cyborg", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingLightGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightGray", "ClothingLightGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F39Aj0o3Z0ujjY2Dij1Jji3n7o0PiZY
                    profiles.Add(new IProfile() { Name = "Cyborg", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin5", "ClothingLightGray"), ChestOver = new IProfileClothingItem("OfficerJacket_fem", "ClothingLightGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("BodyArmor_fem", "ClothingCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingLightGray", "ClothingLightGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F39Ai2zbZ0ujjY2DijY3n7o0PiZY
                    profiles.Add(new IProfile() { Name = "Cyborg", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin5", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkPurple"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingLightGray", "ClothingLightGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=M1FAi0njZ0t7jY2DijY2XZo24jZY
                    profiles.Add(new IProfile() { Name = "Cyborg", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingLightGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGray", "ClothingLightGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F39Ai3eiZ0ujjY2DijY3n7o0PiZY
                    profiles.Add(new IProfile() { Name = "Cyborg", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin5", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingLightCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingLightGray", "ClothingLightGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Demolitionist
                case BotType.Demolitionist:
                {
                    // https://profile-editor.vercel.app?p=M1FAj36eZ1L6Z0iej0qeZ13ZZ01Zj0XeZY
                    profiles.Add(new IProfile() { Name = "The Demolitionist", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), ChestOver = new IProfileClothingItem("GrenadeBelt",""), ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray"), Hands = new IProfileClothingItem("Gloves", "ClothingGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("AgentSunglasses", "", "ClothingLightGray"), });
                    break;
                }
                #endregion

                #region Elf
                case BotType.Elf:
                {
                    // https://profile-editor.vercel.app?p=M38yr1jfj1KfZ0i8j0qeZYYY28fZ
                    profiles.Add(new IProfile() { Name = "Elf", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink"), Head = new IProfileClothingItem("SantaHat", "ClothingGreen"), ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingGreen", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGreen", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingGreen"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=F39yr1mfj1NfZ0j8j0qeZYYY28fZ
                    profiles.Add(new IProfile() { Name = "Elf", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingPink"), Head = new IProfileClothingItem("SantaHat", "ClothingGreen"), ChestUnder = new IProfileClothingItem("LeatherJacket_fem", "ClothingGreen", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGreen", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingGreen"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Engineer
                case BotType.Engineer:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj36tZ1K7Z0EeZ2n7Z1djjY24qZ1Ojj
                    profiles.Add(new IProfile() { Name = "Engineer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("PithHelmet", "ClothingLightGray", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Jacket", "ClothingLightGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange"), Waist = new IProfileClothingItem("CombatBelt", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fzj36tZ1K7Z0EeZ2n7Z1hqZ0W7j24qZ1Ovj
                    profiles.Add(new IProfile() { Name = "Engineer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("PithHelmet", "ClothingYellow", "ClothingLightGray"), ChestOver = new IProfileClothingItem("KevlarVest", "ClothingOrange"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange"), Waist = new IProfileClothingItem("CombatBelt", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Glasses", "ClothingDarkGray", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M1Fzj36tZ1K7Z0EeZ2n7Z2s7jY24qZ1Ovj
                    profiles.Add(new IProfile() { Name = "Engineer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("PithHelmet", "ClothingYellow", "ClothingLightGray"), ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingDarkGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange"), Waist = new IProfileClothingItem("CombatBelt", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fzj36tZ1K7Z0EeZ2n7Z2s7jY24qZ3qpZ
                    profiles.Add(new IProfile() { Name = "Engineer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("WeldingHelmet", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingDarkGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange"), Waist = new IProfileClothingItem("CombatBelt", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Farmer
                case BotType.Farmer:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj36tZ1K1ZY2m6Z3014YY0Mve
                    profiles.Add(new IProfile() { Name = "Farmer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Fedora2", "ClothingYellow", "ClothingGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed"), Legs = new IProfileClothingItem("Pants", "ClothingBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkCyan"), });
                    // https://profile-editor.vercel.app?p=M38xr2x6Z1K3ZY2m3Z30330x7ZY2fdd
                    profiles.Add(new IProfile() { Name = "Farmer", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingPink"), Head = new IProfileClothingItem("SergeantHat", "ClothingDarkYellow", "ClothingDarkYellow"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingCyan", "ClothingCyan"), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingDarkCyan"), Legs = new IProfileClothingItem("Pants", "ClothingCyan"), Feet = new IProfileClothingItem("Shoes", "ClothingCyan"), Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxj3hdZ2peZY2meZYYY1XZZ
                    profiles.Add(new IProfile() { Name = "Farmer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("RiceHat", ""), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingGray"), Feet = new IProfileClothingItem("Shoes", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Firebug
                case BotType.Firebug:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj2xtZ2pcZ0EjZ0q1Z303j0S3p253Z18qZ
                    profiles.Add(new IProfile() { Name = "Firebug", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingOrange"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingCyan", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingRed"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightGray"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkRed"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("GasMask", "ClothingCyan", "ClothingLightYellow"), });
                    break;
                }
                #endregion

                #region Fireman
                case BotType.Fireman:
                {
                    // https://profile-editor.vercel.app?p=M1Fyo1Q7Z1K7Z2Avv2ndZ1xev2XZp10eZ1Opv
                    profiles.Add(new IProfile() { Name = "Fireman", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"), Head = new IProfileClothingItem("PithHelmet", "ClothingLightYellow", "ClothingYellow"), ChestOver = new IProfileClothingItem("MilitaryJacket", "ClothingGray", "ClothingYellow"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("SmallBelt", "ClothingYellow", "ClothingYellow"), Legs = new IProfileClothingItem("Pants", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkYellow"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightYellow"), });
                    break;
                }
                #endregion

                #region Fritzliebe
                case BotType.Fritzliebe:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1jjj1LeZY0q1ZY08tZ251Z0Kjj
                    profiles.Add(new IProfile() { Name = "Dr. Fritzliebe", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("FLDisguise", "ClothingLightGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingLightGray", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    break;
                }
                #endregion

                #region Funnyman
                case BotType.Funnyman:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj2hvg2HgZY2npZ2JgZ0yoZ0XjZY
                    profiles.Add(new IProfile() { Name = "Funnyman", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestOver = new IProfileClothingItem("StripedSuitJacket", "ClothingLightBlue"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingYellow", "ClothingLightBlue"), Hands = new IProfileClothingItem("Gloves", "ClothingLightGray"), Legs = new IProfileClothingItem("StripedPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingLightYellow"), Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Jo
                case BotType.Jo:
                {
                    // https://profile-editor.vercel.app?p=F1Gwj2zjZ3cgZ2Bhj0q9ZY0x7ZYY
                    profiles.Add(new IProfile() { Name = "Jo", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Waist = new IProfileClothingItem("SmallBelt_fem", "ClothingLightBrown", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkOrange"), Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Hacker
                case BotType.Hacker:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj36eZ1KeZY0pqZ1d7i128i24jZ0g7i
                    profiles.Add(new IProfile() { Name = "Hacker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("BaseballCap", "ClothingDarkGray", "ClothingLightCyan"), ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Boots", "ClothingOrange"), Accesory = new IProfileClothingItem("Goggles", "ClothingDarkGreen", "ClothingLightCyan"), });
                    // https://profile-editor.vercel.app?p=M1Fyj36eZ1KeZY0pqZ1d7i3n7o24jZ0g7i
                    profiles.Add(new IProfile() { Name = "Hacker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("BaseballCap", "ClothingDarkGray", "ClothingLightCyan"), ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Boots", "ClothingOrange"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Hitman
                case BotType.Hitman:
                {
                    // https://profile-editor.vercel.app?p=M1Fyk2jjo1L7Z2Aee2m7Z2U7ZY10eZY
                    profiles.Add(new IProfile() { Name = "Hitman", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingLightRed"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("SmallBelt", "ClothingGray", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fyk2jjo1KjZY2neZ2TjZY0X7ZY
                    profiles.Add(new IProfile() { Name = "Hitman", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("SuitJacket", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingLightRed"), Hands = new IProfileClothingItem("Gloves", "ClothingDarkGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Gangster
                case BotType.Gangster:
                {
                    // https://profile-editor.vercel.app?p=M1Fxp2jja1KeZY0qeZ30edYYY
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38ypY1KeZY2neZ0ledYY0QeZ
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkYellow"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38zp2jea1KeZY0qeZ2TeZYYY
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38zpY1KeZY0qeZ0leaYY0QeZ
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow"), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38yp2jda1KeZ0i2d0qeZ1deeYY0Lea
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink"), ChestOver = new IProfileClothingItem("Jacket", "ClothingGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingDarkYellow", "ClothingDarkPink"), Waist = new IProfileClothingItem("Belt", "ClothingBrown", "ClothingDarkYellow"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M1Fyp2jja1KeZY0qeZ30edYY0QeZ
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38wpY1KeZY0qeZ0ledYY2Sea
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("StylishHat", "ClothingGray", "ClothingDarkPink"), ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkYellow"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38xp2jea1KeZY0qeZ2TeZYY0Lea
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink"), ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38wp2jjd1KeZ0iep0qeZ1de7YY0QeZ
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("Jacket", "ClothingGray", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkYellow"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38yp2jda1KeZ0i2d0qeZ1deeYYY
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("Jacket", "ClothingGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingDarkYellow", "ClothingDarkPink"), Waist = new IProfileClothingItem("Belt", "ClothingBrown", "ClothingDarkYellow"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38xpY1KeZY0qeZ0leaYYY
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=F39xpY2veZY1baZ0meaYY0Lea
                    profiles.Add(new IProfile() { Name = "Gangster", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink"), ChestOver = new IProfileClothingItem("BlazerWithShirt_fem", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Skirt_fem", "ClothingGray"), Feet = new IProfileClothingItem("HighHeels", "ClothingDarkPink"), });
                    break;
                }
                #endregion

                #region GangsterHulk
                case BotType.GangsterHulk:
                {
                    // https://profile-editor.vercel.app?p=M1Fyp36jZ1KeZY0qeZ302dYY0QeZ
                    profiles.Add(new IProfile() { Name = "Gangster Hulk", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxp36jZ1KeZY0qeZ302d0x2ZYY
                    profiles.Add(new IProfile() { Name = "Gangster Hulk", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Cigar", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fyp36jZ1KeZY0qeZ302dYY0ree
                    profiles.Add(new IProfile() { Name = "Gangster Hulk", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("BucketHat", "ClothingGray", "ClothingGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Gardener
                case BotType.Gardener:
                {
                    // https://profile-editor.vercel.app?p=F1Gyj37gZ1N4ZY0p7Z073ZYYY
                    profiles.Add(new IProfile() { Name = "Gardener", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Apron_fem", "ClothingCyan"), ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingLightBlue"), Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fwj36jZ1K6ZY0q7Z2s3jYYY
                    profiles.Add(new IProfile() { Name = "Gardener", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingCyan", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Handler
                case BotType.Handler:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj36jZ2o2Z0ih22DejY2XZkY0vjZ
                    profiles.Add(new IProfile() { Name = "Handler", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Cap", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingLightBrown", "ClothingBrown"), Legs = new IProfileClothingItem("Shorts", "ClothingBrown"), Feet = new IProfileClothingItem("Sneakers", "ClothingGray", "ClothingLightGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGreen"), });
                    break;
                }
                #endregion

                #region Hunter
                case BotType.Hunter:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj36jZ0ti6Y0p2Z1d3iYY0v6Z
                    profiles.Add(new IProfile() { Name = "Hunter", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("Cap", "ClothingDarkCyan"), ChestOver = new IProfileClothingItem("Jacket", "ClothingCyan", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightCyan", "ClothingDarkCyan"), Feet = new IProfileClothingItem("Boots", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fzj36eZ0tqlY0p2Z2Qq90x7ZY18lZ
                    profiles.Add(new IProfile() { Name = "Hunter", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingLightOrange"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingOrange", "ClothingDarkOrange"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingOrange", "ClothingLightOrange"), Feet = new IProfileClothingItem("Boots", "ClothingBrown"), Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Incinerator
                case BotType.Incinerator:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj1kdq2pdZ0idl0q9ZY0Sdl25dZ18qZ
                    profiles.Add(new IProfile() { Name = "The Incinerator", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingOrange"), ChestUnder = new IProfileClothingItem("LeatherJacketBlack", "ClothingDarkYellow", "ClothingOrange"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingDarkYellow"), Waist = new IProfileClothingItem("Belt", "ClothingDarkYellow", "ClothingLightOrange"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkOrange"), Accesory = new IProfileClothingItem("GasMask", "ClothingDarkYellow", "ClothingLightOrange"), });
                    break;
                }
                #endregion

                #region Kingpin
                case BotType.Kingpin:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj2hr72HeZY2neZ2JeZY0XjZ3a7r
                    profiles.Add(new IProfile() { Name = "Kingpin", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("TopHat", "ClothingDarkGray", "ClothingPink"), ChestOver = new IProfileClothingItem("StripedSuitJacket", "ClothingGray"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingPink", "ClothingDarkGray"), Hands = new IProfileClothingItem("Gloves", "ClothingLightGray"), Legs = new IProfileClothingItem("StripedPants", "ClothingGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Kriegbär
                case BotType.Kriegbar:
                {
                    // https://profile-editor.vercel.app?p=M0RZgYYYYYYYY
                    profiles.Add(new IProfile() { Name = "Kriegbär #2", Gender = Gender.Male, Skin = new IProfileClothingItem("FrankenbearSkin", "", "ClothingLightBlue"), });
                    break;
                }
                #endregion

                #region LabAssistant
                case BotType.LabAssistant:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj363Z1K3ZY0qeZY1riZ243ZY
                    profiles.Add(new IProfile() { Name = "Lab Assistant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingCyan"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingCyan"), Legs = new IProfileClothingItem("Pants", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Mask", "ClothingLightCyan"), });
                    // https://profile-editor.vercel.app?p=F1Gzj373Z1N3ZY0qeZY3n3iYY
                    profiles.Add(new IProfile() { Name = "Lab Assistant", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingCyan"), Legs = new IProfileClothingItem("Pants_fem", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingCyan", "ClothingLightCyan"), });
                    break;
                }
                #endregion

                #region Lumberjack
                case BotType.Lumberjack:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj1noe1KeZY2meZ30ej29ZZYY
                    profiles.Add(new IProfile() { Name = "Lumberjack", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("LumberjackShirt", "ClothingLightRed", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Shoes", "ClothingGray"), Accesory = new IProfileClothingItem("SantaMask", ""), });
                    // https://profile-editor.vercel.app?p=M1Fxj1ooe1K4ZY2meZ301j1DeZYY
                    profiles.Add(new IProfile() { Name = "Lumberjack", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingBlue", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingLightRed", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingGray"), Accesory = new IProfileClothingItem("Moustache", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Meatgrinder
                case BotType.Meatgrinder:
                {
                    // https://profile-editor.vercel.app?p=M38yrY2peZY0qeZ06mZ11ZZ25cZ0wjZ
                    profiles.Add(new IProfile() { Name = "The Meatgrinder", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink"), Head = new IProfileClothingItem("ChefHat", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Apron", "ClothingLightPink"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingDarkRed"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("GoalieMask", ""), });
                    break;
                }
                #endregion

                #region Mecha
                case BotType.Mecha:
                {
                    // https://profile-editor.vercel.app?p=M1sjoYYYYYYYY
                    profiles.Add(new IProfile() { Name = "Mecha Fritzliebe", Gender = Gender.Male, Skin = new IProfileClothingItem("MechSkin", "ClothingLightGray", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region MetroCop
                case BotType.MetroCop:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj2wfZ1LeZY0qeZ1ueeY25eZ1tek
                    profiles.Add(new IProfile() { Name = "MetroCop", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("MetroLawGasMask", "ClothingGray", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M1Fyo2wfZ1LeZY0qeZ1ueeY25eZ1wek
                    profiles.Add(new IProfile() { Name = "MetroCop", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"), Head = new IProfileClothingItem("MetroLawMask", "ClothingGray", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38Aj0neZ1LeZ0EeZ0qeZYY25eZ1teo
                    profiles.Add(new IProfile() { Name = "MetroCop", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin5", "ClothingLightGray"), Head = new IProfileClothingItem("MetroLawGasMask", "ClothingGray", "ClothingLightRed"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("CombatBelt", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region MetroCop2
                case BotType.MetroCop2:
                {
                    // https://profile-editor.vercel.app?p=M1Fyo2wfZ1LeZY0qeZ1uee0JZZ25eZY
                    profiles.Add(new IProfile() { Name = "MetroCop Chief", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"), ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Earpiece", ""), });
                    // https://profile-editor.vercel.app?p=M1Fyj0neZ1LeZ0EeZ0qeZY0JZZ25eZY
                    profiles.Add(new IProfile() { Name = "MetroCop Chief", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("CombatBelt", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Earpiece", ""), });
                    // https://profile-editor.vercel.app?p=M1Fyo2wfZ1LeZY0qeZ1ueeY25eZY
                    profiles.Add(new IProfile() { Name = "MetroCop Chief", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"), ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region MirrorMan
                case BotType.MirrorMan:
                    // https://profile-editor.vercel.app?p=M1Fyj2ggZ1KgZ2a4Z0p4ZY0yjZ244Z1c4Z
                    profiles.Add(new IProfile() { Name = "MirrorMan", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("Hood", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("Shirt", "ClothingLightBlue"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingDarkBlue"), Waist = new IProfileClothingItem("Sash", "ClothingDarkBlue"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkBlue"), Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightGray"), });
                    break;
                #endregion

                #region Mutant
                case BotType.BigMutant:
                case BotType.Mutant:
                {
                    // https://profile-editor.vercel.app?p=M3sZZ2x3Z2p6Z0EgZ0q6ZY1WiZ0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("RestraintMask", "ClothingLightCyan"), });
                    // https://profile-editor.vercel.app?p=M1Fzj2x3Z2p6Z0EgZ0q6ZY0S8k0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen"), });
                    // https://profile-editor.vercel.app?p=M1FxjY2p6Z0EgZ0q6ZY0S8k0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen"), });
                    // https://profile-editor.vercel.app?p=M1FAjY2p6Z0EgZ0q6ZY1W3Z0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("RestraintMask", "ClothingCyan"), });
                    // https://profile-editor.vercel.app?p=M1FwjY2p6Z0EgZ0q6ZY1WjZ0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("RestraintMask", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxj2x3Z2p6Z0EgZ0q6ZY1WiZ0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingCyan"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("RestraintMask", "ClothingLightCyan"), });
                    // https://profile-editor.vercel.app?p=M3sZZ3ddZ2p6Z0EgZ0q6ZY0S8k0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkYellow"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen"), });
                    // https://profile-editor.vercel.app?p=M1FAjY2p6Z0EgZ0q6ZY0S8k0P3ZY
                    profiles.Add(new IProfile() { Name = "Mutant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen"), });
                    break;
                }
                #endregion

                #region Nadja
                case BotType.Nadja:
                {
                    // https://profile-editor.vercel.app?p=F1Gyk1Ad70udd2ddZ2neZYY10eZ0k7o
                    profiles.Add(new IProfile() { Name = "Nadja", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGreen"), Head = new IProfileClothingItem("Beret", "ClothingDarkGray", "ClothingLightRed"), ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region NaziLabAssistant
                case BotType.NaziLabAssistant:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj363Z1K3ZY0q1ZY08tZYY
                    profiles.Add(new IProfile() { Name = "Nazi Lab Assistant", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingCyan"), Legs = new IProfileClothingItem("Pants", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    break;
                }
                #endregion

                #region NaziMuscleSoldier
                case BotType.NaziMuscleSoldier:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1zhj1KhZ0iej0q1ZY08tZYY
                    profiles.Add(new IProfile() { Name = "Nazi Muscle Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingLightBrown", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBrown"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    break;
                }
                #endregion

                #region NaziScientist
                case BotType.NaziScientist:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1j3j1K3ZY0q1ZY08tZ251Z173k
                    profiles.Add(new IProfile() { Name = "Nazi Scientist", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("HazmatMask", "ClothingCyan", "ClothingLightGreen"), ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingCyan", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingBlue"), Legs = new IProfileClothingItem("Pants", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    // https://profile-editor.vercel.app?p=F1Gzj1m3j1N3ZY0q1ZY09tZ261Z173k
                    profiles.Add(new IProfile() { Name = "Nazi Scientist", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("HazmatMask", "ClothingCyan", "ClothingLightGreen"), ChestUnder = new IProfileClothingItem("LeatherJacket_fem", "ClothingCyan", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack_fem", "ClothingBlue"), Legs = new IProfileClothingItem("Pants_fem", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband_fem", "ClothingRed"), });
                    break;
                }
                #endregion

                #region NaziSoldier
                case BotType.NaziSoldier:
                {
                    // https://profile-editor.vercel.app?p=M1FzjY1LeZY0q1Z1uej08tZ101Z0VeZ
                    profiles.Add(new IProfile() { Name = "Nazi Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("GermanHelmet", "ClothingGray"), ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingLightGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    // https://profile-editor.vercel.app?p=M1Fzj1zhj1KhZ0iej0q1ZY08tZY0v2Z
                    profiles.Add(new IProfile() { Name = "Nazi Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("Cap", "ClothingBrown"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingLightBrown", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBrown"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    // https://profile-editor.vercel.app?p=M1Fzj1zhj1KhZ0iej0q1ZY08tZY0VeZ
                    profiles.Add(new IProfile() { Name = "Nazi Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("GermanHelmet", "ClothingGray"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingLightBrown", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBrown"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    break;
                }
                #endregion

                #region SSOfficer
                case BotType.SSOfficer:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj2jj71LeZY0q1Z1I7p08tZ101Z1H7Z
                    profiles.Add(new IProfile() { Name = "SS Officer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("OfficerHat", "ClothingDarkGray"), ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingDarkGray", "ClothingLightYellow"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("Armband", "ClothingRed"), });
                    break;
                }
                #endregion

                #region Ninja
                case BotType.Ninja:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj337Z1L7ZY2n7ZY0f7Z0PeZY
                    profiles.Add(new IProfile() { Name = "Ninja", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=F1Gyj347Z1M7ZY2n7ZY0f7Z0PeZY
                    profiles.Add(new IProfile() { Name = "Ninja", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=F1Gyj347Z1M7ZY2n7ZY1rcZ0PeZY
                    profiles.Add(new IProfile() { Name = "Ninja", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed"), });
                    // https://profile-editor.vercel.app?p=M1Fyj337Z1L7ZY2n7ZY1rcZ0PeZY
                    profiles.Add(new IProfile() { Name = "Ninja", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed"), });
                    break;
                }
                #endregion

                #region Police
                case BotType.Police:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1Q4Z1L4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fyj1Q4Z1L4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fxj1Q4Z1L4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fwj1Q4Z1L4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=F1Gyj1R4Z1M4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=F1Gxj1R4Z1M4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=F1Gwj1R4Z1M4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Officer", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region PoliceChief
                case BotType.PoliceChief:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1Q4Z1L4Z0i7e2m5Z3j7vYY1P4Z
                    profiles.Add(new IProfile() { Name = "Police Chief", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestOver = new IProfileClothingItem("Vest", "ClothingDarkGray", "ClothingYellow"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region PoliceSWAT
                case BotType.PoliceSWAT:
                {
                    // https://profile-editor.vercel.app?p=F1Gxj1R4Z1M4ZY2m5Z1ieZYY1a4Z
                    profiles.Add(new IProfile() { Name = "SWAT", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Helmet2", "ClothingDarkBlue"), ChestOver = new IProfileClothingItem("KevlarVest_fem", "ClothingGray"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M1Fxj1Q4Z1L4ZY2m5Z1heZYY1a4Z
                    profiles.Add(new IProfile() { Name = "SWAT", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Helmet2", "ClothingDarkBlue"), ChestOver = new IProfileClothingItem("KevlarVest", "ClothingGray"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region President
                case BotType.President:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj2jjo1L4ZY2n7Z2U4ZY0P4Z0QvZ
                    profiles.Add(new IProfile() { Name = "Donald Trump", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Flatcap", "ClothingYellow"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingLightRed"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Punk
                case BotType.Punk:
                {
                    // https://profile-editor.vercel.app?p=M3oxpY3bgZ0iej0qeZ2L11YY1Cpq
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingLightYellow", "ClothingOrange"), ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38wpY3bgZ0iej0qeZ2Q112XZjY0s7Z
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("Buzzcut", "ClothingDarkGray"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38zp2wpZ3bgZ0iej0qeZY2XZjY1BoZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow"), Head = new IProfileClothingItem("Mohawk", "ClothingLightRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightYellow"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F1Gxj2zpZ3cgZ04eZ0qeZ1f14YY0kdp
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Beret", "ClothingDarkYellow", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("JacketBlack_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3oxpY3bgZ0iej0qeZ2L11YY1BpZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("Mohawk", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38xdY3bgZ0iej0qeZ2L113n7oY1BnZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("Mohawk", "ClothingLightPurple"), ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F1Gwj2zrZ3cgZ0jej0qeZ2R142XZjY0s7Z
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("Buzzcut", "ClothingDarkGray"), ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingPink"), Waist = new IProfileClothingItem("Belt_fem", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M3oxpY3bgZ0iej0qeZ2L11YY18pZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("Headband", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38ydY3bgZ0iej0qeZ3jpp2XZjY1BqZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingDarkYellow"), Head = new IProfileClothingItem("Mohawk", "ClothingOrange"), ChestOver = new IProfileClothingItem("Vest", "ClothingLightYellow", "ClothingLightYellow"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38xvY3bgZ0iej0qeZ3jpp3n7nY18pZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingYellow"), Head = new IProfileClothingItem("Headband", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("Vest", "ClothingLightYellow", "ClothingLightYellow"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightPurple"), });
                    // https://profile-editor.vercel.app?p=M38wpY3bgZ0iej0qeZ2Q112XZjY0kdp
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("Beret", "ClothingDarkYellow", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F3pwj2zpZ3cgZ04eZ0qeZ0C14YY0kdp
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Female, Skin = new IProfileClothingItem("Warpaint_fem", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("Beret", "ClothingDarkYellow", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("CoatBlack_fem", "ClothingBlue", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38ypY3bgZ039Z0qeZ3j7lYY1C7l
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkGray", "ClothingLightOrange"), ChestOver = new IProfileClothingItem("Vest", "ClothingDarkGray", "ClothingLightOrange"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkOrange"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3owjY3bgZ0iej0qeZ2Q11YY1coZ
                    profiles.Add(new IProfile() { Name = "Punk", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("Hood", "ClothingLightRed"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region PunkHulk
                case BotType.PunkHulk:
                {
                    // https://profile-editor.vercel.app?p=M38wv2wjZ3bgZ0iej0qeZY2XZjYY
                    profiles.Add(new IProfile() { Name = "Punk Muscle", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingYellow"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38yoY2p3Z0EgZ0qeZY127oYY
                    profiles.Add(new IProfile() { Name = "Punk Muscle", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightRed"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Goggles", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=M38xoY2p3Z0EgZ0qeZY1WdZYY
                    profiles.Add(new IProfile() { Name = "Punk Muscle", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightRed"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("RestraintMask", "ClothingDarkYellow"), });
                    // https://profile-editor.vercel.app?p=M38zp2wjZ3bgZ0EgZ0qeZY2XZjY18qZ
                    profiles.Add(new IProfile() { Name = "Punk Muscle", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow"), Head = new IProfileClothingItem("Headband", "ClothingOrange"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38wdY3bgZ0iej0qeZ3jpp2XZjYY
                    profiles.Add(new IProfile() { Name = "Punk Muscle", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingDarkYellow"), ChestOver = new IProfileClothingItem("Vest", "ClothingLightYellow", "ClothingLightYellow"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    break;
                }
                #endregion

                #region Pyromaniac
                case BotType.Pyromaniac:
                {
                    // https://profile-editor.vercel.app?p=M38yo32oZ1L7ZY0p7Z13ZZ0Seo25cZY
                    profiles.Add(new IProfile() { Name = "Pyromaniac", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightRed"), ChestOver = new IProfileClothingItem("GrenadeBelt", ""), ChestUnder = new IProfileClothingItem("Sweater", "ClothingLightRed"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingDarkRed"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("GasMask", "ClothingGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F39yoY1M7ZY0qeZ057Z0Seo26cZY
                    profiles.Add(new IProfile() { Name = "Pyromaniac", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingLightRed"), ChestOver = new IProfileClothingItem("AmmoBelt_fem", "ClothingDarkGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack_fem", "ClothingDarkRed"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("GasMask", "ClothingGray", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Rambo
                case BotType.Rambo:
                {
                    // https://profile-editor.vercel.app?p=M1Fyk2weZ0tdd2Aee0qeZ027ZYY18oZ
                    profiles.Add(new IProfile() { Name = "Rambo", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGreen"), Head = new IProfileClothingItem("Headband", "ClothingLightRed"), ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGray"), Waist = new IProfileClothingItem("SmallBelt", "ClothingGray", "ClothingGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Raze
                case BotType.Raze:
                {
                    // https://profile-editor.vercel.app?p=F1Gzg1ReZ1N7Z0jev0q9Z1J7v2XZg0PeZ0veZ
                    profiles.Add(new IProfile() { Name = "Raze", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightBlue"), Head = new IProfileClothingItem("Cap", "ClothingGray"), ChestOver = new IProfileClothingItem("OfficerJacket_fem", "ClothingDarkGray", "ClothingYellow"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("Belt_fem", "ClothingGray", "ClothingYellow"), Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkOrange"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightBlue", ""), });
                    break;
                }
                #endregion

                #region Reznor
                case BotType.Reznor:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj339Z1LfZ2Afk2n3Z2UfZY0PeZ1Cek
                    profiles.Add(new IProfile() { Name = "Reznor", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingGreen"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkOrange"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("SmallBelt", "ClothingGreen", "ClothingLightGreen"), Legs = new IProfileClothingItem("PantsBlack", "ClothingGreen"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingCyan"), });
                    break;
                }
                #endregion

                #region Santa
                case BotType.Santa:
                {
                    // https://profile-editor.vercel.app?p=M38yr2wjZ1KtZ0icp0q2Z0Atj29ZZ25eZ28tZ
                    profiles.Add(new IProfile() { Name = "Bad Santa", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink"), Head = new IProfileClothingItem("SantaHat", "ClothingRed"), ChestOver = new IProfileClothingItem("Coat", "ClothingRed", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkRed", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingRed"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBrown"), Accesory = new IProfileClothingItem("SantaMask", ""), });
                    break;
                }
                #endregion

                #region Scientist
                case BotType.Scientist:
                {
                    // https://profile-editor.vercel.app?p=M1Fzj1j3j1K3ZY0q1ZYY251Z173k
                    profiles.Add(new IProfile() { Name = "Scientist", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("HazmatMask", "ClothingCyan", "ClothingLightGreen"), ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingCyan", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingBlue"), Legs = new IProfileClothingItem("Pants", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=M1Fzj333Z1K3ZY0qeZ1I331riZ0XiZ1c3Z
                    profiles.Add(new IProfile() { Name = "Scientist", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"), Head = new IProfileClothingItem("Hood", "ClothingCyan"), ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingCyan", "ClothingCyan"), ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingCyan"), Hands = new IProfileClothingItem("Gloves", "ClothingLightCyan"), Legs = new IProfileClothingItem("Pants", "ClothingCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Mask", "ClothingLightCyan"), });
                    break;
                }
                #endregion

                #region Sheriff
                case BotType.Sheriff:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj1QhZ1K4Z0i5p215ZY1DeZY2fhp
                    profiles.Add(new IProfile() { Name = "Sheriff Sternwood", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("SergeantHat", "ClothingLightBrown", "ClothingLightYellow"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingLightBrown"), Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow"), Legs = new IProfileClothingItem("Pants", "ClothingDarkBlue"), Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingDarkBrown"), Accesory = new IProfileClothingItem("Moustache", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Smoker
                case BotType.Smoker:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj1z3j1L6Z0E3Z0p7Z1h7Z0S7i24eZY
                    profiles.Add(new IProfile() { Name = "Smoker", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestOver = new IProfileClothingItem("KevlarVest", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingCyan", "ClothingLightGray"), Hands = new IProfileClothingItem("SafetyGloves", "ClothingGray"), Waist = new IProfileClothingItem("CombatBelt", "ClothingCyan"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkCyan"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGray", "ClothingLightCyan"), });
                    break;
                }
                #endregion

                #region Sniper
                case BotType.Sniper:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj367Z0t8703eZ0q7Z027Z3n7o0XeZY
                    profiles.Add(new IProfile() { Name = "Sniper", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("Gloves", "ClothingGray"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGreen", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=M1Fwj367Z0t8703eZ0q7Z027Z3n7o0XeZY
                    profiles.Add(new IProfile() { Name = "Sniper", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("Gloves", "ClothingGray"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGreen", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    break;
                }
                #endregion

                #region Soldier
                case BotType.Soldier:
                case BotType.Soldier2:
                {
                    // https://profile-editor.vercel.app?p=M38zp1zdg0tdd2cdZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38yp1zdg0tdd2cdZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38xp1zdg0tdd2cdZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M38wp1zdg0tdd2cdZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=F39zp1Adg0udd2ddZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin4", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=F39yp1Adg0udd2ddZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=F39xp1Adg0udd2ddZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin2", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=F39wp1Adg0udd2ddZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Soldier", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue"), Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Spacer
                case BotType.Spacer:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj0nqZ0tl7Y0p7ZYY0XlZ1Cei
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingOrange"), Hands = new IProfileClothingItem("Gloves", "ClothingLightOrange"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxj367Z0tl7Y0p7Z1d6i087Z25lZ1Cei
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan"), ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkCyan", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingLightOrange"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Armband", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxj2w7Z0tl7Y0p7ZY087Z25lZ1B7Z
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Mohawk", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingLightOrange"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Armband", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1FAj36eZ1LqZY0p7Z1eqjY10eZY
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray"), ChestOver = new IProfileClothingItem("JacketBlack", "ClothingOrange", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingOrange"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fyj2w7Z0tq7Y0p7ZY3nei10iZY
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants", "ClothingOrange", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingGray", "ClothingLightCyan"), });
                    // https://profile-editor.vercel.app?p=F1GxiY2IqZ0FlZ0qeZ077Z3n7oY1BnZ
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightCyan"), Head = new IProfileClothingItem("Mohawk", "ClothingLightPurple"), ChestOver = new IProfileClothingItem("Apron_fem", "ClothingDarkGray"), Waist = new IProfileClothingItem("CombatBelt_fem", "ClothingLightOrange"), Legs = new IProfileClothingItem("StripedPants_fem", "ClothingOrange"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=M1Fxj157i0ti7Y0p7Z1h7ZY0XdZ1Cei
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan"), ChestOver = new IProfileClothingItem("KevlarVest", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("HawaiiShirt", "ClothingDarkGray", "ClothingLightCyan"), Hands = new IProfileClothingItem("Gloves", "ClothingDarkYellow"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightCyan", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M1Fxj367Z0tl72ceZ0p7Z1eeiY10qZ1Cel
                    profiles.Add(new IProfile() { Name = "Spacer", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightOrange"), ChestOver = new IProfileClothingItem("JacketBlack", "ClothingGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingOrange"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region SpaceSniper
                case BotType.SpaceSniper:
                {
                    // https://profile-editor.vercel.app?p=M1Fxj0neZ0t78Y0p7ZY08qZ0X7Z1Cei
                    profiles.Add(new IProfile() { Name = "Sniper", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingGray"), Hands = new IProfileClothingItem("Gloves", "ClothingDarkGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGray", "ClothingDarkGreen"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Armband", "ClothingOrange"), });
                    // https://profile-editor.vercel.app?p=M1Fxj367Z0t87Y0p7Z1d8f08qZ25jZ1Cei
                    profiles.Add(new IProfile() { Name = "Sniper", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan"), ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkGreen", "ClothingGreen"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingLightGray"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGreen", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Armband", "ClothingOrange"), });
                    // https://profile-editor.vercel.app?p=M1Fyj2w7Z0t87Y0p7ZY3n7i10iZ0g7i
                    profiles.Add(new IProfile() { Name = "Sniper", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("BaseballCap", "ClothingDarkGray", "ClothingLightCyan"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkGray"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingLightCyan"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGreen", "ClothingDarkGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightCyan"), });
                    break;
                }
                #endregion

                #region Stripper
                case BotType.Stripper:
                {
                    // https://profile-editor.vercel.app?p=F1Gx7YYY202ZYYYY
                    profiles.Add(new IProfile() { Name = "Stripper", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkGray"), Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown"), });
                    // https://profile-editor.vercel.app?p=M1FwjYYYYYYYY
                    profiles.Add(new IProfile() { Name = "Stripper", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), });
                    // https://profile-editor.vercel.app?p=F1GzoYYY1boZYYYY
                    profiles.Add(new IProfile() { Name = "Stripper", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightRed"), Feet = new IProfileClothingItem("HighHeels", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=F1Gxf3efZYYYYYYY
                    profiles.Add(new IProfile() { Name = "Stripper", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingGreen"), ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingGreen"), });
                    // https://profile-editor.vercel.app?p=F1GzsYYY217Z2tsjYYY
                    profiles.Add(new IProfile() { Name = "Stripper", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingPurple"), ChestOver = new IProfileClothingItem("ShoulderHolster_fem", "ClothingPurple", "ClothingLightGray"), Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingDarkGray"), });
                    break;
                }
                #endregion
                
                #region SuicideDwarf
                case BotType.SuicideDwarf:
                {
                    // https://profile-editor.vercel.app?p=M38wp3ddZ3bdZ2cdZ0qeZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Dwarf", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow"), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkYellow"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkYellow"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region Survivalist
                case BotType.Survivalist:
                {
                    // https://profile-editor.vercel.app?p=M3oxd3hdZ0tdd2cqZ0p9ZYY0OhZ0Gde
                    profiles.Add(new IProfile() { Name = "The Survivalist", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("CowboyHat", "ClothingDarkYellow", "ClothingGray"), ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkYellow"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingLightBrown"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingOrange"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("Boots", "ClothingDarkOrange"), });
                    break;
                }
                #endregion

                #region Survivor
                case BotType.Survivor:
                {
                    // https://profile-editor.vercel.app?p=M3oAo15jo1KeZY0p7Z1e7eYY1Co7
                    profiles.Add(new IProfile() { Name = "Survivor", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingLightRed", "ClothingDarkGray"), ChestOver = new IProfileClothingItem("JacketBlack", "ClothingDarkGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("HawaiiShirt", "ClothingLightGray", "ClothingLightRed"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M3oAoY3beZ2c2ZYY2CoZY0v1Z
                    profiles.Add(new IProfile() { Name = "Survivor", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed"), Head = new IProfileClothingItem("Cap", "ClothingBlue"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingBrown"), Legs = new IProfileClothingItem("TornPants", "ClothingGray"), Accesory = new IProfileClothingItem("SmallMoustache", "ClothingLightRed"), });
                    // https://profile-editor.vercel.app?p=M3oAoY1KeZY2DeeY0HZZY0v7Z
                    profiles.Add(new IProfile() { Name = "Survivor", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed"), Head = new IProfileClothingItem("Cap", "ClothingDarkGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Sneakers", "ClothingGray", "ClothingGray"), Accesory = new IProfileClothingItem("DogTag", ""), });
                    // https://profile-editor.vercel.app?p=M38Ao364Z1K4Z2c2Z0p7ZYYY0v7Z
                    profiles.Add(new IProfile() { Name = "Survivor", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin5", "ClothingLightRed"), Head = new IProfileClothingItem("Cap", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkBlue"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingBrown"), Legs = new IProfileClothingItem("Pants", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    // https://profile-editor.vercel.app?p=M3oAo36eZ1KeZY0peZ1e7eYYY
                    profiles.Add(new IProfile() { Name = "Survivor", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed"), ChestOver = new IProfileClothingItem("JacketBlack", "ClothingDarkGray", "ClothingGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Boots", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3oAo1o251KeZY0p7Z1h7ZYY1aeZ
                    profiles.Add(new IProfile() { Name = "Survivor", Gender = Gender.Male, Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed"), Head = new IProfileClothingItem("Helmet2", "ClothingGray"), ChestOver = new IProfileClothingItem("KevlarVest", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingBrown", "ClothingDarkBrown"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("Boots", "ClothingDarkGray"), });
                    break;
                }
                #endregion

                #region Bear
                case BotType.Teddybear:
                case BotType.Babybear:
                {
                    // https://profile-editor.vercel.app?p=M0hZZYYYYYYYY
                    profiles.Add(new IProfile() { Name = "Teddybear", Gender = Gender.Male, Skin = new IProfileClothingItem("BearSkin", ""), });
                    break;
                }
                #endregion

                #region Thug
                case BotType.Thug:
                {
                    // https://profile-editor.vercel.app?p=F1Gyj2zjZ1NgZ0j7j0qeZY2XZjY18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M1Fyj2wjZ1KgZ0i7j0qeZY2XZjY18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M1Fyj2wjZ1KgZ0i7j0qeZY2XZjY1C6p
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkCyan", "ClothingLightYellow"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F1Gyj37jZ1NgZ0j7j0qeZY2XZjY1C6p
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkCyan", "ClothingLightYellow"), ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38yk2wjZ1KgZ032Z0q1Z2Q112XZj0P1ZY
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingBrown"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F39yp2zjZ1NgZ0jej0q1Z2R11Y0P1ZY
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=M38xk2wjZ1KgZ032Z0q1Z2Q11Y0P1ZY
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightGreen"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingBrown"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=F39xk2zjZ1NgZ0j2j0q1Z2R112XZj0P1Z18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin2", "ClothingLightGreen"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingBrown", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F39wl2zjZ1NgZ0j2j0q1Z3l11Y0P1Z1C8p
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Tattoos_fem", "Skin1", "ClothingLightOrange"), Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkGreen", "ClothingLightYellow"), ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingBrown", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), });
                    // https://profile-editor.vercel.app?p=F1Gxj2zjZ1NgZ0j7j0qeZY2XZjY18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M1Fxj2wjZ1KgZ0i7j0qeZY2XZjY18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M1Fwj2wjZ1KgZ0i7j0qeZ2Q112XZjY18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F1Gwj2zjZ1NgZ0j7j0qeZ3l112XZjY0gto
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"), Head = new IProfileClothingItem("BaseballCap", "ClothingRed", "ClothingLightRed"), ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38yj2w4Z1L4ZY0p5Z3jggYY18cZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightGray"), Head = new IProfileClothingItem("Headband", "ClothingDarkRed"), ChestOver = new IProfileClothingItem("Vest", "ClothingLightBlue", "ClothingLightBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M38yrY3bgZ0i7j0q1Z3k410HZZ0O7Z3roZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink"), Head = new IProfileClothingItem("WoolCap", "ClothingLightRed"), ChestOver = new IProfileClothingItem("VestBlack", "ClothingDarkBlue", "ClothingBlue"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("DogTag", ""), });
                    // https://profile-editor.vercel.app?p=M38yp2wjZ3bgZ0iej0qeZY2XZj0O2Z18oZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"), Head = new IProfileClothingItem("Headband", "ClothingLightRed"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingBrown"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=F1GxdY3cbZ0j4j0q1Z3l142XZj101Z18oZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"), Head = new IProfileClothingItem("Headband", "ClothingLightRed"), ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingDarkBlue"), Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue"), Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkPurple"), Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M38wd2w4Z1L4ZY0p5Z3jggYY18tZ
                    profiles.Add(new IProfile() { Name = "Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingDarkYellow"), Head = new IProfileClothingItem("Headband", "ClothingRed"), ChestOver = new IProfileClothingItem("Vest", "ClothingLightBlue", "ClothingLightBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region ThugHulk
                case BotType.ThugHulk:
                {
                    // https://profile-editor.vercel.app?p=M1Fyj36jZ1KgZ0iej0qeZY2XZjYY
                    profiles.Add(new IProfile() { Name = "Thug Hulk", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M1Fxj36jZ1KgZ0iej0qeZY2XZjYY
                    profiles.Add(new IProfile() { Name = "Thug Hulk", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    // https://profile-editor.vercel.app?p=M1Fwj36jZ1KgZ0iej0qeZY2XZjYY
                    profiles.Add(new IProfile() { Name = "Thug Hulk", Gender = Gender.Male, Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"), Legs = new IProfileClothingItem("Pants", "ClothingLightBlue"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    break;
                }
                #endregion

                #region Zombie
                case BotType.Zombie:
                {
                    // https://profile-editor.vercel.app?p=F3tZZ3e4Z3c4ZYYYYYY
                    profiles.Add(new IProfile() { Name = "Zombie", Gender = Gender.Female, Skin = new IProfileClothingItem("Zombie_fem", ""), ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=M3sZZ3d4Z3b4ZYYYYYY
                    profiles.Add(new IProfile() { Name = "Zombie", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkBlue"), });
                    break;
                }
                #endregion

                #region ZombieAgent
                case BotType.ZombieAgent:
                {
                    // https://profile-editor.vercel.app?p=M3sZZ2je71L7ZY2n5Z2U7Z2XZjYY
                    profiles.Add(new IProfile() { Name = "Zombie Agent", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown"), Accesory = new IProfileClothingItem("SunGlasses", "", "ClothingLightGray", ""), });
                    break;
                }
                #endregion

                #region ZombieBruiser
                case BotType.ZombieBruiser:
                {
                    // https://profile-editor.vercel.app?p=M3sZZY3bbZYY3k141WeZYY
                    profiles.Add(new IProfile() { Name = "Zombie Bruiser", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("VestBlack", "ClothingBlue", "ClothingDarkBlue"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkPurple"), Accesory = new IProfileClothingItem("RestraintMask", "ClothingGray"), });
                    break;
                }
                #endregion

                #region ZombieChild
                case BotType.ZombieChild:
                {
                    // https://profile-editor.vercel.app?p=F3tZZ3esZ3c4ZYYYYYY
                    profiles.Add(new IProfile() { Name = "Zombie Child", Gender = Gender.Female, Skin = new IProfileClothingItem("Zombie_fem", ""), ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingPurple"), Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkBlue"), });
                    // https://profile-editor.vercel.app?p=M3sZZ3dsZ3b4ZYYYYYY
                    profiles.Add(new IProfile() { Name = "Zombie Child", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingPurple"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkBlue"), });
                    break;
                }
                #endregion

                #region ZombieFat
                case BotType.ZombieFat:
                {
                    // https://profile-editor.vercel.app?p=M3sZZY2oeZYY2stjYYY
                    profiles.Add(new IProfile() { Name = "Fat Zombie", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingRed", "ClothingLightGray"), Legs = new IProfileClothingItem("Shorts", "ClothingGray"), });
                    break;
                }
                #endregion

                #region ZombieFighter
                case BotType.ZombieFighter:
                {
                    // https://profile-editor.vercel.app?p=M3sZZ32fZ1L7Z0i7j0q5ZYY0O7ZY
                    profiles.Add(new IProfile() { Name = "Dead Cop", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestUnder = new IProfileClothingItem("Sweater", "ClothingGreen"), Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ36jZ1L7Z2c2Z0q5Z1d2hYY0a2j
                    profiles.Add(new IProfile() { Name = "Dead Merc", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray"), ChestOver = new IProfileClothingItem("Jacket", "ClothingBrown", "ClothingLightBrown"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingBrown"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ36dZ1L7ZY0q5ZYYY0vdZ
                    profiles.Add(new IProfile() { Name = "Dead Vigilante", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("Cap", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkYellow"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ2hj71L7ZY2n5Z2U7ZYYY
                    profiles.Add(new IProfile() { Name = "Dead Spy", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray"), ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ2wjZ1L7Z2A7j2n5Z2s55YYY
                    profiles.Add(new IProfile() { Name = "Dead Pilot", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingDarkBrown", "ClothingDarkBrown"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray"), Waist = new IProfileClothingItem("SmallBelt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ2weZ1L7Z0i7j0q5Z1d22YYY
                    profiles.Add(new IProfile() { Name = "Dead Driver", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("Jacket", "ClothingBrown", "ClothingBrown"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGray"), Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region ZombieFlamer
                case BotType.ZombieFlamer:
                {
                    // https://profile-editor.vercel.app?p=M3sZZ2xeZ2p7ZYYY0WppYY
                    profiles.Add(new IProfile() { Name = "Zombie Flamer", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingGray"), Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkGray"), Accesory = new IProfileClothingItem("Glasses", "ClothingLightYellow", "ClothingLightYellow"), });
                    break;
                }
                #endregion

                #region ZombieGangster
                case BotType.ZombieGangster:
                {
                    // https://profile-editor.vercel.app?p=M3sZZY3beZY2neZ0legYY2Ser
                    profiles.Add(new IProfile() { Name = "Zombie Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("StylishHat", "ClothingGray", "ClothingPink"), ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingLightBlue"), Legs = new IProfileClothingItem("TornPants", "ClothingGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3sZZ2jra3beZY2neZ30edYY0QeZ
                    profiles.Add(new IProfile() { Name = "Zombie Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("Flatcap", "ClothingGray"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingPink", "ClothingDarkPink"), Legs = new IProfileClothingItem("TornPants", "ClothingGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3sZZY3beZY2neZ2TeZYY2Sed
                    profiles.Add(new IProfile() { Name = "Zombie Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("StylishHat", "ClothingGray", "ClothingDarkYellow"), ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray"), Legs = new IProfileClothingItem("TornPants", "ClothingGray"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3sZZ2jea1KeZY0qeZ2TeZYY0Lea
                    profiles.Add(new IProfile() { Name = "Zombie Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink"), ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray"), ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    // https://profile-editor.vercel.app?p=M3sZZY1KeZY0qeZ0leaYYY
                    profiles.Add(new IProfile() { Name = "Zombie Gangster", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkPink"), Legs = new IProfileClothingItem("Pants", "ClothingGray"), Feet = new IProfileClothingItem("BootsBlack", "ClothingGray"), });
                    break;
                }
                #endregion

                #region ZombieNinja
                case BotType.ZombieNinja:
                {
                    // https://profile-editor.vercel.app?p=F3tZZ3g4Z1N4Z2bcZ2n4ZY1rcZ0P4ZY
                    profiles.Add(new IProfile() { Name = "Zombie Ninja", Gender = Gender.Female, Skin = new IProfileClothingItem("Zombie_fem", ""), ChestUnder = new IProfileClothingItem("TrainingShirt_fem", "ClothingDarkBlue"), Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingDarkBlue"), Waist = new IProfileClothingItem("Sash_fem", "ClothingDarkRed"), Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBlue"), Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed"), });
                    break;
                }
                #endregion

                #region ZombiePolice
                case BotType.ZombiePolice:
                {
                    // https://profile-editor.vercel.app?p=F3tZZ1R4Z1M4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Zombie Police", Gender = Gender.Female, Skin = new IProfileClothingItem("Zombie_fem", ""), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ1Q4Z1L4ZY2m5ZYYY1P4Z
                    profiles.Add(new IProfile() { Name = "Zombie Police", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue"), ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region ZombiePrussian
                case BotType.ZombiePrussian:
                case BotType.ZombieEater:
                {
                    // https://profile-editor.vercel.app?p=M3sZZ1k3j3b6ZY0q6ZYYY2G3Z
                    profiles.Add(new IProfile() { Name = "Zombie Prussian", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("SpikedHelmet", "ClothingCyan"), ChestUnder = new IProfileClothingItem("LeatherJacketBlack", "ClothingCyan", "ClothingLightGray"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), });
                    // https://profile-editor.vercel.app?p=M3sZZ3d6Z3b6ZY0q6ZY0S3kY2G3Z
                    profiles.Add(new IProfile() { Name = "Zombie Prussian", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("SpikedHelmet", "ClothingCyan"), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkCyan"), Legs = new IProfileClothingItem("TornPants", "ClothingDarkCyan"), Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan"), Accesory = new IProfileClothingItem("GasMask", "ClothingCyan", "ClothingLightGreen"), });
                    break;
                }
                #endregion

                #region ZombieSoldier
                case BotType.ZombieSoldier:
                {
                    // https://profile-editor.vercel.app?p=F3tZZ3edZ0udd042Z0pcZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Zombie Soldier", Gender = Gender.Female, Skin = new IProfileClothingItem("Zombie_fem", ""), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingDarkYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingBrown"), Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("Boots", "ClothingDarkRed"), });
                    // https://profile-editor.vercel.app?p=M3sZZ3ddZ0tdd032Z0pcZYYY19dZ
                    profiles.Add(new IProfile() { Name = "Zombie Soldier", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow"), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkYellow"), Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingBrown"), Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow"), Feet = new IProfileClothingItem("Boots", "ClothingDarkRed"), });
                    break;
                }
                #endregion

                #region ZombieThug
                case BotType.ZombieThug:
                {
                    // https://profile-editor.vercel.app?p=F3tZZ2z4Z1M4ZY0p5Z3mggYY18cZ
                    profiles.Add(new IProfile() { Name = "Zombie Thug", Gender = Gender.Female, Skin = new IProfileClothingItem("Zombie_fem", ""), Head = new IProfileClothingItem("Headband", "ClothingDarkRed"), ChestOver = new IProfileClothingItem("Vest_fem", "ClothingLightBlue", "ClothingLightBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown"), });
                    // https://profile-editor.vercel.app?p=M3sZZ2w4Z1L4ZY0p5Z3jggYY18cZ
                    profiles.Add(new IProfile() { Name = "Zombie Thug", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("Headband", "ClothingDarkRed"), ChestOver = new IProfileClothingItem("Vest", "ClothingLightBlue", "ClothingLightBlue"), ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkBlue"), Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue"), Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown"), });
                    break;
                }
                #endregion

                #region ZombieWorker
                case BotType.ZombieWorker:
                {
                    // https://profile-editor.vercel.app?p=M3sZZ3dqZ3bqZ2cqZ2n5Z30qlYY0vvZ
                    profiles.Add(new IProfile() { Name = "Zombie Worker", Gender = Gender.Male, Skin = new IProfileClothingItem("Zombie", ""), Head = new IProfileClothingItem("Cap", "ClothingYellow"), ChestOver = new IProfileClothingItem("Suspenders", "ClothingOrange", "ClothingLightOrange"), ChestUnder = new IProfileClothingItem("TornShirt", "ClothingOrange"), Waist = new IProfileClothingItem("SatchelBelt", "ClothingOrange"), Legs = new IProfileClothingItem("TornPants", "ClothingOrange"), Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown"), });
                    break;
                }
                #endregion
            }

            return profiles;
        }
    public enum BotType
    {
        None,

        // Tier1: Rooftop Retribution
        // Tier2: Canals Carnage
        AssassinMelee,
        AssassinRange,
        // Tier1: Subway Shakedown
        Agent, // Smart agent, weak weapon
               // Tier2: Piston Posse, Tower Trouble

        // Tier1: High Moon Holdout
        Bandido,

        // Tier1: Police Station Punchout, Warehouse Wreckage
        // Tier2: Bar Brawl
        // Tier3: Meatgrinder Begins
        Biker,
        BikerHulk,
        // Tier1: The Teahouse Job, Rooftop Retribution
        Bodyguard,
        Bodyguard2, // heavy bodyguard

        Cyborg, // grunt robot

        LabAssistant,
        Scientist,

        ClownBodyguard,
        ClownBoxer,
        ClownCowboy,
        ClownGangster,

        // Tier2: Steamship Standoff
        Cowboy,
        // Tier3: Holiday Hullabaloo
        Elf,
        Engineer,
        Farmer,
        // Tier1: Heavy Hostility
        // Tier2: Trainyard Takedown, Alley Bombardment
        // Tier3: Meatgrinder Begins
        Gangster,
        // Tier1: The Teahouse Job, Heavy Hostility
        GangsterHulk,
        Gardener,
        Hunter,
        Lumberjack,

        // Tier2: Hazardous Hustle, Piston Posse
        // Tier3: Armored Unit
        MetroCop,

        // Tier2: Plant 47 Panic
        Mutant,

        NaziLabAssistant,
        NaziMuscleSoldier,
        NaziScientist,
        NaziSoldier,

        // Tier1: Mall Mayhem
        // Tier3: Police Station Escape!
        Police,
        PoliceSWAT,

        // zombie infected survivors, turn into zombie after dying
        Survivor,

        // Tier3: Facility Ambush
        Sniper,
        // Tier2: Facility Foray
        Soldier,
        Soldier2,

        Spacer, // thug on space
        SpaceSniper,
        Stripper,
        SuicideDwarf,

        // Tier1: Storage Showdown, Rooftops Rumble, Police Station Punchout, Alley Ambush, Warehouse Wreckage, Heavy Hostility
        Thug,
        ThugHulk,

        // Like thug but with different skins, balista's faction
        Punk,
        PunkHulk,

        // Tier3: Hotel Cleanup
        Zombie,
        ZombieAgent,
        ZombieBruiser,
        ZombieChild,
        ZombieFat,
        ZombieFlamer,
        // Tier1: Chemical Crisis
        ZombieGangster,
        ZombieNinja,
        ZombiePolice,

        // Tier3: Unearthed
        ZombiePrussian,

        ZombieSoldier,
        ZombieThug,
        ZombieWorker,

        // ---BOSS---
        Agent79,
        Amos,
        Balista,
        Balloonatic,
        BazookaJane,
        Beast,
        BigMutant,
        Bobby,
        Boffin,
        Chairman,
        Cindy,
        // Tier1: The Teahouse Job
        // Tier2: Alley Bombardment, Rocket Rider
        // Tier3: Rocket Rider 2
        Demolitionist,
        Jo,
        Fireman,
        Firebug,
        Fritzliebe,
        Funnyman,
        Hacker,
        Handler,
        Hitman,

        Incinerator,
        Pyromaniac,

        // Tier1: The Teahouse Job, Rooftop Retribution
        // Tier3: Unearthed
        Kingpin,
        Kriegbar,
        MetroCop2,
        // Tier3: Meatgrinder Begins
        Meatgrinder,
        Mecha,
        MirrorMan,
        Nadja,
        Ninja,
        PoliceChief,
        President,
        Rambo,
        Raze,
        Reznor,
        // Tier3: Holiday Hullabaloo
        Santa,
        Sheriff,
        Smoker,
        SSOfficer,
        Survivalist,
        Teddybear,
        Babybear,
        ZombieEater,
        ZombieFighter,
    }
        public static List<WeaponSet> GetWeapons(BotType botType)
        {
            var weapons = new List<WeaponSet>();

            switch (botType)
            {
                #region Agent
                case BotType.Agent:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Poison,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Poison,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                        SecondaryPowerup = RangedWeaponPowerup.Poison,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Secondary = WeaponItem.UZI,
                        SecondaryPowerup = RangedWeaponPowerup.Poison,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Poison,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region Agent79
                case BotType.Agent79:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.BAZOOKA,
                        PrimaryPowerup = RangedWeaponPowerup.Object,
                        Secondary = WeaponItem.PISTOL,
                        Throwable = WeaponItem.C4,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Amos
                case BotType.Amos:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Gauss,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Gauss,
                    });
                    break;
                }
                #endregion

                #region AssassinMelee
                case BotType.AssassinMelee:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                    });
                    break;
                }
                #endregion

                #region AssassinRange
                case BotType.AssassinRange:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.UZI,
                    });
                    break;
                }
                #endregion

                #region Balista
                case BotType.Balista:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                        Primary = WeaponItem.ASSAULT,
                        Secondary = WeaponItem.UZI,
                    });
                    break;
                }
                #endregion

                #region Balloonatic
                case BotType.Balloonatic:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SMG,
                        PrimaryPowerup = RangedWeaponPowerup.Helium,
                        Secondary = WeaponItem.UZI,
                        SecondaryPowerup = RangedWeaponPowerup.Helium,
                    });
                    break;
                }
                #endregion

                #region Bandido
                case BotType.Bandido:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.MACHETE,
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.CARBINE,
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SHOTGUN,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region BazookaJane
                case BotType.BazookaJane:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.BAZOOKA,
                        PrimaryPowerup = RangedWeaponPowerup.SuicideFighter,
                        Secondary = WeaponItem.PISTOL,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Beast
                case BotType.Beast:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.MACHETE,
                        MeleePowerup = MeleeWeaponPowerup.Earthquake,
                        Throwable = WeaponItem.C4,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Biker
                case BotType.Biker:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    break;
                }
                #endregion

                #region BikerHulk
                case BotType.BikerHulk:
                {
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    break;
                }
                #endregion

                #region Bobby
                case BotType.Bobby:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Shotgun,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SAWED_OFF,
                        PrimaryPowerup = RangedWeaponPowerup.Shotgun,
                    });
                    break;
                }
                #endregion

                #region Bodyguard
                case BotType.Bodyguard:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Bodyguard2
                case BotType.Bodyguard2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    break;
                }
                #endregion

                #region Boffin
                case BotType.Boffin:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.Shrinking,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Chairman
                case BotType.Chairman:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIR,
                        MeleeHandPowerup = MeleeWeaponPowerup.Pushback,
                        Throwable = WeaponItem.C4,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Cindy
                case BotType.Cindy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Stun,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.ASSAULT,
                        PrimaryPowerup = RangedWeaponPowerup.Stun,
                    });
                    break;
                }
                #endregion

                #region ClownBodyguard
                case BotType.ClownBodyguard:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    break;
                }
                #endregion

                #region ClownBoxer
                case BotType.ClownBoxer:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region ClownCowboy
                case BotType.ClownCowboy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                        SecondaryPowerup = RangedWeaponPowerup.Blast,
                    });
                    break;
                }
                #endregion

                #region ClownGangster
                case BotType.ClownGangster:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Blast,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Blast,
                    });
                    break;
                }
                #endregion

                #region Cowboy
                case BotType.Cowboy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                    });
                    break;
                }
                #endregion

                #region Cyborg
                case BotType.Cyborg:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    break;
                }
                #endregion

                #region Demolitionist
                case BotType.Demolitionist:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SNIPER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                    });
                    break;
                }
                #endregion

                #region Elf
                case BotType.Elf:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.FLAMETHROWER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.UZI,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.FLAREGUN,
                    });
                    break;
                }
                #endregion

                #region Engineer
                case BotType.Engineer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.HAMMER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                        Primary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Farmer
                case BotType.Farmer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    break;
                }
                #endregion

                #region Firebug
                case BotType.Firebug:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Fire,
                    });
                    break;
                }
                #endregion

                #region Fireman
                case BotType.Fireman:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                        MeleePowerup = MeleeWeaponPowerup.FireTrail,
                        Throwable = WeaponItem.MOLOTOVS,
                    });
                    break;
                }
                #endregion

                #region Fritzliebe
                case BotType.Fritzliebe:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                        PrimaryPowerup = RangedWeaponPowerup.Lightning,
                    });
                    break;
                }
                #endregion

                #region Funnyman
                case BotType.Funnyman:
                {
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Megaton,
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Megaton,
                    });
                    break;
                }
                #endregion

                #region Jo
                case BotType.Jo:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BOTTLE,
                        MeleeHandPowerup = MeleeWeaponPowerup.Hurling,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Hacker
                case BotType.Hacker:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Gangster
                case BotType.Gangster:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BOTTLE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.UZI,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                    });
                    break;
                }
                #endregion

                #region GangsterHulk
                case BotType.GangsterHulk:
                {
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    break;
                }
                #endregion

                #region Gardener
                case BotType.Gardener:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.TEAPOT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    break;
                }
                #endregion

                #region Handler
                case BotType.Handler:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.WHIP,
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.SuicideDove,
                    });
                    break;
                }
                #endregion

                #region Hunter
                case BotType.Hunter:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.BOW,
                        PrimaryPowerup = RangedWeaponPowerup.Bow,
                        //PrimaryPowerup = TODO: add Bleeding powerup
                    });
                    break;
                }
                #endregion

                #region Hitman
                case BotType.Hitman:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SILENCEDPISTOL,
                    });
                    break;
                }
                #endregion

                #region Incinerator
                case BotType.Incinerator:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.Molotov,
                        Throwable = WeaponItem.MOLOTOVS,
                    });
                    break;
                }
                #endregion

                #region Kingpin
                case BotType.Kingpin:
                {
                    weapons.Add(new WeaponSet
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.GroundSlam,
                    });
                    break;
                }
                #endregion

                #region Kriegbär
                case BotType.Kriegbar:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region LabAssistant
                case BotType.LabAssistant:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        Powerup = WeaponItem.STRENGTHBOOST,
                    });
                    break;
                }
                #endregion

                #region Lumberjack
                case BotType.Lumberjack:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAINSAW,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                        MeleePowerup = MeleeWeaponPowerup.Gib,
                        Powerup = WeaponItem.STRENGTHBOOST,
                    });
                    break;
                }
                #endregion

                #region Meatgrinder
                case BotType.Meatgrinder:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAINSAW,
                        Throwable = WeaponItem.MOLOTOVS,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Mecha
                case BotType.Mecha:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region MetroCop
                case BotType.MetroCop:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.SMG,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.DARK_SHOTGUN,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOCK_BATON,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region MetroCop2
                case BotType.MetroCop2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.DARK_SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Grapeshot,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region MirrorMan
                case BotType.MirrorMan:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Mutant
                case BotType.Mutant:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region BigMutant
                case BotType.BigMutant:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                        MeleePowerup = MeleeWeaponPowerup.Splitting,
                    });
                    break;
                }
                #endregion

                #region Nadja
                case BotType.Nadja:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.PISTOL,
                        Powerup = WeaponItem.SLOWMO_10,
                        Throwable = WeaponItem.MINES,
                    });
                    break;
                }
                #endregion

                #region NaziLabAssistant
                case BotType.NaziLabAssistant:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Powerup = WeaponItem.STRENGTHBOOST,
                    });
                    break;
                }
                #endregion

                #region NaziMuscleSoldier
                case BotType.NaziMuscleSoldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region NaziScientist
                case BotType.NaziScientist:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIR,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BOTTLE,
                    });
                    break;
                }
                #endregion

                #region NaziSoldier
                case BotType.NaziSoldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.MP50,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.CARBINE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region SSOfficer
                case BotType.SSOfficer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Ninja
                case BotType.Ninja:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Police
                case BotType.Police:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Taser,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Secondary = WeaponItem.REVOLVER,
                        SecondaryPowerup = RangedWeaponPowerup.Taser,
                    });
                    break;
                }
                #endregion

                #region PoliceChief
                case BotType.PoliceChief:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Primary = WeaponItem.SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Fatigue,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Fatigue,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Fatigue,
                    });
                    break;
                }
                #endregion

                #region PoliceSWAT
                case BotType.PoliceSWAT:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Termite,
                        Throwable = WeaponItem.C4,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Termite,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.ASSAULT,
                        PrimaryPowerup = RangedWeaponPowerup.Termite,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SMG,
                        PrimaryPowerup = RangedWeaponPowerup.Termite,
                    });
                    break;
                }
                #endregion

                #region President
                case BotType.President:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.FLAGPOLE,
                    });
                    break;
                }
                #endregion

                #region Punk
                case BotType.Punk:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Delay,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.UZI,
                        SecondaryPowerup = RangedWeaponPowerup.Delay,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BASEBALL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Delay,
                    });
                    break;
                }
                #endregion

                #region PunkHulk
                case BotType.PunkHulk:
                {
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    break;
                }
                #endregion

                #region Pyromaniac
                case BotType.Pyromaniac:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.FLAMETHROWER,
                        Throwable = WeaponItem.MOLOTOVS,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.FLAREGUN,
                        SecondaryPowerup = RangedWeaponPowerup.InfiniteBouncing,
                        Throwable = WeaponItem.MOLOTOVS,
                    });
                    break;
                }
                #endregion

                #region Raze
                case BotType.Raze:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.StickyBomb,
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Termite,
                        Throwable = WeaponItem.C4,
                    });
                    break;
                }
                #endregion
                
                #region Rambo
                case BotType.Rambo:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.M60,
                        PrimaryPowerup = RangedWeaponPowerup.Minigun,
                    });
                    break;
                }
                #endregion

                #region Reznor
                case BotType.Reznor:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.BAZOOKA,
                        PrimaryPowerup = RangedWeaponPowerup.Blackhole,
                        Secondary = WeaponItem.PISTOL45,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.Blackhole,
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Blackhole,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region Santa
                case BotType.Santa:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.M60,
                        PrimaryPowerup = RangedWeaponPowerup.Present,
                        Secondary = WeaponItem.UZI,
                    });
                    break;
                }
                #endregion

                #region Scientist
                case BotType.Scientist:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    break;
                }
                #endregion

                #region Sheriff
                case BotType.Sheriff:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SHOTGUN,
                    });
                    break;
                }
                #endregion

                #region Smoker
                case BotType.Smoker:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.Smoke,
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Fatigue,
                    });
                    break;
                }
                #endregion

                #region Sniper
                case BotType.Sniper:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SNIPER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SNIPER,
                        Secondary = WeaponItem.SILENCEDPISTOL,
                    });
                    break;
                }
                #endregion

                #region Soldier
                case BotType.Soldier:
                {
                    weapons.Add(new WeaponSet());
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Soldier2
                case BotType.Soldier2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Spacer
                case BotType.Spacer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                        PrimaryPowerup = RangedWeaponPowerup.Gauss,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Gauss,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Gauss,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region SpaceSniper
                case BotType.SpaceSniper:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SNIPER,
                        PrimaryPowerup = RangedWeaponPowerup.Gauss,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SNIPER,
                        PrimaryPowerup = RangedWeaponPowerup.Gauss,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Gauss,
                    });
                    break;
                }
                #endregion

                #region Stripper
                case BotType.Stripper:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                        SecondaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                        PrimaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    break;
                }
                #endregion
                
                #region SuicideDwarf
                case BotType.SuicideDwarf:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Survivalist
                case BotType.Survivalist:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.FLAREGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Steak,
                    });
                    break;
                }
                #endregion

                #region Survivor
                case BotType.Survivor:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.MACHETE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    break;
                }
                #endregion

                #region Teddybear
                case BotType.Teddybear:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.GRENADES,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Babybear
                case BotType.Babybear:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Thug
                case BotType.Thug:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.HAMMER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                    });
                    break;
                }
                #endregion

                #region ThugHulk
                case BotType.ThugHulk:
                {
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                        MeleeHandPowerup = MeleeWeaponPowerup.Breaking,
                    });
                    break;
                }
                #endregion

                #region Zombies
                case BotType.Zombie:
                case BotType.ZombieBruiser:
                case BotType.ZombieChild:
                case BotType.ZombieFat:
                case BotType.ZombieFlamer:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region ZombieAgent
                case BotType.ZombieAgent:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SILENCEDPISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SILENCEDUZI,
                    });
                    break;
                }
                #endregion

                #region ZombieFighter
                case BotType.ZombieFighter:
                {
                    weapons.Add(new WeaponSet()
                    {
                        MeleeHandPowerup = MeleeWeaponPowerup.Serious,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region ZombieGangster
                case BotType.ZombieGangster:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region ZombieNinja
                case BotType.ZombieNinja:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                    });
                    break;
                }
                #endregion

                #region ZombiePolice
                case BotType.ZombiePolice:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.REVOLVER,
                    });
                    break;
                }
                #endregion

                #region ZombiePrussian
                case BotType.ZombiePrussian:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                        Throwable = WeaponItem.GRENADES,
                    });
                    break;
                }
                #endregion

                #region ZombieEater
                case BotType.ZombieEater:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.REVOLVER,
                        Throwable = WeaponItem.GRENADES,
                    });
                    break;
                }
                #endregion

                #region ZombieSoldier
                case BotType.ZombieSoldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.MINES,
                    });
                    break;
                }
                #endregion

                #region ZombieThug
                case BotType.ZombieThug:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.MOLOTOVS,
                    });
                    break;
                }
                #endregion

                #region ZombieWorker
                case BotType.ZombieWorker:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.HAMMER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAINSAW,
                    });
                    break;
                }
                #endregion
            }

            return weapons;
        }
    public static class Command
    {
        public static void OnUserMessage(UserMessageCallbackArgs args)
        {
            if (!args.User.IsHost || !args.IsCommand || (args.Command != "BOTEXTENDED" && args.Command != "BE"))
            {
                return;
            }

            var message = args.CommandArguments.ToLowerInvariant();
            var words = message.Split(' ');
            var command = words.FirstOrDefault();
            var arguments = words.Skip(1);

            switch (command)
            {
                case "?":
                case "h":
                case "help":
                    PrintHelp();
                    break;

                case "v":
                case "version":
                    PrintVersion();
                    break;

                case "lf":
                case "listfaction":
                    ListBotFaction();
                    break;

                case "lb":
                case "listbot":
                    ListBotType();
                    break;

                case "ff":
                case "findfaction":
                    FindFaction(arguments);
                    break;

                case "s":
                case "settings":
                    ShowCurrentSettings();
                    break;

                case "bc":
                case "botcount":
                    SetBotCount(arguments);
                    break;

                case "c":
                case "create":
                    CreateNewBot(arguments);
                    break;

                case "f":
                case "faction":
                    SetFactions(arguments);
                    break;

                case "fr":
                case "factionrotation":
                    SetFactionRotationInterval(arguments);
                    break;

                case "nf":
                case "nextfaction":
                    SkipCurrentFaction();
                    break;

                case "sp":
                case "setplayer":
                    SetPlayer(arguments);
                    break;

                case "sw":
                case "setweapon":
                    SetWeapon(arguments);
                    break;

                case "cp":
                case "clearplsettings":
                    ClearPlayerSettings();
                    break;

                case "st":
                case "stats":
                    PrintStatistics();
                    break;

                case "cst":
                case "clearstats":
                    ClearStatistics();
                    break;

                default:
                    ScriptHelper.PrintMessage("Invalid command: " + command, BeColors.ERROR_COLOR);
                    break;
            }
        }

        private static void PrintHelp()
        {
            ScriptHelper.PrintMessage("--BotExtended help--", BeColors.ERROR_COLOR);
            ScriptHelper.PrintMessage("/<botextended|be> [help|h|?]: Print this help");
            ScriptHelper.PrintMessage("/<botextended|be> [version|v]: Print the current version");
            ScriptHelper.PrintMessage("/<botextended|be> [listfaction|lf]: List all bot factions");
            ScriptHelper.PrintMessage("/<botextended|be> [listbot|lb]: List all bot types");
            ScriptHelper.PrintMessage("/<botextended|be> [findfaction|ff] <query>: Find all bot factions that match query");
            ScriptHelper.PrintMessage("/<botextended|be> [settings|s]: Display current script settings");
            ScriptHelper.PrintMessage("/<botextended|be> [create|c] <BotType> [Team|_] [Count]: Create new bot");
            ScriptHelper.PrintMessage("/<botextended|be> [botcount|bc] <0-10>: Set maximum bot count");
            ScriptHelper.PrintMessage("/<botextended|be> [faction|f] [Team] [-e] <names|indexes|all>: Choose a list of faction by either name or index to randomly spawn on startup");
            ScriptHelper.PrintMessage("/<botextended|be> [factionrotation|fr] <1-10>: Set faction rotation interval for every n rounds");
            ScriptHelper.PrintMessage("/<botextended|be> [nextfaction|nf]: Change the faction in the currrent faction rotation to the next faction");
            ScriptHelper.PrintMessage("/<botextended|be> [setplayer|sp] <player> <BotType>: Set <player> outfit, weapons and modifiers to <BotType>");
            ScriptHelper.PrintMessage("/<botextended|be> [setweapon|sw] <player> <WeaponItem> <Powerup>: Give <player> powerup weapon");
            ScriptHelper.PrintMessage("/<botextended|be> [clearplsettings|cp]: Clear all player settings");
            ScriptHelper.PrintMessage("/<botextended|be> [stats|st]: List all bot types and bot factions stats");
            ScriptHelper.PrintMessage("/<botextended|be> [clearstats|cst]: Clear all bot types and bot factions stats");
        }

        private static bool TryParseTeam(string arg, out PlayerTeam result, PlayerTeam defaultValue = PlayerTeam.Independent)
        {
            switch (arg)
            {
                case "t1":
                    result = PlayerTeam.Team1;
                    return true;
                case "t2":
                    result = PlayerTeam.Team2;
                    return true;
                case "t3":
                    result = PlayerTeam.Team3;
                    return true;
                case "t4":
                    result = PlayerTeam.Team4;
                    return true;
                case "t0":
                    result = PlayerTeam.Independent;
                    return true;
                default:
                    result = defaultValue;
                    return false;
            }
        }

        private static bool TryParsePlayer(string args, out IPlayer result)
        {
            foreach (var player in Game.GetPlayers())
            {
                if (player.IsRemoved) continue;

                if (player.IsUser)
                {
                    var playerIndex = -1;
                    var playerSlotIndex = player.GetUser().GameSlotIndex;

                    if (int.TryParse(args, out playerIndex))
                    {
                        if (playerSlotIndex == playerIndex)
                        {
                            result = player;
                            return true;
                        }
                    }
                    else
                    {
                        if (player.Name.ToLower() == args)
                        {
                            result = player;
                            return true;
                        }
                    }
                }
                else
                {
                    if (player.Name.ToLower() == args)
                    {
                        result = player;
                        return true;
                    }
                }
            }
            result = null;
            return false;
        }

        private static void PrintVersion()
        {
            ScriptHelper.PrintMessage("--BotExtended version--", BeColors.ERROR_COLOR);
            ScriptHelper.PrintMessage("v" + Constants.CURRENT_VERSION);
        }

        private static IEnumerable<string> GetFactionNames()
        {
            var factions = BotHelper.GetAvailableBotFactions();

            foreach (var faction in factions)
            {
                yield return ((int)faction).ToString() + ": " + SharpHelper.EnumToString(faction);
            }
        }

        private static void ListBotFaction()
        {
            ScriptHelper.PrintMessage("--BotExtended list faction--", BeColors.ERROR_COLOR);

            foreach (var factionName in GetFactionNames())
            {
                ScriptHelper.PrintMessage(factionName, BeColors.WARNING_COLOR);
            }
        }

        private static void ListBotType()
        {
            ScriptHelper.PrintMessage("--BotExtended list bot type--", BeColors.ERROR_COLOR);

            foreach (var botType in SharpHelper.EnumToList<BotType>())
            {
                ScriptHelper.PrintMessage((int)botType + ": " + SharpHelper.EnumToString(botType), BeColors.WARNING_COLOR);
            }
        }

        private static void FindFaction(IEnumerable<string> arguments)
        {
            var query = arguments.FirstOrDefault();
            if (query == null) return;

            ScriptHelper.PrintMessage("--BotExtended find results--", BeColors.ERROR_COLOR);

            foreach (var factionName in GetFactionNames())
            {
                var name = factionName.ToLowerInvariant();
                if (name.Contains(query))
                    ScriptHelper.PrintMessage(factionName, BeColors.WARNING_COLOR);
            }
        }

        private static void ShowCurrentSettings()
        {
            ScriptHelper.PrintMessage("--BotExtended settings--", BeColors.ERROR_COLOR);

            var settings = Settings.Get();

            ScriptHelper.PrintMessage("-Player settings", BeColors.WARNING_COLOR);

            var activeUsers = ScriptHelper.GetActiveUsersByAccountID();

            if (settings.PlayerSettings.Count() == 0)
            {
                ScriptHelper.PrintMessage("<Empty>");
            }
            else
            {
                foreach (var ps in settings.PlayerSettings)
                {
                    var playerSettings = PlayerSettings.Parse(ps);
                    var accountID = playerSettings.AccountID;
                    var name = activeUsers.ContainsKey(accountID) ? activeUsers[accountID].Name : accountID;

                    ScriptHelper.PrintMessage(name + ": " + playerSettings.BotType);
                    foreach (var w in playerSettings.Weapons)
                    {
                        ScriptHelper.PrintMessage(" - " + w[0] + " " + w[1]);
                    }
                }
            }

            ScriptHelper.PrintMessage("-Factions", BeColors.WARNING_COLOR);

            // TODO: show except for all faction minus a small amount of others
            foreach (var team in new PlayerTeam[] { PlayerTeam.Team1, PlayerTeam.Team2, PlayerTeam.Team3, PlayerTeam.Team4, })
            {
                var factions = settings.BotFactions[team];
                var currentFaction = settings.CurrentFaction[team];

                ScriptHelper.PrintMessage(" -" + team, BeColors.WARNING_COLOR);
                ScriptHelper.PrintMessage("  -Factions: ", BeColors.WARNING_COLOR);

                if (factions.Count == SharpHelper.EnumToArray<BotFaction>().Count() - 1 /* minus BotFaction.None */)
                {
                    ScriptHelper.PrintMessage("  ALL");
                }
                else
                {
                    foreach (var botFaction in factions)
                    {
                        var index = (int)botFaction;
                        ScriptHelper.PrintMessage("  " + index + ": " + botFaction);
                    }
                }

                ScriptHelper.PrintMessage("  -Current faction: " + currentFaction, BeColors.WARNING_COLOR);
            }

            var rotationInterval = settings.FactionRotationEnabled ? settings.FactionRotationInterval.ToString() : "Disabled";
            var roundsUntilRotation = settings.FactionRotationEnabled ? settings.RoundsUntilFactionRotation.ToString() : "N/a";

            ScriptHelper.PrintMessage("-Faction rotation interval: " + rotationInterval, BeColors.WARNING_COLOR);
            ScriptHelper.PrintMessage("-Rounds until rotation: " + roundsUntilRotation, BeColors.WARNING_COLOR);
            ScriptHelper.PrintMessage("-Max bot count: " + settings.BotCount, BeColors.WARNING_COLOR);
        }

        public static void CreateNewBot(IEnumerable<string> arguments)
        {
            if (arguments.Count() < 1)
                return;

            var botTypeStr = arguments.First();
            var botType = BotType.None;

            if (SharpHelper.TryParseEnum(botTypeStr, out botType))
            {
                arguments = arguments.Skip(1);
            }
            else
            {
                ScriptHelper.PrintMessage("--BotExtended spawn bot--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid query: " + botTypeStr, BeColors.WARNING_COLOR);
                return;
            }

            var team = PlayerTeam.Independent;
            if (arguments.Any())
            {
                if (TryParseTeam(arguments.First(), out team))
                    arguments = arguments.Skip(1);
            }

            var count = 1;
            if (arguments.Any())
            {
                if (int.TryParse(arguments.First(), out count))
                    count = (int)MathHelper.Clamp(count, Constants.BOT_SPAWN_COUNT_MIN, Constants.BOT_SPAWN_COUNT_MAX);
                else
                    count = 1;
            }

            for (var i = 0; i < count; i++)
            {
                BotManager.SpawnBot(botType, player: null, team: team, ignoreFullSpawner: true);
            }

            // Dont use the string name in case it just an index
            var bot = count > 1 ? " bots" : " bot";
            ScriptHelper.PrintMessage("Spawned " + count + " " + SharpHelper.EnumToString(botType) + bot + " to " + team);
        }

        private static void SetBotCount(IEnumerable<string> arguments)
        {
            if (arguments.Count() != 1)
                return;

            var countStr = arguments.First();
            var count = 1;
            if (arguments.Any())
            {
                if (int.TryParse(countStr, out count))
                    count = (int)MathHelper.Clamp(count, Constants.BOT_COUNT_MIN, Constants.BOT_COUNT_MAX);
                else
                {
                    ScriptHelper.PrintMessage("[Botextended] Invalid query: " + countStr, BeColors.WARNING_COLOR);
                    return;
                }
            }

            BotHelper.Storage.SetItem(BotHelper.StorageKey("BOT_COUNT"), count);
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void SetFactions(IEnumerable<string> arguments)
        {
            var allBotFactions = SharpHelper.EnumToList<BotFaction>()
                .Select((f) => SharpHelper.EnumToString(f))
                .ToList();
            var botFactions = new List<string>();
            var excludeFlag = false;
            BotFaction botFaction;

            if (arguments.Count() == 0)
            {
                ScriptHelper.PrintMessage("--BotExtended setfaction--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid command: Argument is empty", BeColors.WARNING_COLOR);
                return;
            }

            var team = PlayerTeam.Team4;
            if (TryParseTeam(arguments.First(), out team, PlayerTeam.Team4))
            {
                arguments = arguments.Skip(1);
            }

            if (arguments.Count() == 1 && (arguments.Single() == "all" || arguments.Single() == "none"))
            {
                if (arguments.Single() == "all")
                    botFactions = new List<string> { "All" };
                if (arguments.Single() == "none")
                    botFactions = new List<string> { "None" };
            }
            else
            {
                if (arguments.First() == "-e")
                {
                    excludeFlag = true;
                    arguments = arguments.Skip(1);
                }
                foreach (var arg in arguments)
                {
                    if (arg == "none")
                    {
                        ScriptHelper.PrintMessage("--BotExtended setfaction--", BeColors.ERROR_COLOR);
                        ScriptHelper.PrintMessage("Invalid argument: Cannot mix None with other options", BeColors.WARNING_COLOR);
                        return;
                    }

                    if (SharpHelper.TryParseEnum(arg, out botFaction))
                    {
                        botFactions.Add(SharpHelper.EnumToString(botFaction));
                    }
                    else
                    {
                        ScriptHelper.PrintMessage("--BotExtended setfaction--", BeColors.ERROR_COLOR);
                        ScriptHelper.PrintMessage("Invalid argument: " + arg, BeColors.WARNING_COLOR);
                        return;
                    }
                }
            }

            if (excludeFlag)
            {
                botFactions = allBotFactions.Where((f) => !botFactions.Contains(f)).ToList();
            }

            BotHelper.Storage.SetItem(BotHelper.StorageKey("BOT_FACTIONS_" + team), botFactions.Distinct().ToArray());
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void SetFactionRotationInterval(IEnumerable<string> arguments)
        {
            var firstArg = arguments.FirstOrDefault();
            if (firstArg == null) return;
            int value = -1;

            if (int.TryParse(firstArg, out value))
            {
                value = (int)MathHelper.Clamp(value, 0, 10);
                BotHelper.Storage.SetItem(BotHelper.StorageKey("FACTION_ROTATION_INTERVAL"), value);
                BotHelper.Storage.SetItem(BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION"), value);
                ScriptHelper.PrintMessage("[Botextended] Update successfully");
            }
            else
                ScriptHelper.PrintMessage("[Botextended] Invalid query: " + firstArg, BeColors.WARNING_COLOR);
        }

        private static void SkipCurrentFaction()
        {
            BotHelper.Storage.SetItem(BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION"), 1);
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void UpdatePlayerSettings(IPlayer player, Func<PlayerSettings, PlayerSettings> update)
        {
            if (!player.IsUser) return;
            var accountID = player.GetUser().AccountID;
            if (string.IsNullOrEmpty(accountID)) return;

            var key = BotHelper.StorageKey("PLAYER_SETTINGS");
            string[] allPlayerSettings;

            if (BotHelper.Storage.TryGetItemStringArr(key, out allPlayerSettings))
            {
                var isUpdate = false;
                for (var i = 0; i < allPlayerSettings.Length; i++)
                {
                    if (allPlayerSettings[i].StartsWith(accountID))
                    {
                        var oldPlayerSettings = PlayerSettings.Parse(allPlayerSettings[i]);
                        var newPlayerSettings = update(oldPlayerSettings);

                        isUpdate = true;

                        if (newPlayerSettings.IsEmpty())
                        {
                            var r = allPlayerSettings.ToList();
                            r.RemoveAt(i);
                            allPlayerSettings = r.ToArray();
                        }
                        else
                            allPlayerSettings[i] = newPlayerSettings.ToString();
                        break;
                    }
                }

                if (!isUpdate)
                {
                    var a = allPlayerSettings.ToList();
                    var newPlayerSettings = update(PlayerSettings.Empty(accountID));

                    if (!newPlayerSettings.IsEmpty())
                    {
                        a.Add(newPlayerSettings.ToString());
                        allPlayerSettings = a.ToArray();
                    }
                }
            }
            else
            {
                var newPlayerSettings = update(PlayerSettings.Empty(accountID));

                if (!newPlayerSettings.IsEmpty())
                {
                    allPlayerSettings = new string[] { newPlayerSettings.ToString() };
                }
            }

            BotHelper.Storage.SetItem(key, allPlayerSettings);
        }

        public static void SetPlayer(IEnumerable<string> arguments)
        {
            if (arguments.Count() < 2)
            {
                ScriptHelper.PrintMessage("--BotExtended setplayer--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid arguments: " + string.Join(" ", arguments), BeColors.WARNING_COLOR);
                return;
            }

            var playerArg = string.Join(" ", arguments.Take(arguments.Count() - 1));
            IPlayer player;
            if (!TryParsePlayer(playerArg, out player))
            {
                ScriptHelper.PrintMessage("--BotExtended setplayer--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("There is no player " + playerArg, BeColors.WARNING_COLOR);
                return;
            }
            else
                arguments = arguments.Skip(arguments.Count() - 1);

            var botTypeArg = arguments.First();
            BotType botType;
            if (!SharpHelper.TryParseEnum(botTypeArg, out botType))
            {
                ScriptHelper.PrintMessage("--BotExtended setplayer--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid BotType: " + botTypeArg, BeColors.WARNING_COLOR);
                return;
            }

            UpdatePlayerSettings(player, (old) => old.Update(botType.ToString()));

            if (botType == BotType.None)
                ScriptHelper.PrintMessage("Player " + player.Name + " will be reset next round");
            else
                BotHelper.SetPlayer(player, botType);
        }

        public static void SetWeapon(IEnumerable<string> arguments)
        {
            if (arguments.Count() == 2)
                arguments = arguments.Concat(new string[] { "None" });

            if (arguments.Count() < 3)
            {
                ScriptHelper.PrintMessage("--BotExtended setweapon--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid arguments: " + string.Join(" ", arguments), BeColors.WARNING_COLOR);
                return;
            }

            var playerArg = string.Join(" ", arguments.Take(arguments.Count() - 2));
            IPlayer player;
            if (!TryParsePlayer(playerArg, out player))
            {
                ScriptHelper.PrintMessage("--BotExtended setweapon--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("There is no player " + playerArg, BeColors.WARNING_COLOR);
                return;
            }
            else
                arguments = arguments.Skip(arguments.Count() - 2);

            var weaponItemArg = arguments.First();
            WeaponItem weaponItem;
            if (!SharpHelper.TryParseEnum(weaponItemArg, out weaponItem))
            {
                ScriptHelper.PrintMessage("--BotExtended setweapon--", BeColors.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid WeaponItem: " + weaponItemArg, BeColors.WARNING_COLOR);
                return;
            }
            else
            {
                weaponItemArg = weaponItem.ToString();
                arguments = arguments.Skip(1);
            }

            var powerupArg = arguments.First();
            var type = Mapper.GetWeaponItemType(weaponItem);
            if (type == WeaponItemType.Rifle || type == WeaponItemType.Handgun || type == WeaponItemType.Thrown)
            {
                RangedWeaponPowerup powerup;
                if (!SharpHelper.TryParseEnum(powerupArg, out powerup))
                {
                    ScriptHelper.PrintMessage("--BotExtended setweapon--", BeColors.ERROR_COLOR);
                    ScriptHelper.PrintMessage("Invalid range powerup: " + powerupArg, BeColors.WARNING_COLOR);
                    return;
                }
                else
                    powerupArg = powerup.ToString();
            }
            if (type == WeaponItemType.Melee || type == WeaponItemType.NONE)
            {
                MeleeWeaponPowerup powerup;
                if (!SharpHelper.TryParseEnum(powerupArg, out powerup))
                {
                    ScriptHelper.PrintMessage("--BotExtended setweapon--", BeColors.ERROR_COLOR);
                    ScriptHelper.PrintMessage("Invalid melee powerup: " + powerupArg, BeColors.WARNING_COLOR);
                    return;
                }
                else
                    powerupArg = powerup.ToString();
            }

            if (weaponItemArg == "NONE" && powerupArg == "None")
                ScriptHelper.PrintMessage("Player " + player.Name + "'s weapon will be reset next round");
            UpdatePlayerSettings(player, (old) => old.Update(type, weaponItemArg, powerupArg));
            BotHelper.SetWeapon(player, weaponItemArg, powerupArg);
        }

        private static void ClearPlayerSettings()
        {
            BotHelper.Storage.RemoveItem(BotHelper.StorageKey("PLAYER_SETTINGS"));
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void PrintStatistics()
        {
            ScriptHelper.PrintMessage("--BotExtended statistics--", BeColors.ERROR_COLOR);

            var botFactions = BotHelper.GetAvailableBotFactions();
            ScriptHelper.PrintMessage("[WinCount] [TotalMatch] [SurvivalRate]", BeColors.WARNING_COLOR);
            foreach (var botFaction in botFactions)
            {
                var factionSet = GetFactionSet(botFaction);
                for (var i = 0; i < factionSet.Factions.Count; i++)
                {
                    var factionKey = BotHelper.StorageKey(botFaction, i) + "_WIN_STATS";
                    int[] winStats;

                    if (BotHelper.Storage.TryGetItemIntArr(factionKey, out winStats))
                    {
                        var winCount = winStats[0];
                        var totalMatch = winStats[1];
                        var survivalRate = (float)winCount / totalMatch;
                        var survivalRateStr = survivalRate.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture);

                        ScriptHelper.PrintMessage(SharpHelper.EnumToString(botFaction) + " " + i + ": "
                            + " " + winCount + " " + totalMatch + " " + survivalRateStr);
                    }
                }
            }
        }

        private static void ClearStatistics()
        {
            var botFactions = BotHelper.GetAvailableBotFactions();
            foreach (var botFaction in botFactions)
            {
                var factionSet = GetFactionSet(botFaction);
                for (var i = 0; i < factionSet.Factions.Count; i++)
                {
                    var factionKey = BotHelper.StorageKey(botFaction, i) + "_WIN_STATS";
                    BotHelper.Storage.RemoveItem(factionKey);
                }
            }

            ScriptHelper.PrintMessage("[Botextended] Clear successfully");
        }
    }
    public static class Constants
    {
        internal const int BOT_COUNT_MIN = 1;
        internal const int BOT_COUNT_MAX = 10;
        internal const float CORPSE_MAX_HEALTH = 150;

        internal const float MAX_WALK_SPEED = 2.5f;
        internal const float MAX_SPRINT_SPEED = 3.5f;

        internal const int BOT_SPAWN_COUNT_MIN = 1;
        internal const int BOT_SPAWN_COUNT_MAX = 15;
        internal static readonly bool IS_ME_ALONE = ScriptHelper.IsMeAlone();

        internal const int BOSS_FACTION_START_INDEX = 200;
        internal const string CURRENT_VERSION = "5.16.1";
        internal const string STORAGE_KEY_PREFIX = "BE_";

        // normal explosion radius: bazooka rockets, grenades, mines, explosive barrels, propane tank
        internal const float ExplosionRadius = 38.5f;

        // default settings value
        internal static readonly string[] DEFAULT_FACTIONS = new string[] { "All" };
        internal const int DEFAULT_MAX_BOT_COUNT = 5;
        internal const int DEFAULT_FACTION_ROTATION_INTERVAL = 3;

        // boolean value (1|0) for fields like InfiniteAmmo, CanBurn, MeleeStunImmunity...
        internal const int TOGGLE_ON = 1;
        internal const int TOGGLE_OFF = 0;
        internal static readonly WeaponItemType[] WeaponItemTypes = new WeaponItemType[]
        {
            WeaponItemType.Melee, WeaponItemType.Rifle, WeaponItemType.Handgun, WeaponItemType.Thrown, WeaponItemType.Powerup, WeaponItemType.InstantPickup,
        };

        internal static readonly string[] Giblets = new string[]
        {
            "Giblet00",
            "Giblet01",
            "Giblet02",
            "Giblet03",
            "Giblet04",
        };

        internal static readonly string[] WeaponNames = new string[]
        {
            "WpnPistol",
            "WpnPistol45",
            "WpnSilencedPistol",
            "WpnMachinePistol",
            "WpnMagnum",
            "WpnRevolver",
            "WpnPumpShotgun",
            "WpnDarkShotgun",
            "WpnTommygun",
            "WpnSMG",
            "WpnM60",
            "WpnPipeWrench",
            "WpnChain",
            "WpnWhip",
            "WpnHammer",
            "WpnKatana",
            "WpnMachete",
            "WpnChainsaw",
            "WpnKnife",
            "WpnSawedoff",
            "WpnBat",
            "WpnBaton",
            "WpnShockBaton",
            "WpnLeadPipe",
            "WpnUzi",
            "WpnSilencedUzi",
            "WpnBazooka",
            "WpnAxe",
            "WpnAssaultRifle",
            "WpnMP50",
            "WpnSniperRifle",
            "WpnCarbine",
            "WpnFlamethrower",
            "ItemPills",
            "ItemMedkit",
            "ItemSlomo5",
            "ItemSlomo10",
            "ItemStrengthBoost",
            "ItemSpeedBoost",
            "ItemLaserSight",
            "ItemBouncingAmmo",
            "ItemFireAmmo",
            "WpnGrenades",
            "WpnMolotovs",
            "WpnMines",
            "WpnShuriken",
            "WpnBow",
            "WpnFlareGun",
            "WpnGrenadeLauncher",
        };

        internal static CollisionFilter NoCollision
        {
            get
            {
                return new CollisionFilter()
                {
                    AboveBits = 0,
                    CategoryBits = 0,
                    MaskBits = 0,
                    AbsorbProjectile = false,
                    BlockExplosions = false,
                    BlockFire = false,
                    BlockMelee = false,
                    ProjectileHit = false,
                };
            }
        }
    }

    public struct BeColors
    {
        public static readonly Color Team1 = new Color(64, 64, 128);
        public static readonly Color Team2 = new Color(128, 40, 40);
        public static readonly Color Team3 = new Color(0, 112, 0);
        public static readonly Color Team4 = new Color(112, 112, 0);

        public static readonly Color Red = new Color(128, 32, 32);
        public static readonly Color Orange = new Color(255, 128, 24);

        public static readonly Color MESSAGE_COLOR = new Color(24, 238, 200);
        public static readonly Color ERROR_COLOR = new Color(244, 77, 77);
        public static readonly Color WARNING_COLOR = new Color(249, 191, 11);
    }

    // PlayerCommandFaceDirection is too long
    public enum FaceDirection { None, Left, Right, }

    public enum ClothingType
    {
        Accesory,
        ChestOver,
        ChestUnder,
        Feet,
        Hands,
        Head,
        Legs,
        Waist,
    }

    /// <summary>
    /// Health range: 1-9999
    /// <para/>
    /// 
    /// Hacker = 400
    /// UltraStrong = 300
    /// ExtremelyStrong = 250
    /// VeryStrong = 200
    /// Strong = 150
    /// <para/>
    /// 
    /// AboveNormal = 125
    /// Normal = 100
    /// BelowNormal = 80
    /// <para/>
    /// 
    /// Weak = 65
    /// VeryWeak = 50
    /// ExtremelyWeak = 35
    /// EmbarrassinglyWeak = 20
    /// BarelyAny = 5
    /// </summary>
    public static class Health
    {
        internal const int Hacker = 400;
        internal const int UltraStrong = 300;
        internal const int ExtremelyStrong = 250;
        internal const int VeryStrong = 200;
        internal const int Strong = 150;
        internal const int AboveNormal = 125;
        internal const int Normal = 100;
        internal const int BelowNormal = 80;
        internal const int Weak = 65;
        internal const int VeryWeak = 50;
        internal const int ExtremelyWeak = 35;
        internal const int EmbarrassinglyWeak = 20;
        internal const int BarelyAny = 5;
    }

    /// <summary>
    /// Energy range: 1-9999
    /// <para/>
    /// 
    /// Hacker = 400
    /// UltraHigh = 300
    /// ExtremelyHigh = 250
    /// VeryHigh = 200
    /// High = 150
    /// <para/>
    /// 
    /// AboveNormal = 125
    /// Normal = 100
    /// BelowNormal = 80
    /// <para/>
    /// 
    /// Low = 65
    /// VeryLow = 50
    /// ExtremelyLow = 35
    /// EmbarrassinglyLow = 20
    /// BarelyAny = 5
    /// </summary>
    public static class Stamina
    {
        internal const int Hacker = 400;
        internal const int UltraHigh = 300;
        internal const int ExtremelyHigh = 250;
        internal const int VeryHigh = 200;
        internal const int High = 150;
        internal const int AboveNormal = 125;
        internal const int Normal = 100;
        internal const int BelowNormal = 80;
        internal const int Low = 65;
        internal const int VeryLow = 50;
        internal const int ExtremelyLow = 35;
        internal const int EmbarrassinglyLow = 20;
        internal const int BarelyAny = 5;
    }

    /// <summary>
    /// Speed range: 0.5-2.0
    /// <para/>
    /// 
    /// Hacker = 2
    /// ExtremelyFast = 1.5
    /// VeryFast = 1.35
    /// Fast = 1.2
    /// <para/>
    /// 
    /// AboveNormal = 1.1
    /// Normal = 1
    /// BelowNormal = 0.9
    /// <para/>
    /// 
    /// Slow = 0.8
    /// VerySlow = 0.7
    /// ExtremelySlow = 0.6
    /// BarelyAny = 0.5
    /// </summary>
    public static class Speed
    {
        internal const float Hacker = 2f;
        internal const float ExtremelyFast = 1.5f;
        internal const float VeryFast = 1.35f;
        internal const float Fast = 1.2f;
        internal const float AboveNormal = 1.1f;
        internal const float Normal = 1f;
        internal const float BelowNormal = .9f;
        internal const float Slow = .8f;
        internal const float VerySlow = .7f;
        internal const float ExtremelySlow = .6f;
        internal const float BarelyAny = .5f;
    }

    /// <summary>
    /// Size range: 0.75-1.25
    /// <para/>
    /// 
    /// Chonky = 1.25
    /// ExtremelyBig = 1.2
    /// VeryBig = 1.15
    /// Big = 1.1
    /// <para/>
    /// 
    /// AboveNormal = 1.05
    /// Normal = 1
    /// BelowNormal = 0.95
    /// <para/>
    /// 
    /// Small = 0.9
    /// VerySmall = 0.85
    /// ExtremelySmall = 0.8
    /// Tiny = 0.75
    /// </summary>
    public static class Size
    {
        internal const float Chonky = 1.25f;
        internal const float ExtremelyBig = 1.2f;
        internal const float VeryBig = 1.15f;
        internal const float Big = 1.1f;
        internal const float AboveNormal = 1.05f;
        internal const float Normal = 1f;
        internal const float BelowNormal = .95f;
        internal const float Small = .9f;
        internal const float VerySmall = .85f;
        internal const float ExtremelySmall = .8f;
        internal const float Tiny = .75f;
    }

    /// <summary>
    /// Melee force range: 0-10
    /// <para/>
    /// 
    /// UltraStrong = 3
    /// ExtremelyStrong = 2
    /// VeryStrong = 1.75
    /// Strong = 1.5
    /// <para/>
    /// 
    /// AboveNormal = 1.25
    /// Normal = 1
    /// Weak = 0.5
    /// None = 0
    /// </summary>
    public static class MeleeForce
    {
        internal const float UltraStrong = 3f;
        internal const float ExtremelyStrong = 2f;
        internal const float VeryStrong = 1.75f;
        internal const float Strong = 1.5f;
        internal const float AboveNormal = 1.25f;
        internal const float Normal = 1f;
        internal const float Weak = 0.5f;
        internal const float None = 0f;
    }

    /// <summary>
    /// EnergyRecharge range: 0-100
    /// <para/>
    /// 
    /// Quick = 1.5
    /// Normal = 1
    /// Slow = 0.5
    /// </summary>
    public static class EnergyRecharge
    {
        internal const float Quick = 1.5f;
        internal const float Normal = 1f;
        internal const float Slow = .5f;
    }

    /// <summary>
    /// Damage range: 0-100. Apply to all fields related to damage dealt like
    /// ProjectileDamageDealtModifier, MeleeDamageDealtModifier...
    /// <para/>
    /// 
    /// OnePunch = 10
    /// UltraHigh = 5
    /// ExtremelyHigh = 2
    /// VeryHigh = 1.5
    /// High = 1.25
    /// FairlyHigh = 1.2
    /// AboveNormal = 1.1
    /// <para/>
    /// 
    /// Normal = 1
    /// <para/>
    /// 
    /// BelowNormal = 0.9
    /// FairlyLow = 0.8
    /// Low = 0.75
    /// VeryLow = 0.5
    /// ExtremelyLow = 0.25
    /// UltraLow = 0.1
    /// None = 0
    /// </summary>
    public static class DamageDealt
    {
        internal const float OnePunch = 10f;
        internal const float UltraHigh = 5f;
        internal const float ExtremelyHigh = 2f;
        internal const float VeryHigh = 1.5f;
        internal const float High = 1.25f;
        internal const float FairlyHigh = 1.2f;
        internal const float AboveNormal = 1.1f;
        internal const float Normal = 1f;
        internal const float BelowNormal = .9f;
        internal const float FairlyLow = .8f;
        internal const float Low = .75f;
        internal const float VeryLow = .5f;
        internal const float ExtremelyLow = .25f;
        internal const float UltraLow = .1f;
        internal const float None = 0f;
    }

    /// <summary>
    /// Damage range: 0-100. Apply to all fields related to damage taken like
    /// ExplosionDamageTakenModifier, ProjectileCritChanceTakenModifier...
    /// <para/>
    /// 
    /// Defenseless = 10
    /// UltraVulnerable = 5
    /// ExtremelyVulnerable = 2
    /// VeryVulnerable = 1.5
    /// Vulnerable = 1.25
    /// FairlyVulnerable = 1.2
    /// SlightlyVulnerable = 1.1
    /// <para/>
    /// 
    /// Normal = 1
    /// <para/>
    /// 
    /// SlightlyResistant = 0.9
    /// FairlyResistant = 0.8
    /// Resistant = 0.75
    /// VeryResistant = 0.5
    /// ExtremelyResistant = 0.25
    /// UltraResistant = 0.1
    /// Unbeatable = 0
    /// </summary>
    public static class DamageTaken
    {
        internal const float Defenseless = 10f;
        internal const float UltraVulnerable = 5f;
        internal const float ExtremelyVulnerable = 2f;
        internal const float VeryVulnerable = 1.5f;
        internal const float Vulnerable = 1.25f;
        internal const float FairlyVulnerable = 1.2f;
        internal const float SlightlyVulnerable = 1.1f;
        internal const float Normal = 1f;
        internal const float SlightlyResistant = .9f;
        internal const float FairlyResistant = .8f;
        internal const float Resistant = .75f;
        internal const float VeryResistant = .5f;
        internal const float ExtremelyResistant = .25f;
        internal const float UltraResistant = .1f;
        internal const float Unbeatable = 0f;
    }

    public static class ItemDropMode
    {
        internal const int Normal = 0;
        internal const int Break = 1;
        internal const int Remove = 2;
    }

    public static class CategoryBits
    {
        internal const ushort None = 0x0000;

        /// <summary>
        /// Static impassable objects (wall, ground, plate...)
        /// </summary>
        internal const ushort StaticGround = 0x0001;
        internal const ushort DynamicPlatform = 0x0002;
        internal const ushort Player = 0x0004;
        /// <summary>
        /// Dynamic objects that can collide with player without setting IObject.TrackAsMissle(true)
        /// Example: table, chair, couch, crate...
        /// </summary>
        internal const ushort DynamicG1 = 0x0008;
        /// <summary>
        /// Dynamic objects that cannot collide with player but can collide with other dynamic objects
        /// Set IObject.TrackAsMissle(true) to make them collide with players
        /// Example: glass, cup, bottle, weapons on map...
        /// </summary>
        internal const ushort DynamicG2 = 0x0010;
        internal const ushort Dynamic = DynamicG1 + DynamicG2;

        internal const ushort Items = 0x0020;
        internal const ushort Debris = 0x0010;
        internal const ushort DynamicsThrown = 0x8000;
    }

    public static class WpnSearchRange
    {
        public const float Infinite = 0f;
        public const float InSight = 80f;
        public const float Nearby = 10f;
    }
    public enum FlipDirection
    {
        Horizontal,
        Vertical,
    }
    class InfectedCorpse
    {
        public static int TimeToTurnIntoZombie = 5000;
        public int UniqueID { get; private set; }
        public BotType Type { get; set; }
        public BotFaction Faction { get; set; }
        public IPlayer Body { get; set; }
        public float DeathTime { get; private set; }
        public bool IsTurningIntoZombie { get; private set; }
        public bool CanTurnIntoZombie { get; private set; }
        public bool IsZombie { get; private set; }

        public InfectedCorpse(IPlayer player, BotType botType, BotFaction faction)
        {
            UniqueID = player.UniqueID;
            Type = botType;
            Faction = faction;
            Body = player;
            IsTurningIntoZombie = false;
            IsZombie = false;
            CanTurnIntoZombie = true;
            DeathTime = Game.TotalElapsedGameTime;
        }

        private bool TurnIntoZombie()
        {
            if (Body.IsRemoved || Body.IsBurnedCorpse) return false;

            var player = Game.CreatePlayer(Body.GetWorldPosition());
            var zombieType = BotHelper.GetZombieType(Type);
            var oldProfile = Body.GetProfile();
            var oldWeapons = BotHelper.GetWeaponSet(Body); // TODO: test gun with lazer once gurt fixed https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=4000

            ScriptHelper.LogDebug(Type, "->", zombieType);
            player.SetBotName(Body.Name); // NOTE: set right now so SpawnLine dialogue will show the bot name correctly

            var zombie = BotManager.SpawnBot(zombieType, Faction, player, BotManager.GetBot(Body).InfectTeam);
            var zombieBody = zombie.Player;

            var modifiers = Body.GetModifiers();
            // Survivor has fake MaxHealth to have blood effect on the face
            if (Enum.GetName(typeof(BotType), BotManager.GetBot(Body).Type).StartsWith("Survivor"))
                modifiers.CurrentHealth = modifiers.MaxHealth = 50;
            else
                modifiers.CurrentHealth = modifiers.MaxHealth * 0.75f;

            zombieBody.SetModifiers(modifiers);
            zombieBody.SetProfile(BotHelper.ToZombieProfile(oldProfile));
            BotHelper.Equip(zombieBody, oldWeapons);

            Body.Remove();
            Body = zombieBody;
            Body.SetBotBehaivorActive(false);
            Body.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch));
            IsTurningIntoZombie = true;
            return true;
        }

        public void Update()
        {
            if (ScriptHelper.IsElapsed(DeathTime, TimeToTurnIntoZombie))
            {
                if (!IsTurningIntoZombie)
                {
                    CanTurnIntoZombie = TurnIntoZombie();
                }
                if (!IsZombie)
                {
                    UpdateTurningIntoZombieAnimation();
                }
            }
        }

        private bool isKneeling;
        private float kneelingTime;
        private void UpdateTurningIntoZombieAnimation()
        {
            if (!isKneeling)
            {
                kneelingTime = Game.TotalElapsedGameTime;
                isKneeling = true;
            }
            else
            {
                if (ScriptHelper.IsElapsed(kneelingTime, 700))
                {
                    Body.AddCommand(new PlayerCommand(PlayerCommandType.StopCrouch));
                    Body.SetBotBehaivorActive(true);
                    IsZombie = true;
                }
            }
        }
    }
    public class PlayerSettings
    {
        public string AccountID = null;
        public string BotType = null;
        public List<string[]> Weapons;

        private static List<string[]> EmptyWeapon
        {
            get
            {
                return new List<string[]>()
                {
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                };
            }
        }
        public static PlayerSettings Empty(string userID)
        {
            return new PlayerSettings()
            {
                AccountID = userID,
                BotType = "None",
                Weapons = EmptyWeapon
            };
        }

        public bool IsEmpty()
        {
            if (BotType != "None") return false;

            foreach (var w in Weapons)
            {
                if (w[0] != "NONE" && w[1] != "None")
                    return false;
            }

            return true;
        }

        public static PlayerSettings Parse(string str)
        {
            var pieces = str.Split('.');

            return new PlayerSettings()
            {
                AccountID = pieces[0],
                BotType = pieces[1],
                Weapons = new List<string[]>()
                {
                    new string[] { pieces[2], pieces[3] },
                    new string[] { pieces[4], pieces[5] },
                    new string[] { pieces[6], pieces[7] },
                    new string[] { pieces[8], pieces[9] },
                    new string[] { pieces[10], pieces[11] },
                },
            };
        }

        public PlayerSettings Update(string botType)
        {
            BotType = botType;
            return this;
        }

        public PlayerSettings Update(WeaponItemType type, string weaponItem, string powerup)
        {
            switch (type)
            {
                case WeaponItemType.NONE:
                case WeaponItemType.Melee:
                    if (powerup.ToLowerInvariant() == "none")
                    {
                        Weapons = EmptyWeapon;
                        break;
                    }
                    Weapons[0][0] = weaponItem;
                    Weapons[0][1] = powerup;
                    break;
                case WeaponItemType.Rifle:
                    Weapons[1][0] = weaponItem;
                    Weapons[1][1] = powerup;
                    break;
                case WeaponItemType.Handgun:
                    Weapons[2][0] = weaponItem;
                    Weapons[2][1] = powerup;
                    break;
                case WeaponItemType.Thrown:
                    Weapons[3][0] = weaponItem;
                    Weapons[3][1] = powerup;
                    break;
                case WeaponItemType.Powerup:
                    Weapons[4][0] = weaponItem;
                    Weapons[4][1] = powerup;
                    break;
            }
            return this;
        }

        public override string ToString()
        {
            return AccountID + "." + BotType + "."
                + Weapons[0][0] + "." + Weapons[0][1] + "."
                + Weapons[1][0] + "." + Weapons[1][1] + "."
                + Weapons[2][0] + "." + Weapons[2][1] + "."
                + Weapons[3][0] + "." + Weapons[3][1] + "."
                + Weapons[4][0] + "." + Weapons[4][1];
        }
    }
    public class PlayerSpawner
    {
        public Vector2 Position { get; set; }
        public bool HasSpawned { get; set; }
    }
    public class RopeObject
    {
        private IObject _rope;
        private IObject _ropeTip;
        public static readonly int TILE_SIZE = 8;

        public RopeObject(string name, Vector2 position)
        {
            _rope = Game.CreateObject(name, position);
            _ropeTip = Game.CreateObject(name, position);
        }

        public float GetAngle()
        {
            return _rope.GetAngle();
        }

        public void SetAngle(float value)
        {
            _rope.SetAngle(value);
            _ropeTip.SetAngle(value);
        }

        public void SetStartPosition(Vector2 position)
        {
            _rope.SetWorldPosition(position);
        }

        public void SetEndPosition(float newAngle, float distance)
        {
            _rope.SetAngle(newAngle);
            _ropeTip.SetAngle(newAngle);

            var sizeFactor = distance / TILE_SIZE + 1;
            var tipOffset = sizeFactor - (int)sizeFactor;
            var updatedDir = ScriptHelper.GetDirection(newAngle);
            var end = StartPosition + ScriptHelper.GetDirection(newAngle) * distance;
            var tipPos = end - updatedDir * 1 /* avoid the gap */ + updatedDir * tipOffset;

            _ropeTip.SetWorldPosition(tipPos);
            if (_rope.GetSizeFactor().X != sizeFactor) _rope.SetSizeFactor(new Point((int)sizeFactor, 0));
        }

        public void SetEndPosition(Vector2 position)
        {
            var direction = Vector2.Normalize(position - StartPosition);
            var angle = ScriptHelper.GetAngle(direction);

            _rope.SetAngle(angle);
            _ropeTip.SetAngle(angle);

            var ropeLength = Vector2.Distance(StartPosition, position);
            var sizeFactor = ropeLength / TILE_SIZE + 1;
            var tipOffset = sizeFactor - (int)sizeFactor;
            var tipPos = position - direction * 1 /* avoid the gap */ + direction * tipOffset;

            _ropeTip.SetWorldPosition(tipPos);
            if (_rope.GetSizeFactor().X != sizeFactor)
                _rope.SetSizeFactor(new Point((int)sizeFactor, 0));
        }

        public void Remove()
        {
            if (_rope == null) return;
            _rope.Remove();
            _ropeTip.Remove();
        }

        public bool IsRemoved { get { return _rope.IsRemoved; } }
        public Vector2 StartPosition { get { return _rope.GetWorldPosition(); } }
    }
    class Settings
    {
        public readonly int BotCount;
        public readonly int FactionRotationInterval;
        public bool FactionRotationEnabled { get { return FactionRotationInterval != 0; } }
        public readonly int RoundsUntilFactionRotation;
        public readonly Dictionary<PlayerTeam, List<BotFaction>> BotFactions;
        public readonly Dictionary<PlayerTeam, BotFaction> CurrentFaction;
        public readonly string[] PlayerSettings;

        public Settings(
            int botCount,
            int factionRotationInterval,
            int roundsUntilFactionRotation,
            Dictionary<PlayerTeam, List<BotFaction>> botFactions,
            Dictionary<PlayerTeam, BotFaction> currentFaction,
            string[] playerSettings
            )
        {
            BotCount = botCount;
            FactionRotationInterval = factionRotationInterval;
            RoundsUntilFactionRotation = roundsUntilFactionRotation;
            BotFactions = botFactions;
            CurrentFaction = currentFaction;
            PlayerSettings = playerSettings;
        }

        public static Settings Get()
        {
            int botCount;
            var botCountKey = BotHelper.StorageKey("BOT_COUNT");
            if (!BotHelper.Storage.TryGetItemInt(botCountKey, out botCount))
            {
                botCount = Constants.DEFAULT_MAX_BOT_COUNT;
                BotHelper.Storage.SetItem(botCountKey, Constants.DEFAULT_MAX_BOT_COUNT);
            }

            botCount = (int)MathHelper.Clamp(botCount, Constants.BOT_COUNT_MIN, Constants.BOT_COUNT_MAX);

            int factionRotationInterval;
            var factionRotationIntervalKey = BotHelper.StorageKey("FACTION_ROTATION_INTERVAL");
            if (!BotHelper.Storage.TryGetItemInt(factionRotationIntervalKey, out factionRotationInterval))
            {
                factionRotationInterval = Constants.DEFAULT_FACTION_ROTATION_INTERVAL;
                BotHelper.Storage.SetItem(factionRotationIntervalKey, Constants.DEFAULT_FACTION_ROTATION_INTERVAL);
            }

            int roundsUntilRotation;
            var roundsUntilRotationKey = BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION");
            if (!BotHelper.Storage.TryGetItemInt(roundsUntilRotationKey, out roundsUntilRotation))
            {
                roundsUntilRotation = factionRotationInterval;
                BotHelper.Storage.SetItem(roundsUntilRotationKey, factionRotationInterval);
            }

            var teams = SharpHelper.EnumToList<PlayerTeam>();
            var botFactions = new Dictionary<PlayerTeam, List<BotFaction>>();
            var currentFaction = new Dictionary<PlayerTeam, BotFaction>();

            string[] currentFactionStr;
            var currentFactionKey = BotHelper.StorageKey("CURRENT_FACTION");
            if (!BotHelper.Storage.TryGetItemStringArr(currentFactionKey, out currentFactionStr))
            {
                currentFactionStr = new string[] { "None", "None", "None", "None" };
            }

            for (var i = 0; i < 4; i++)
            {
                currentFaction.Add((PlayerTeam)i+1, SharpHelper.StringToEnum<BotFaction>(currentFactionStr[i]));
            }

            foreach (var team in teams)
            {
                if (team == PlayerTeam.Independent)
                    continue;

                string[] factions = null;
                var factionsKey = BotHelper.StorageKey("BOT_FACTIONS_" + team);
                if (!BotHelper.Storage.TryGetItemStringArr(factionsKey, out factions))
                {
                    if (team == BotManager.BotTeam)
                        factions = Constants.DEFAULT_FACTIONS;
                    else
                        factions = new string[] { "None" };
                    BotHelper.Storage.SetItem(factionsKey, factions);
                }

                List<BotFaction> botFactionList;
                if (factions.Count() == 1 && factions.Single() == "All")
                {
                    botFactionList = BotHelper.GetAvailableBotFactions().ToList();
                }
                else
                {
                    botFactionList = new List<BotFaction>();
                    foreach (var faction in factions)
                    {
                        botFactionList.Add(SharpHelper.StringToEnum<BotFaction>(faction));
                    }
                }

                botFactions.Add(team, botFactionList);
            }

            string[] playerSettings;
            var playerSettingsKey = BotHelper.StorageKey("PLAYER_SETTINGS");
            if (!BotHelper.Storage.TryGetItemStringArr(playerSettingsKey, out playerSettings))
            {
                playerSettings = new string[] { };
            }

            return new Settings(
                botCount,
                factionRotationInterval,
                roundsUntilRotation,
                botFactions,
                currentFaction,
                playerSettings
            );
        }
    }
    public class WeaponSet
    {
        public WeaponSet()
        {
            Melee = WeaponItem.NONE;
            Primary = WeaponItem.NONE;
            Secondary = WeaponItem.NONE;
            Throwable = WeaponItem.NONE;
            Powerup = WeaponItem.NONE;
            MeleeHandPowerup = MeleeWeaponPowerup.None;
            MeleePowerup = MeleeWeaponPowerup.None;
            PrimaryPowerup = RangedWeaponPowerup.None;
            SecondaryPowerup = RangedWeaponPowerup.None;
            UseLazer = false;
        }

        static WeaponSet()
        {
            Empty = new WeaponSet();
        }

        public static WeaponSet Empty { get; private set; }

        public WeaponItem Melee { get; set; }
        public WeaponItem Primary { get; set; }
        public WeaponItem Secondary { get; set; }
        public WeaponItem Throwable { get; set; }
        public WeaponItem Powerup { get; set; }
        public MeleeWeaponPowerup MeleeHandPowerup { get; set; }
        public MeleeWeaponPowerup MeleePowerup { get; set; }
        public RangedWeaponPowerup PrimaryPowerup { get; set; }
        public RangedWeaponPowerup SecondaryPowerup { get; set; }
        public bool UseLazer { get; set; }
        public bool IsEmpty
        {
            get
            {
                return Melee == WeaponItem.NONE
                  && Primary == WeaponItem.NONE
                  && Secondary == WeaponItem.NONE
                  && Throwable == WeaponItem.NONE
                  && Powerup == WeaponItem.NONE
                  && MeleeHandPowerup == MeleeWeaponPowerup.None
                  && MeleePowerup == MeleeWeaponPowerup.None
                  && PrimaryPowerup == RangedWeaponPowerup.None
                  && SecondaryPowerup == RangedWeaponPowerup.None
                  && UseLazer == false;
            }
        }
    }
    public enum ZombieStatus
    {
        // Not infected by zombie. Do not turn into zombie when dying
        Human,

        // Infected by zombie or other infected. Start turning into zombie when dying
        Infected,

        // Most zombies dont turn again after dying
        Zombie,
    }
    public class AssassinBot : Bot
    {
        class AssassinInfo
        {
            public IPlayer Target;
            public IObject TargetIndicator;
            public IObjectWeldJoint WeldJoint;
        }
        public AssassinBot(BotArgs args) : base(args) { _team = args.Player.GetTeam(); }

        private static Dictionary<PlayerTeam, AssassinInfo> AssassinInfos = new Dictionary<PlayerTeam, AssassinInfo>
        {
            { PlayerTeam.Team1, new AssassinInfo() },
            { PlayerTeam.Team2, new AssassinInfo() },
            { PlayerTeam.Team3, new AssassinInfo() },
            { PlayerTeam.Team4, new AssassinInfo() },
        };

        private PlayerTeam _team;

        public override void OnSpawn()
        {
            base.OnSpawn();
            FindTarget(_team);
        }

        private static void FindTarget(PlayerTeam team)
        {
            if (team == PlayerTeam.Independent) return;

            var assInfo = AssassinInfos[team];
            if (assInfo.Target != null) return;

            var potentialTargets = Game.GetPlayers().Where(p => !ScriptHelper.SameTeam(p, team) && !p.IsDead).ToList();
            if (potentialTargets.Count == 0) return;

            assInfo.Target = RandomHelper.GetItem(potentialTargets);
            var teammates = GetTeammates(team).ToList();
            var assassin = RandomHelper.GetItem(teammates);
            assassin.SayLine("Target: " + assInfo.Target.Name);

            var targetPos = assInfo.Target.GetWorldPosition();
            targetPos.Y += 35;
            var teamColor = new Dictionary<PlayerTeam, string> { { PlayerTeam.Team1, "Blue" }, { PlayerTeam.Team2, "Red" }, { PlayerTeam.Team3, "Green" }, { PlayerTeam.Team4, "Yellow" }, };

            if (assInfo.TargetIndicator == null)
            {
                assInfo.TargetIndicator = Game.CreateObject("Target00");
            }
            else
            {
                assInfo.WeldJoint.Remove();
            }
            assInfo.TargetIndicator.SetWorldPosition(targetPos);
            assInfo.TargetIndicator.SetBodyType(BodyType.Dynamic);
            assInfo.TargetIndicator.SetColor1("Neon" + teamColor[team]);
            assInfo.WeldJoint = ScriptHelper.Weld(assInfo.Target, assInfo.TargetIndicator);

            var cb = (Events.PlayerDeathCallback)null;
            cb = Events.PlayerDeathCallback.Start((player) =>
            {
                if (GetTeammates(team).All(x => x.Player.IsDead))
                {
                    if (assInfo.WeldJoint != null)
                    {
                        assInfo.WeldJoint.Remove();
                        assInfo.TargetIndicator.Remove();
                    }
                    cb.Stop();
                    return;
                }
                if (assInfo.Target == null || player.UniqueID == assInfo.Target.UniqueID)
                {
                    assInfo.Target = null;
                    FindTarget(team);
                    cb.Stop();
                }
            });

            foreach (var bot in teammates)
                bot.Player.SetForcedBotTarget(assInfo.Target);
        }

        private static IEnumerable<Bot> GetTeammates(PlayerTeam team) { return BotManager.GetBots<AssassinBot>().Where(x => ScriptHelper.SameTeam(x.Player, team)); }
    }
    public class BabybearBot : Bot
    {
        private TeddybearBot m_mommy = null;
        private IPlayer m_offender;
        private static Queue<string> Names = new Queue<string>(new[] { "Timmy", "Jimmy" });

        public BabybearBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetBotName(Names.Dequeue());
        }

        private bool m_trackRocketRidingOffender = false;
        private float m_findDelay = -2000f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (m_mommy == null)
            {
                if (ScriptHelper.IsElapsed(m_findDelay, 2000))
                {
                    m_findDelay = Game.TotalElapsedGameTime;
                    FindMommy();
                }
            }

            if (Player.IsRocketRiding && !m_trackRocketRidingOffender)
            {
                var projectile = Game.GetProjectile(Player.RocketRidingProjectileInstanceID);
                m_offender = Game.GetPlayer(projectile.InitialOwnerPlayerID);
                m_trackRocketRidingOffender = true;
            }
            else
            {
                m_trackRocketRidingOffender = false;
            }
        }

        private void FindMommy()
        {
            foreach (var bot in BotManager.GetBots())
            {
                if (bot.Type == BotType.Teddybear)
                {
                    m_mommy = (TeddybearBot)bot;
                    m_mommy.Player.SetBotName("Mommy Bear");
                    break;
                }
            }
            if (m_mommy != null)
                Player.SetGuardTarget(m_mommy.Player);
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);
            m_offender = attacker;
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (!args.Removed)
                if (RandomHelper.Percentage(.75f)) Game.PlaySound("CartoonScream", Position);

            if (m_offender == null || m_offender.IsDead)
                m_offender = FindClosestTarget();

            if (m_offender != null)
                m_mommy.Enrage(m_offender);
        }

        private IPlayer FindClosestTarget()
        {
            IPlayer target = null;

            foreach (var player in Game.GetPlayers())
            {
                if (player.IsDead || player.IsRemoved || ScriptHelper.SameTeam(player, Player))
                    continue;

                if (target == null) target = player;

                var targetDistanceSq = Vector2.DistanceSquared(target.GetWorldPosition(), Position);
                var potentialTargetDistanceSq = Vector2.DistanceSquared(player.GetWorldPosition(), Position);

                if (potentialTargetDistanceSq < targetDistanceSq)
                {
                    target = player;
                }
            }

            return target;
        }
    }
    class BalistaBot : Bot
    {
        public BalistaBot(BotArgs args) : base(args) { }

        private int m_rifleReloadTime = 0;
        private bool m_fireReloadEvent = false;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            LogDebug(m_rifleReloadTime);

            if (Player.IsReloading && !m_fireReloadEvent)
            {
                OnReload();
                m_fireReloadEvent = true;
            }
            if (!Player.IsReloading && m_fireReloadEvent)
                m_fireReloadEvent = false;

            if (Player.IsDead) return;
            if (IsUsingPowerupWpn && Player.CurrentPrimaryWeapon.TotalAmmo == 0)
                PowerupManager.SetPowerup(Player, WeaponItem.ASSAULT, RangedWeaponPowerup.None);
            else if (!IsUsingPowerupWpn && (m_rifleReloadTime >= 1 || Player.CurrentPrimaryWeapon.TotalAmmo == 0))
                PowerupManager.SetPowerup(Player, WeaponItem.GRENADE_LAUNCHER, RangedWeaponPowerup.Spinner);
        }

        private bool IsUsingPowerupWpn
        {
            get
            {
                var playerWpn = PowerupManager.GetOrCreatePlayerWeapon(Player);
                return playerWpn.Primary.Name == WeaponItem.GRENADE_LAUNCHER
                    && playerWpn.Primary.Powerup == RangedWeaponPowerup.Spinner;
            }
        }

        private void OnReload()
        {
            if (Player.CurrentWeaponDrawn == WeaponItemType.Rifle)
                m_rifleReloadTime++;
        }

        public override void OnPickedupWeapon(PlayerWeaponAddedArg arg)
        {
            base.OnPickedupWeapon(arg);
            m_rifleReloadTime = 0;
        }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (arg.WeaponItemType != WeaponItemType.Rifle)
                return;

            var weaponObject = Game.GetObject(arg.TargetObjectID);

            if (!Player.IsDead)
            {
                if (weaponObject != null)
                    weaponObject.SetHealth(0);
            }
            else
            {
                // always drops powerup weapon as a reward for players
                var powerupWpn = PowerupManager.CreateWeapon("WpnGrenadeLauncher", RangedWeaponPowerup.Spinner);

                powerupWpn.SetWorldPosition(weaponObject.GetWorldPosition());
                powerupWpn.SetLinearVelocity(weaponObject.GetLinearVelocity());
                powerupWpn.SetAngularVelocity(weaponObject.GetAngularVelocity());
                weaponObject.Remove();
            }
        }
    }
    class BalloonaticBot : Bot
    {
        public BalloonaticBot(BotArgs args) : base(args) { }

        private static readonly string[] BalloonColors = new string[]
        {
            "BgLightRed",
            "BgLightOrange",
            "BgLightYellow",
            "BgLightGreen",
            "BgLightBlue",
            "BgLightCyan",
            "BgLightMagenta",
            "BgLightPink",
        };

        private List<IObject> m_markers = new List<IObject>();

        public override void OnSpawn()
        {
            base.OnSpawn();

            var colors = RandomHelper.Shuffle(BalloonColors);
            for (var i = 0; i < 5; i++)
            {
                var balloon = Game.CreateObject("Balloon00");
                var balloonJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint");
                var distanceJoint = (IObjectDistanceJoint)Game.CreateObject("DistanceJoint");

                balloon.SetColor1(colors[i]);
                balloon.SetWorldPosition(Position + new Vector2((i - 2) * 10, 40));

                balloonJoint.SetWorldPosition(balloon.GetWorldPosition());
                balloonJoint.SetTargetObject(balloon);

                distanceJoint.SetTargetObjectJoint(balloonJoint);
                distanceJoint.SetWorldPosition(Position);
                distanceJoint.SetTargetObject(Player);
                distanceJoint.SetLineVisual(LineVisual.DJRope);

                m_markers.Add(balloonJoint);
                m_markers.Add(distanceJoint);

            }
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (args.Removed)
            {
                foreach (var m in m_markers) m.Remove();
            }
        }
    }
    public class BandidoBot : Bot
    {
        public BandidoBot(BotArgs args) : base(args)
        {
            _isElapsedAmmoFire = ScriptHelper.WithIsElapsed(50, 350);
        }

        private uint _ammoLeft = 500;
        private bool _fireAmmoFromCorpse = false;
        private Vector2 _firePosition;
        private Func<bool> _isElapsedAmmoFire;
        private WeaponItem _lastRangeWpn = WeaponItem.NONE;
        public static readonly float FireAmmoOnDeathChance = Game.IsEditorTest ? .5f : .65f;

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (!_fireAmmoFromCorpse || _ammoLeft == 0) return;
            if (_isElapsedAmmoFire())
            {
                var proj = Mapper.GetProjectile(_lastRangeWpn);
                Game.SpawnProjectile(proj, _firePosition, RandomHelper.Direction(15, 180 - 15));
                // the carbine is so fucking loud my ears are bleeding
                Game.PlaySound("Pistol", _firePosition);
                _ammoLeft--;
            }
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (args.Removed) return;

            if (Player.CurrentPrimaryRangedWeapon.WeaponItem != WeaponItem.NONE)
                _lastRangeWpn = Player.CurrentPrimaryRangedWeapon.WeaponItem;
            if (Player.CurrentSecondaryRangedWeapon.WeaponItem != WeaponItem.NONE)
                _lastRangeWpn = Player.CurrentSecondaryRangedWeapon.WeaponItem;

            Events.UpdateCallback cb = null;
            cb = Events.UpdateCallback.Start((e) =>
            {
                if (!Player.IsOnGround) return;

                var groundObj = ScriptHelper.GetGroundObject(Player);
                if (groundObj == null || groundObj.GetCollisionFilter().CategoryBits != CategoryBits.StaticGround)
                    return;

                if (_lastRangeWpn != WeaponItem.NONE && RandomHelper.Percentage(FireAmmoOnDeathChance))
                {
                    _firePosition = new Vector2(Position.X, Position.Y - 4);
                    var ammoStash = Game.CreateObject("AmmoStash00", _firePosition);
                    ScriptHelper.Weld(groundObj, ammoStash);
                    // fire above corpse so it doesn't get gibbed
                    _firePosition.Y += 9;
                    _fireAmmoFromCorpse = true;
                }
                cb.Stop();
            }, 270);
        }
    }
    public class GatherSpot
    {
        public IObject Spot;
        public float UpdateTime;
    }

    public class BikerBot : Bot
    {
        public BikerBot(BotArgs args) : base(args) { }

        private static Dictionary<PlayerTeam, GatherSpot> GatherSpots = new Dictionary<PlayerTeam, GatherSpot>
        {
            { PlayerTeam.Team1, null },
            { PlayerTeam.Team2, null },
            { PlayerTeam.Team3, null },
            { PlayerTeam.Team4, null },
        };

        public override void OnSpawn()
        {
            base.OnSpawn();
            if (GatherSpot == null) ChangeGatherSpot();
        }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Faction != BotFaction.Biker || Player.IsDead) return;

            foreach (var arg in args)
            {
                SetHealth(Player.GetHealth() + 4, true);

                if (arg.IsPlayer && RandomHelper.Percentage(.3f))
                {
                    var enemy = BotManager.GetBot(arg.ObjectID);

                    foreach (var weapon in Constants.WeaponItemTypes)
                    {
                        var weaponObj = enemy.Player.Disarm(weapon);
                        if (weaponObj != null)
                        {
                            Player.GiveWeaponItem(weaponObj.RangedWeapon.WeaponItem);
                            weaponObj.Remove();
                            break;
                        }
                    }
                }
            }
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (GatherSpot == null) return;

            Game.DrawArea(GatherSpot.Spot.GetAABB(), Color.Magenta);
            if (ScriptHelper.IsElapsed(GatherSpot.UpdateTime, 42560))
                ChangeGatherSpot();
        }

        public GatherSpot GatherSpot
        {
            get
            {
                if (Player.GetTeam() == PlayerTeam.Independent) return null;
                return GatherSpots[Player.GetTeam()];
            }
            set
            {
                if (Player.GetTeam() == PlayerTeam.Independent) return;
                GatherSpots[Player.GetTeam()] = value;
            }
        }

        private void ChangeGatherSpot()
        {
            if (GatherSpot != null) GatherSpot.Spot.Remove();
            var spawner = RandomHelper.GetItem(Game.GetObjectsByName("SpawnPlayer"));
            var spot = Game.CreateObject("InvisibleBlockNoCollision", spawner.GetWorldPosition());
            GatherSpot = new GatherSpot
            {
                Spot = spot,
                UpdateTime = Game.TotalElapsedGameTime,
            };

            foreach (var bot in BotManager.GetBots())
                if (bot.Faction == BotFaction.Biker && ScriptHelper.SameTeam(bot.Player, Player))
                    bot.Player.SetGuardTarget(GatherSpot.Spot);
        }
    }
    class BoffinBot : Bot
    {
        private float _initialSize = 0f;
        public BoffinBot(BotArgs args) : base(args)
        {
            _initialSize = Player.GetModifiers().SizeModifier;
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            var mod = Player.GetModifiers();
            if (mod.SizeModifier < _initialSize)
            {
                mod.SizeModifier = _initialSize;
                Player.SetModifiers(mod);
            }
        }
    }
    public enum MeleeAction { None, One, Two, Three }

    public class Bot
    {
        public static readonly Bot None;
        public static readonly string NoneCustomID = "BeNonePlayer";
        static Bot()
        {
            var nonePlayer = Game.CreatePlayer(Vector2.Zero);
            nonePlayer.Remove();
            nonePlayer.CustomID = NoneCustomID;
            None = new Bot(nonePlayer);
        }

        public Color DialogueColor
        {
            get { return ScriptHelper.GetTeamColor(Player == null ? PlayerTeam.Independent: Player.GetTeam()); }
        }
        public BotBehaviorSet BotBehaviorSet { get; private set; }
        public IPlayer Player { get; set; }
        public BotType Type { get; set; }
        public BotFaction Faction { get; set; }
        public BotInfo Info { get; set; }
        public int UpdateDelay { get; set; }
        // IsRemoved from BotManager database, NOT from SFD Gameworld
        // You should use Bot.IsRemoved and Bot.Player.IsDead together because hte IPlayer in Bot.Player can be swapped via command.
        // Bot.IsRemoved doesn't necessarily mean Bos.Player.IsDead
        public bool IsRemoved { get; set; }
        public Vector2 Position
        {
            get { return Player.GetWorldPosition(); }
            set { Player.SetWorldPosition(value); }
        }

        private Bot(IPlayer player = null)
        {
            Player = player;
            InfectTeam = player != null ? player.GetTeam() : BotManager.BotTeam;
            UpdateDelay = 0;
            BotBehaviorSet = player != null ? player.GetBotBehaviorSet() : null;
            Info = new BotInfo(player);
        }
        public Bot(IPlayer player, BotType type, BotFaction faction) : this(player)
        {
            Type = type;
            Faction = faction;
            UpdateDelay = 100;
        }
        public Bot(BotArgs args) : this(args.Player)
        {
            Type = args.BotType;
            Faction = args.BotFaction;
            Info = args.Info;
        }

        private void SaySpawnLine()
        {
            if (Info == null) return;

            var spawnLine = Info.SpawnLine;
            var spawnLineChance = Info.SpawnLineChance;

            if (!string.IsNullOrWhiteSpace(spawnLine) && RandomHelper.Percentage(spawnLineChance))
                SayLine(spawnLine);
        }

        public void SayDeathLine()
        {
            if (Info == null) return;

            var deathLine = Info.DeathLine;
            var deathLineChance = Info.DeathLineChance;

            if (!string.IsNullOrWhiteSpace(deathLine) && RandomHelper.Percentage(deathLineChance))
                SayLine(deathLine);
        }

        private float m_lastUpdateElapsed = 0f;
        public void Update(float elapsed)
        {
            m_lastUpdateElapsed += elapsed;

            if (m_lastUpdateElapsed >= UpdateDelay)
            {
                OnUpdate(m_lastUpdateElapsed);
                m_lastUpdateElapsed = 0;
            }
            UpdateInfectedEffect(elapsed);
            UpdateMeleeAttackPhrases();

            if (IsStunned && !Player.IsDeathKneeling)
                Player.AddCommand(new PlayerCommand(PlayerCommandType.DeathKneelInfinite));
        }

        public void LogDebug(params object[] messages)
        {
            if (Game.IsEditorTest)
            {
                Game.DrawText(ScriptHelper.ToDisplayString(messages), Position);
            }
        }

        public void SayLine(string line, Color? color = null, float duration = 0)
        {
            var dialogueColor = color == null ? DialogueColor : (Color)color;
            // reading speed: 3 words per second
            duration = duration > 0 ? duration : Math.Max(line.Split(' ').Length * 1000 / 3, 1000);
            if (Game.TotalElapsedGameTime < 1000 && Game.StartupSequenceEnabled)
                duration += 1000;
            Game.CreateDialogue(line, dialogueColor, Player, duration: duration);
        }

        protected virtual void OnUpdate(float elapsed) { }

        public virtual void OnPickedupWeapon(PlayerWeaponAddedArg arg) { }
        public virtual void OnDroppedWeapon(PlayerWeaponRemovedArg arg) { }

        private int CurrentWeaponIndex
        {
            get
            {
                switch (Player.CurrentWeaponDrawn)
                {
                    case WeaponItemType.Melee:
                        if (Player.CurrentMeleeMakeshiftWeapon.WeaponItem != WeaponItem.NONE)
                            return 0;
                        return 1;
                    case WeaponItemType.Rifle:
                        return 2;
                    case WeaponItemType.Handgun:
                        return 3;
                    case WeaponItemType.Thrown:
                        return 4;
                    case WeaponItemType.Powerup:
                        return 5;
                }
                return -1;
            }
        }
        public WeaponItem CurrentWeapon
        {
            get { return GetCurrentWeapon(CurrentWeaponIndex); }
        }
        public float CurrentAmmo
        {
            get { return GetCurrentAmmo(CurrentWeaponIndex); }
        }
        public float CurrentTotalAmmo
        {
            get { return GetCurrentTotalAmmo(CurrentWeaponIndex); }
            set { SetCurrentTotalAmmo(CurrentWeaponIndex, value); }
        }

        // TODO: remove
        public WeaponItem CurrentMeleeWeapon
        {
            get { return Player.CurrentMeleeMakeshiftWeapon.WeaponItem != WeaponItem.NONE ?
                    Player.CurrentMeleeMakeshiftWeapon.WeaponItem : Player.CurrentMeleeWeapon.WeaponItem; }
        }

        private WeaponItem GetCurrentWeapon(int index)
        {
            switch (index)
            {
                case 0:
                    return Player.CurrentMeleeMakeshiftWeapon.WeaponItem;
                case 1:
                    return Player.CurrentMeleeWeapon.WeaponItem;
                case 2:
                    return Player.CurrentPrimaryWeapon.WeaponItem;
                case 3:
                    return Player.CurrentSecondaryWeapon.WeaponItem;
                case 4:
                    return Player.CurrentThrownItem.WeaponItem;
                case 5:
                    return Player.CurrentPowerupItem.WeaponItem;
            }
            return WeaponItem.NONE;
        }
        public float GetCurrentAmmo(int index)
        {
            switch (index)
            {
                case 0:
                    return Player.CurrentMeleeMakeshiftWeapon.Durability;
                case 1:
                    return Player.CurrentMeleeWeapon.Durability;
                case 2:
                    return Player.CurrentPrimaryWeapon.CurrentAmmo;
                case 3:
                    return Player.CurrentSecondaryWeapon.CurrentAmmo;
                case 4:
                    return Player.CurrentThrownItem.CurrentAmmo;
            }
            return 0;
        }
        public float GetCurrentTotalAmmo(int index)
        {
            switch (index)
            {
                case 0:
                    return Player.CurrentMeleeMakeshiftWeapon.MaxValue;
                case 1:
                    return Player.CurrentMeleeWeapon.MaxValue;
                case 2:
                    return Player.CurrentPrimaryWeapon.TotalAmmo;
                case 3:
                    return Player.CurrentSecondaryWeapon.TotalAmmo;
                case 4:
                    return Player.CurrentThrownItem.CurrentAmmo;
            }
            return 0;
        }
        public void SetCurrentTotalAmmo(int currentWeaponIndex, float value)
        {
            switch (currentWeaponIndex)
            {
                case 0:
                    Player.SetCurrentMeleeMakeshiftDurability(value);
                    break;
                case 1:
                    Player.SetCurrentMeleeDurability(value);
                    break;
                case 2:
                    Player.SetCurrentPrimaryWeaponAmmo((int)value);
                    break;
                case 3:
                    Player.SetCurrentSecondaryWeaponAmmo((int)value);
                    break;
                case 4:
                    Player.SetCurrentThrownItemAmmo((int)value);
                    break;
            }
        }

        public void Decorate(IPlayer existingPlayer)
        {
            existingPlayer.SetProfile(Player.GetProfile());

            existingPlayer.GiveWeaponItem(Player.CurrentMeleeWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentMeleeMakeshiftWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentPrimaryWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentSecondaryWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentThrownItem.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentPowerupItem.WeaponItem);

            existingPlayer.SetTeam(Player.GetTeam());
            existingPlayer.SetModifiers(Player.GetModifiers());
            existingPlayer.SetHitEffect(Player.GetHitEffect());
        }

        private float m_bloodEffectElapsed = 0;
        private void UpdateInfectedEffect(float elapsed)
        {
            if (Info.ZombieStatus == ZombieStatus.Infected && !Player.IsRemoved && !Player.IsBurnedCorpse)
            {
                m_bloodEffectElapsed += elapsed;

                if (m_bloodEffectElapsed > 300)
                {
                    Game.PlayEffect(EffectName.BloodTrail, Position);
                    m_bloodEffectElapsed = 0;
                }
            }
        }

        private bool _lastIdle = false;
        private int _lastSwing = 0;
        public MeleeAction CurrentMeleeAction { get; private set; }
        private void UpdateMeleeAttackPhrases()
        {
            if (Player.IsDead) return;

            if (Player.Statistics.TotalMeleeAttackSwings != _lastSwing)
            {
                if (CurrentMeleeAction == MeleeAction.None) CurrentMeleeAction = MeleeAction.One;
                else if (CurrentMeleeAction == MeleeAction.One) CurrentMeleeAction = MeleeAction.Two;
                else if (CurrentMeleeAction == MeleeAction.Two) CurrentMeleeAction = MeleeAction.Three;
                else if (CurrentMeleeAction == MeleeAction.Three) CurrentMeleeAction = MeleeAction.One;
            }
            if (Player.IsIdle && !_lastIdle)
                CurrentMeleeAction = MeleeAction.None;

            _lastIdle = Player.IsIdle;
            _lastSwing = Player.Statistics.TotalMeleeAttackSwings;
        }

        protected Area DangerArea
        {
            get
            {
                return new Area(Position - Vector2.UnitX * 30 - Vector2.UnitY * 5, Position + Vector2.UnitX * 30 + Vector2.UnitY * 18);
            }
        }
        public bool AreEnemiesNearby()
        {
            foreach (var bot in BotManager.GetBots())
            {
                if (!ScriptHelper.SameTeam(Player, bot.Player) && !bot.Player.IsDead)
                {
                    if (DangerArea.Intersects(bot.Player.GetAABB()))
                        return true;
                }
            }
            return false;
        }

        public virtual void OnSpawn() { SaySpawnLine(); }
        public virtual void OnMeleeDamage(IPlayer attacker, PlayerMeleeHitArg arg) { }
        public virtual void OnMeleeAction(PlayerMeleeHitArg[] args) { }
        public virtual void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            UpdateInfectedStatus(attacker, args);
        }

        public virtual void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            var player = Game.GetPlayer(projectile.InitialOwnerPlayerID);

            if (player == null) return;

            var bot = BotManager.GetBot(player);
            var cowboyBot = bot as CowboyBot;

            // TODO: not apply if the bot is dead before this event runs
            if (cowboyBot != null)
            {
                if (args.IsCrit)
                {
                    var destroyWeapon = RandomHelper.Percentage(cowboyBot.DestroyWeaponWhenCritDisarmChance);
                    if (RandomHelper.Percentage(cowboyBot.CritDisarmChance))
                        Disarm(projectile.Direction, destroyWeapon: destroyWeapon);
                }
                else
                {
                    var destroyWeapon = RandomHelper.Percentage(cowboyBot.DestroyWeaponWhenDisarmChance);
                    if (RandomHelper.Percentage(cowboyBot.DisarmChance))
                        Disarm(projectile.Direction, destroyWeapon: destroyWeapon);
                }
            }
            if (bot.Type == BotType.Hunter && !Player.IsRemoved && ScriptHelper.IsBear(Player))
            {
                Player.DealDamage(projectile.GetProperties().PlayerDamage);
            }
        }
        public virtual void OnDeath(PlayerDeathArgs args)
        {
            if (args.Killed) SayDeathLine();
        }

        public virtual void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos) { }

        public bool CanInfect { get { return Info.ZombieStatus != ZombieStatus.Human; } }
        public bool CanBeInfected { get { return !CanInfect && !Info.ImmuneToInfect && !Player.IsBurnedCorpse; } }
        public bool IsInfectedByZombie { get { return Info.ZombieStatus == ZombieStatus.Infected; } }
        private void UpdateInfectedStatus(IPlayer attacker, PlayerDamageArgs args)
        {
            if (CanBeInfected && attacker != null)
            {
                var directContact = args.DamageType == PlayerDamageEventType.Melee
                    && attacker.CurrentWeaponDrawn == WeaponItemType.NONE
                    && !attacker.IsKicking && !attacker.IsJumpKicking;
                var attackerBot = BotManager.GetBot(attacker);

                if (attackerBot.CanInfect && directContact)
                {
                    Infect(attackerBot.InfectTeam);
                    Game.ShowChatMessage(attacker.Name + " infected " + Player.Name);
                }
            }
        }

        public PlayerTeam InfectTeam { get; private set; }
        public void Infect(PlayerTeam team)
        {
            if (CanBeInfected)
            {
                InfectTeam = team;
                Game.PlayEffect(EffectName.CustomFloatText, Position, "infected");
                Info.ZombieStatus = ZombieStatus.Infected;
            }
        }

        public void Disarm(Vector2 projDirection, WeaponItemType type = WeaponItemType.NONE, bool destroyWeapon = false, bool playEffect = true)
        {
            type = type == WeaponItemType.NONE ? Player.CurrentWeaponDrawn : type;
            if (type == WeaponItemType.NONE) return;

            var velocity =
                Vector2.UnitX * RandomHelper.Between(.25f, 2.5f) * Math.Sign(projDirection.X) +
                Vector2.UnitY * RandomHelper.Between(.25f, 2.5f);

            if (Math.Sign(projDirection.X) == Math.Sign(Player.GetLinearVelocity().X))
                velocity += Vector2.UnitX * (Player.GetLinearVelocity().X / 2);

            if (playEffect)
                Game.PlayEffect(EffectName.CustomFloatText, Position + Vector2.UnitY * 15, "Disarmed");

            var weapon = Player.Disarm(type, velocity, false);
            if (weapon == null) return;

            weapon.SetAngularVelocity(RandomHelper.Between(-10, 10));
            if (destroyWeapon)
                weapon.SetHealth(0);
        }

        public void DisarmAll()
        {
            foreach (var weaponItemType in Constants.WeaponItemTypes)
            {
                Disarm(Vector2.Zero, weaponItemType, playEffect: false);
            }
        }

        public bool IsStunned { get; private set; }
        private Events.UpdateCallback m_effect;
        public System.Threading.Tasks.Task<bool> Stun(uint stunnedTime)
        {
            var promise = new System.Threading.Tasks.TaskCompletionSource<bool>();

            IsStunned = true;
            Player.SetInputEnabled(false);
            Player.AddCommand(new PlayerCommand(PlayerCommandType.DeathKneelInfinite));
            Game.PlayEffect(EffectName.CustomFloatText, Player.GetWorldPosition(), "stunned");

            m_effect = Events.UpdateCallback.Start((e) =>
            {
                var position = RandomHelper.WithinArea(Player.GetAABB());
                Game.PlayEffect(EffectName.Electric, position);
            }, 400);

            ScriptHelper.Timeout(() =>
            {
                Player.AddCommand(new PlayerCommand(PlayerCommandType.StopDeathKneel));
                Player.SetInputEnabled(true);
                IsStunned = false;
                Events.UpdateCallback.Stop(m_effect);
                m_effect = null;
                promise.TrySetResult(true);
            }, stunnedTime);

            return promise.Task;
        }

        public void UseRangeWeapon(bool value, bool shealthRangeWpn = false)
        {
            var bs = Player.GetBotBehaviorSet();
            if (bs.RangedWeaponUsage == value) return;
            
            bs.RangedWeaponUsage = value;
            Player.SetBotBehaviorSet(bs);

            if (shealthRangeWpn)
                ScriptHelper.Command(Player, PlayerCommandType.Sheath);
        }

        public float Distance(Vector2 position) { return Vector2.Distance(Player.GetWorldPosition(), position); }

        public void SetHealth(float health, bool permanent = false)
        {
            var modifiers = Player.GetModifiers();
            if (health > modifiers.MaxHealth)
                modifiers.MaxHealth = (int)health;
            modifiers.CurrentHealth = health;
            Player.SetModifiers(modifiers);
            if (permanent) Info.Modifiers = modifiers;
        }
        // set modifiers without changing current health and energy
        public void SetModifiers(PlayerModifiers modifiers, bool permanent = false)
        {
            modifiers.CurrentHealth = Player.GetHealth();
            modifiers.CurrentEnergy = Player.GetEnergy();
            Player.SetModifiers(modifiers);
            if (permanent) Info.Modifiers = modifiers;
        }
        public void ResetModifiers() { SetModifiers(Info.Modifiers); }

        public void SetBotBehaviorSet(BotBehaviorSet botBehaviorSet, bool permanent = false)
        {
            Player.SetBotBehaviorSet(botBehaviorSet);
            if (permanent) BotBehaviorSet = botBehaviorSet;
        }
        public void ResetBotBehaviorSet() { Player.SetBotBehaviorSet(BotBehaviorSet); }
    }
    public class BotArgs
    {
        public IPlayer Player;
        public BotType BotType = BotType.None;
        public BotFaction BotFaction = BotFaction.None;
        public BotInfo Info;
    }

    public static class BotFactory
    {
        public static Bot Create(IPlayer player, BotType botType, BotFaction faction)
        {
            Bot bot = null;
            var args = new BotArgs
            {
                Player = player,
                BotType = botType,
                BotFaction = faction,
                Info = GetInfo(botType),
            };

            switch (botType)
            {
                case BotType.AssassinMelee:
                case BotType.AssassinRange:
                    bot = new AssassinBot(args);
                    break;

                case BotType.Balista:
                    bot = new BalistaBot(args);
                    break;
                case BotType.Balloonatic:
                    bot = new BalloonaticBot(args);
                    break;

                case BotType.Bandido:
                    bot = new BandidoBot(args);
                    break;

                case BotType.Biker:
                case BotType.BikerHulk:
                    bot = new BikerBot(args);
                    break;

                case BotType.Boffin:
                    bot = new BoffinBot(args);
                    break;

                case BotType.Cindy:
                    bot = new CindyBot(args);
                    break;

                case BotType.Cowboy:
                case BotType.ClownCowboy:
                    bot = new CowboyBot(args);
                    break;

                case BotType.Cyborg:
                    bot = new CyborgBot(args);
                    break;

                case BotType.Engineer:
                    bot = new EngineerBot(args, player.IsBot ? new EngineerBot_Controller() : null);
                    break;

                case BotType.Farmer:
                    bot = new FarmerBot(args);
                    break;

                case BotType.Gangster:
                case BotType.GangsterHulk:
                    bot = new GangsterBot(args);
                    break;

                case BotType.Hacker:
                    bot = new HackerBot(args);
                    break;

                case BotType.Hitman:
                    bot = new HitmanBot(args);
                    break;

                case BotType.Hunter:
                    bot = new HunterBot(args);
                    break;

                case BotType.Incinerator:
                    bot = new IncineratorBot(args);
                    break;

                case BotType.Fireman:
                case BotType.Pyromaniac:
                    bot = new PyromaniacBot(args);
                    break;

                case BotType.Kingpin:
                    bot = new KingpinBot(args, player.IsBot ? new InfiniteGrab_Controller() : null);
                    break;

                case BotType.Kriegbar:
                    bot = new KriegbärBot(args, player.IsBot ? new KriegbarBot_Controller() : null);
                    break;

                case BotType.Mecha:
                    bot = new MechaBot(args, player.IsBot ? new MechaBot_Controller() : null);
                    break;

                case BotType.MetroCop:
                    bot = new MetroCopBot(args);
                    break;

                case BotType.Mutant:
                case BotType.BigMutant:
                    bot = new MutantBot(args);
                    break;

                case BotType.MirrorMan:
                    bot = new MirrorManBot(args);
                    break;

                case BotType.Nadja:
                    bot = new NadjaBot(args);
                    break;

                case BotType.PoliceChief:
                    bot = new PoliceChiefBot(args);
                    break;

                case BotType.President:
                    bot = new PresidentBot(args);
                    break;

                case BotType.Sheriff:
                    bot = new SheriffBot(args);
                    break;

                case BotType.Smoker:
                    bot = new SmokerBot(args);
                    break;

                case BotType.Survivor:
                    bot = new SurvivorBot(args);
                    break;

                case BotType.Stripper:
                    bot = new StripperBot(args);
                    break;

                case BotType.Teddybear:
                    bot = new TeddybearBot(args);
                    break;

                case BotType.Thug:
                case BotType.ThugHulk:
                    bot = new ThugBot(args);
                    break;

                case BotType.Babybear:
                    bot = new BabybearBot(args);
                    break;

                case BotType.ZombieEater:
                    bot = new ZombieEaterBot(args, player.IsBot ? new InfiniteGrab_Controller() : null);
                    break;

                case BotType.ZombieFat:
                    bot = new ZombieFatBot(args);
                    break;

                case BotType.ZombieFlamer:
                    bot = new ZombieFlamerBot(args);
                    break;

                default:
                    bot = new Bot(args);
                    break;
            }

            return bot;
        }
    }
    class CindyBot : Bot
    {
        public CindyBot(BotArgs args) : base(args) { }

        public override void OnPickedupWeapon(PlayerWeaponAddedArg arg)
        {
            base.OnPickedupWeapon(arg);

            if (arg.WeaponItemType == WeaponItemType.Handgun
                && PowerupManager.GetOrCreatePlayerWeapon(Player).Secondary.Powerup != RangedWeaponPowerup.Stun)
            {
                PowerupManager.SetPowerup(Player, arg.WeaponItem, RangedWeaponPowerup.Stun);
            }
        }
    }
    public abstract class Controller<T> where T : Bot
    {
        public T Actor { get; set; }
        public IPlayer Player { get { return Actor.Player; } }
        public abstract void OnUpdate(float elapsed);
        public virtual void OnDamage(IPlayer attacker, PlayerDamageArgs args) { }
    }
    class CowboyBot : Bot
    {
        public float DisarmChance { get; set; }
        public float CritDisarmChance { get; set; }
        public float DestroyWeaponWhenDisarmChance { get; set; }
        public float DestroyWeaponWhenCritDisarmChance { get; set; }

        public CowboyBot(BotArgs args) : base(args)
        {
            if (Info.IsBoss)
            {
                DisarmChance = Game.IsEditorTest ? 1 : .35f;
                CritDisarmChance = Game.IsEditorTest ? 1 : .65f;
                DestroyWeaponWhenDisarmChance = .15f;
                DestroyWeaponWhenCritDisarmChance = .35f;
            }
            else
            {
                DisarmChance = .15f;
                CritDisarmChance = .15f;
                DestroyWeaponWhenDisarmChance = 0f;
                DestroyWeaponWhenCritDisarmChance = .01f;
            }
        }
    }
    class CyborgBot : RobotBot
    {
        public CyborgBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            ChangeStatusColor("ClothingLightGreen");
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);
            UpdateHealthStatusColor();
        }

        private string m_healthColor = "";
        private void UpdateHealthStatusColor()
        {
            var mod = Player.GetModifiers();
            var healthLeft = mod.CurrentHealth / mod.MaxHealth;

            if (healthLeft > .4f && healthLeft <= .6f)
            {
                if (m_healthColor != "ClothingLightYellow") ChangeStatusColor("ClothingLightYellow");
            }
            else if (healthLeft > .2f && healthLeft <= .4f)
            {
                if (m_healthColor != "ClothingLightOrange") ChangeStatusColor("ClothingLightOrange");
            }
            else if (healthLeft <= .2f)
                if (m_healthColor != "ClothingLightRed") ChangeStatusColor("ClothingLightRed");
        }

        private void ChangeStatusColor(string color)
        {
            var profile = Player.GetProfile();
            profile.Accesory.Color2 = color;
            Player.SetProfile(profile);
            m_healthColor = color;
        }
    }
    class EngineerBot : Bot
    {
        private static readonly HashSet<WeaponItem> BuildItems = new HashSet<WeaponItem>()
        {
            WeaponItem.LEAD_PIPE,
            WeaponItem.PIPE,
            WeaponItem.HAMMER,
        };

        public static readonly float CreateNewCooldownTime = Game.IsEditorTest ? 3000 : 12000;

        private EngineerBot_Controller m_controller;
        private TurretPlaceholder m_placeholder;

        public EngineerBot(BotArgs args, EngineerBot_Controller controller) : base(args)
        {
            UpdateDelay = 0;

            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        private bool m_notifyCooldownOver = false;
        private float m_createNewTurretCooldown = 0f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);

            if (m_createNewTurretCooldown < CreateNewCooldownTime)
            {
                m_createNewTurretCooldown += elapsed;
            }
            else if (!m_notifyCooldownOver)
            {
                NotifyCooldownOver();
            }

            if (MaybeIsBuildingTurret())
            {
                UpdateBuildingProgress();
            }
            if (m_placeholder != null)
            {
                Game.DrawArea(m_placeholder.GetAABB());
                // Edge cases: player can be moved when standing on dynamic platforms
                if (!m_placeholder.GetAABB().Intersects(Player.GetAABB()) || m_placeholder.IsRemoved)
                    StopOccupying();
            }

            m_prevTotalAttackSwings = Player.Statistics.TotalMeleeAttackSwings;
        }

        private void NotifyCooldownOver()
        {
            var profile = Player.GetProfile();
            var originalColor = profile.Head.Color1;
            var flashCount = 20;

            for (uint i = 0; i < flashCount; i++)
            {
                var ii = i;

                ScriptHelper.Timeout(() =>
                {
                    var color = profile.Head.Color1;

                    if (color == "ClothingLightYellow")
                        color = "ClothingLightGray";
                    else
                        color = "ClothingLightYellow";

                    if (ii == flashCount-1)
                        color = originalColor;

                    profile.Head.Color1 = color;
                    Player.SetProfile(profile);
                }, 75 * ii);
            }
            m_notifyCooldownOver = true;
        }

        private int m_prevTotalAttackSwings = 0;
        private bool MaybeIsBuildingTurret()
        {
            if (Player.IsCrouching
                && m_prevTotalAttackSwings != Player.Statistics.TotalMeleeAttackSwings
                && IsHoldingEquipment)
            {
                return true;
            }
            return false;
        }

        public bool HasEnoughEnergy
        {
            get { return m_createNewTurretCooldown >= CreateNewCooldownTime; }
        }

        public bool HasEquipment { get { return BuildItems.Contains(Player.CurrentMeleeWeapon.WeaponItem); } }
        private bool IsHoldingEquipment
        {
            get
            {
                return HasEquipment
                    && Player.CurrentWeaponDrawn == WeaponItemType.Melee
                    && Player.CurrentMeleeMakeshiftWeapon.WeaponItem == WeaponItem.NONE;
            }
        }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (m_controller != null)
                m_controller.OnDroppedWeapon(arg);
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            if (m_controller != null)
                m_controller.OnDamage(attacker, args);
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);
            StopOccupying();
        }

        private bool IsNearEdge()
        {
            var start = Position;
            var scanLines = new List<Vector2[]>();
            var deg70 = 1.22173f;

            scanLines.Add(new Vector2[] { start, start - Vector2.UnitY * 5 });
            scanLines.Add(new Vector2[] { start, start - Vector2.UnitY * 5 + Vector2.UnitX * (float)(5 / Math.Cos(deg70)) });
            scanLines.Add(new Vector2[] { start, start - Vector2.UnitY * 5 - Vector2.UnitX * (float)(5 / Math.Cos(deg70)) });

            var rayCastInput = new RayCastInput()
            {
                MaskBits = CategoryBits.StaticGround,
                FilterOnMaskBits = true,
            };

            var hitCount = 0;
            foreach (var l in scanLines)
            {
                var results = Game.RayCast(l[0], l[1], rayCastInput);
                Game.DrawLine(l[0], l[1]);

                foreach (var result in results)
                {
                    if (result.HitObject.GetBodyType() == BodyType.Static
                        && ScriptHelper.IsIndestructible(result.HitObject)
                        && !RayCastHelper.ObjectsBulletCanDestroy.Contains(result.HitObject.Name))
                    {
                        hitCount++;break;
                    }
                }
            }
            return hitCount < 3;
        }

        public bool CanBuildTurretHere()
        {
            if (IsNearEdge())
                return false;

            return true;
        }

        public bool CreateNewTurret()
        {
            if (HasEnoughEnergy)
            {
                if (!CanBuildTurretHere())
                {
                    Game.PlayEffect(EffectName.CustomFloatText, Position, "Cannot build here");
                    return false;
                }

                var direction = Player.FacingDirection == -1 ? TurretDirection.Left : TurretDirection.Right;
                m_placeholder = WeaponManager.CreateTurretPlaceholder(Player, direction);
                m_createNewTurretCooldown = 0f;
                m_notifyCooldownOver = false;
                return true;
            }
            else
            {
                Game.PlayEffect(EffectName.CustomFloatText, Position, "Not enough energy");
                return false;
            }
        }

        public bool IsOccupying { get { return m_placeholder != null; } }

        private void StopOccupying()
        {
            m_buildProgress = 0;

            if (m_placeholder != null)
            {
                WeaponManager.RemoveBuilderFromTurretPlaceholder(m_placeholder.UniqueID);
                m_placeholder = null;
            }
        }

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            foreach (var keyInfo in keyInfos)
            {
                if (Player.KeyPressed(VirtualKey.CROUCH_ROLL_DIVE))
                {
                    if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT)
                    {
                        if (BuildItems.Contains(Player.CurrentMeleeWeapon.WeaponItem))
                            CreateNewTurret();
                    }
                }
            }
        }

        private float m_hitCooldown = 0f; // Prevent player spamming attack combo to speedup building progress
        private int m_buildProgress = 0;
        private static readonly int MaxProgress = Game.IsEditorTest ? 8 : 6;
        public float BuildProgress { get { return m_buildProgress / (float)MaxProgress ; } }
        private void UpdateBuildingProgress()
        {
            if (!MakeSurePlaceHolderExists())
                return;

            if (ScriptHelper.IsElapsed(m_hitCooldown, 500))
            {
                m_hitCooldown = Game.TotalElapsedGameTime;

                if (m_placeholder == null)
                    return;

                var hitPosition = Position + Vector2.UnitX * Player.GetFaceDirection() * 12;
                Game.PlayEffect(EffectName.BulletHitMetal, hitPosition);
                Game.PlaySound("ImpactMetal", hitPosition);

                m_buildProgress++;
                m_placeholder.BuildProgress = BuildProgress;

                if (m_buildProgress >= MaxProgress)
                {
                    WeaponManager.SpawnWeapon(BeWeapon.Turret, new TurretArg
                    {
                        Owner = Player,
                        Position = m_placeholder.Position,
                        Direction = m_placeholder.Direction,
                    });

                    if (m_controller != null)
                        m_controller.OnBuildCompleted();

                    m_placeholder.Remove();
                    StopOccupying();
                }
            }
        }

        private bool MakeSurePlaceHolderExists()
        {
            if (m_placeholder != null) return true;

            var untouchPlaceholders = WeaponManager.GetUntouchedTurretPlaceholders();

            if (untouchPlaceholders.Count() > 0)
            {
                foreach (var p in untouchPlaceholders)
                {
                    if (p.Value.Placeholder.GetAABB().Intersects(Player.GetAABB()))
                    {
                        m_placeholder = p.Value.Placeholder;
                        m_buildProgress = (int)Math.Round(m_placeholder.BuildProgress * MaxProgress);
                        WeaponManager.AddBuilderToTurretPlaceholder(m_placeholder.UniqueID, Player);
                        return true;
                    }
                }
            }

            return false;
        }
    }
    class EngineerBot_Controller : Controller<EngineerBot>
    {
        public bool IsBuilding { get { return m_state == EngineerState.Building; } }

        private Area DangerArea
        {
            get
            {
                return new Area(
                    Actor.Position - Vector2.UnitX * 30 - Vector2.UnitY * 5,
                    Actor.Position + Vector2.UnitX * 30 + Vector2.UnitY * 18);
            }
        }

        private Vector2[] ScanLine(float angle)
        {
            var start = Actor.Position + Vector2.UnitY * 9; // same height as turret's tip
            var end = start + ScriptHelper.GetDirection(angle) * 200;
            return new Vector2[] { start, end };
        }

        private List<Vector2[]> ScanLines
        {
            get
            {
                return new List<Vector2[]>()
                {
                    ScanLine(0),
                    ScanLine(MathHelper.PI),
                };
            }
        }

        enum EngineerState
        {
            Normal,
            Analyzing,
            GoingToPlaceholder,
            PreBuilding,
            Building,
        }
        private EngineerState m_state = EngineerState.Normal;

        private enum AvailableTurretDirection
        {
            None,
            Left,
            Right,
        }

        private AvailableTurretDirection m_availableDirection = AvailableTurretDirection.None;

        public void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            if (!Actor.HasEquipment)
            {
                StopBuilding();
            }
        }

        private float m_analyzePlaceCooldown = 0f;

        public override void OnUpdate(float elapsed)
        {
            Actor.LogDebug(m_state, Actor.BuildProgress);

            switch (m_state)
            {
                case EngineerState.Normal:
                    if (Actor.HasEnoughEnergy && Actor.HasEquipment)
                        m_state = EngineerState.Analyzing;
                    break;
                case EngineerState.Analyzing:
                    if (ScriptHelper.IsElapsed(m_analyzePlaceCooldown, 300))
                    {
                        m_analyzePlaceCooldown = Game.TotalElapsedGameTime;

                        if (CheckExistingPlaceholder())
                            GoToExistingPlaceholder();
                        else if (ShouldBuildTurretHere())
                            StartBuildingTurret();
                    }
                    break;
                case EngineerState.GoingToPlaceholder:
                    CheckArriveTargetPlaceholder();
                    break;
                case EngineerState.PreBuilding:
                    UpdatePrebuilding(elapsed);
                    break;
                case EngineerState.Building:
                    UpdateBuildingTurret();
                    break;
            }
        }

        private float m_damageTakenWhileBuilding = 0f;
        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            if (IsBuilding)
            {
                m_damageTakenWhileBuilding += args.Damage;

                if (m_damageTakenWhileBuilding >= 20)
                {
                    StopBuilding();
                    m_damageTakenWhileBuilding = 0;
                }
            }
        }

        private bool IsAttacked
        {
            get
            {
                return Player.IsStaggering || Player.IsCaughtByPlayerInDive || Player.IsStunned
                    || Player.IsFalling || Player.IsBurningInferno;
            }
        }
        private bool IsInactive
        {
            get { return (Player.IsIdle || Player.IsWalking) && !Player.IsInMidAir && !IsAttacked; }
        }
        private bool CanBuildTurretNow { get { return Actor.HasEquipment && IsInactive; } }
        private bool ShouldBuildTurretHere()
        {
            if (!CanBuildTurretNow)
                return false;

            if (!Actor.CanBuildTurretHere())
                return false;

            m_availableDirection = AvailableTurretDirection.None;
            var prioritizedDirection = Player.FacingDirection == 1 ? AvailableTurretDirection.Right : AvailableTurretDirection.Left;
            for (var i = 0; i < ScanLines.Count; i++)
            {
                var scanLine = ScanLines[i];
                Game.DrawLine(scanLine[0], scanLine[1], Color.Yellow);
                if (RayCastHelper.ImpassableObjects(scanLine[0], scanLine[1]).Count() == 0)
                {
                    m_availableDirection = i == 0 ? AvailableTurretDirection.Right : AvailableTurretDirection.Left;
                    if (m_availableDirection == prioritizedDirection)
                        break;
                }
            }
            if (m_availableDirection == AvailableTurretDirection.None) return false;

            // Uncomment if Engineer is too OP
            // foreach (var bot in BotManager.GetBots<EngineerBot>())
            // {
            //     if (bot.IsBuilding) return false;
            // }

            if (Actor.AreEnemiesNearby()) return false;

            foreach (var turret in WeaponManager.GetWeapons<Turret>())
            {
                if (turret.Broken) continue;

                var area = ScriptHelper.Area(
                    turret.Position + Vector2.UnitX * 32 * turret.Direction + Vector2.UnitY * 7,
                    turret.Position - Vector2.UnitX * 20 * turret.Direction - Vector2.UnitY * 14);
                Game.DrawArea(area);
                //ScriptHelper.LogDebug(area, area.Intersects(player.GetAABB()));
                if (area.Intersects(Player.GetAABB()))
                    return false;

                if (ScriptHelper.IntersectCircle(Actor.Position, turret.Position, 275, turret.MinAngle, turret.MaxAngle))
                    return false;
            }

            return true;
        }

        private TurretPlaceholder m_targetPlaceholder = null;
        private bool CheckExistingPlaceholder()
        {
            var untouchPlaceholders = WeaponManager.GetUntouchedTurretPlaceholders();

            if (untouchPlaceholders.Count() > 0)
            {
                var minDistanceToPlaceholder = float.PositiveInfinity;
                foreach (var p in untouchPlaceholders)
                {
                    var distanceToPlayer = Vector2.Distance(p.Value.Placeholder.Position, Actor.Position);
                    if (minDistanceToPlaceholder > distanceToPlayer)
                    {
                        minDistanceToPlaceholder = distanceToPlayer;
                        m_targetPlaceholder = p.Value.Placeholder;
                    }
                }
            }

            return m_targetPlaceholder != null;
        }

        private void GoToExistingPlaceholder()
        {
            var bs = Player.GetBotBehaviorSet();

            Player.SetGuardTarget(m_targetPlaceholder.RepresentedObject);
            bs.GuardRange = 1f;
            bs.ChaseRange = 1f;
            Player.SetBotBehaviorSet(bs);
            m_state = EngineerState.GoingToPlaceholder;
        }

        private void CheckArriveTargetPlaceholder()
        {
            if (m_targetPlaceholder.GetAABB().Intersects(Player.GetAABB()) && Actor.HasEquipment)
            {
                // At the time the builder arrives, another builder may arrived first and already started building
                if (!WeaponManager.GetUntouchedTurretPlaceholders()
                    .Where((p) => p.Key == m_targetPlaceholder.UniqueID)
                    .Any())
                {
                    if (!IsInactive)
                    {
                        m_state = EngineerState.Analyzing;
                    }
                    else
                    {
                        if (!ShouldBuildTurretHere())
                        {
                            Player.SetGuardTarget(null);
                            m_state = EngineerState.Normal;
                        }
                    }
                }
                else
                    StartBuildingTurret(m_targetPlaceholder.Direction);
            }
        }

        private void StartBuildingTurret()
        {
            if (m_availableDirection == AvailableTurretDirection.None) return;
            var direction = m_availableDirection == AvailableTurretDirection.Left ? TurretDirection.Left : TurretDirection.Right;
            StartBuildingTurret(direction);
        }
        private void StartBuildingTurret(TurretDirection direction)
        {
            Player.SetInputEnabled(false);
            if (Player.CurrentWeaponDrawn != WeaponItemType.Melee)
                Player.AddCommand(new PlayerCommand(PlayerCommandType.DrawMelee));
            Player.AddCommand(new PlayerCommand(PlayerCommandType.Walk, direction == TurretDirection.Left ?
                PlayerCommandFaceDirection.Left : PlayerCommandFaceDirection.Right, 10));

            m_state = EngineerState.PreBuilding;
        }

        private float m_prepareTimer = 0f;
        private void UpdatePrebuilding(float elapsed)
        {
            if (IsAttacked)
                StopBuilding();

            if (Player.IsIdle)
            {
                // Wait for the player to walk to position. If execute StartCrouch immediately, player will roll instead
                // WaitDestinationReached not working btw
                m_prepareTimer += elapsed;
                if (m_prepareTimer >= 150)
                {
                    Player.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch));

                    if (m_targetPlaceholder == null)
                    {
                        m_state = EngineerState.Building;
                        m_prepareTimer = 0f;
                        Actor.CreateNewTurret();
                    }
                    else
                    {
                        // Execute first hit before changing state to occupy placeholder
                        Player.AddCommand(new PlayerCommand(PlayerCommandType.AttackOnce));
                        ScriptHelper.Timeout(() =>
                        {
                            m_state = EngineerState.Building;
                            m_prepareTimer = 0f;
                        }, HitTime);
                    }
                }
            }
        }

        private void StopBuilding()
        {
            m_hitTimer = 0f;
            m_targetPlaceholder = null;

            Player.AddCommand(new PlayerCommand(PlayerCommandType.StopCrouch));
            Player.SetInputEnabled(true);
            m_state = EngineerState.Normal;
        }

        private float m_hitTimer = 0f;
        private static readonly uint HitTime = 700;
        private void UpdateBuildingTurret()
        {
            if (IsAttacked || !Actor.IsOccupying)
            {
                StopBuilding(); return;
            }

            if (ScriptHelper.IsElapsed(m_hitTimer, HitTime))
            {
                Player.AddCommand(new PlayerCommand(PlayerCommandType.AttackOnce));
                m_hitTimer = Game.TotalElapsedGameTime;
            }
        }

        public void OnBuildCompleted() { StopBuilding(); }
    }
    public class FarmerBot : Bot
    {
        public FarmerBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();

            var chickens = Game.IsEditorTest ? 6 : 6;
            for (var i = 0; i < chickens; i++)
                WeaponManager.SpawnWeapon(BeWeapon.Chicken, this);
        }

        public void BreedChicken()
        {
            WeaponManager.SpawnWeapon(BeWeapon.Chicken, this);
        }
    }
    public class GangsterBot : Bot
    {
        public GangsterBot(BotArgs args) : base(args)
        {
            _isElapsedCheckCamp = ScriptHelper.WithIsElapsed(60, 120);
        }

        private static Dictionary<PlayerTeam, Camp> Gangs = new Dictionary<PlayerTeam, Camp>
        {
            { PlayerTeam.Team1, null },
            { PlayerTeam.Team2, null },
            { PlayerTeam.Team3, null },
            { PlayerTeam.Team4, null },
        };

        private Camp Gang
        {
            get { return Gangs[Player.GetTeam()]; }
            set { Gangs[Player.GetTeam()] = value; }
        }

        private Func<bool> _isElapsedCheckCamp;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Gang == null && Player.GetTeam() != PlayerTeam.Independent && _isElapsedCheckCamp())
                TryCamping();
        }

        private bool CanCamp()
        {
            foreach (var camp in Gangs.Values)
            {
                var enemyHeadquarter = camp != null ? camp.Position : new Vector2(1000, 1000);
                if (Vector2.Distance(enemyHeadquarter, Position) < 100) return false;
            }

            if (!Player.IsOnGround) return false;

            var ground = ScriptHelper.GetGroundObject(Player);
            if (ground == null || ground.GetCollisionFilter().CategoryBits != CategoryBits.StaticGround) return false;
            
            return true;
        }


        private void TryCamping()
        {
            if (!CanCamp()) return;
            Gang = (Camp)WeaponManager.SpawnWeapon(BeWeapon.Camp, this);
        }
    }
    public class HackerBot : Bot
    {
        public HackerBot(BotArgs args) : base(args)
        {
            UpdateDelay = 200;
        }

        protected override void OnUpdate(float elapsed)
        {
            if (Player.IsRemoved) return;

            base.OnUpdate(elapsed);

            var profile = Player.GetProfile();
            var currentColor = profile.Head.Color2;
            var newColor = "";

            switch (currentColor)
            {
                case "ClothingLightRed":
                    newColor = "ClothingLightOrange";
                    break;
                case "ClothingLightOrange":
                    newColor = "ClothingLightYellow";
                    break;
                case "ClothingLightYellow":
                    newColor = "ClothingLightGreen";
                    break;
                case "ClothingLightGreen":
                    newColor = "ClothingLightCyan";
                    break;
                case "ClothingLightCyan":
                    newColor = "ClothingLightBlue";
                    break;
                case "ClothingLightBlue":
                    newColor = "ClothingLightPurple";
                    break;
                case "ClothingLightPurple":
                    newColor = "ClothingLightRed";
                    break;
                default:
                    newColor = "ClothingLightCyan";
                    break;
            }
            profile.Head.Color2 = newColor;
            profile.ChestOver.Color2 = newColor;
            profile.Feet.Color1 = newColor;
            Player.SetProfile(profile);
        }
    }
    public class HitmanBot : Bot
    {
        private static Vector2 FarAwayPosition = ScriptHelper.GetFarAwayPosition();
        static HitmanBot()
        {
            Game.CreateObject("Concrete07B", new Vector2(FarAwayPosition.X, FarAwayPosition.Y - 30));
        }

        public bool IsHiding { get; private set; }

        public HitmanBot(BotArgs args) : base(args) { }

        private Events.ProjectileHitCallback _projectileHitCb;
        public override void OnSpawn()
        {
            base.OnSpawn();

            _projectileHitCb = Events.ProjectileHitCallback.Start((projectile, args) =>
            {
                if (!args.IsPlayer || projectile.InitialOwnerPlayerID != Player.UniqueID) return;

                var player = Game.GetPlayer(args.HitObjectID);
                var isHitFromBehind = Math.Sign(projectile.Velocity.X) == Math.Sign(player.FacingDirection);

                if (isHitFromBehind)
                {
                    var extraDamage = projectile.GetProperties().PlayerDamage * 3;
                    player.DealDamage(extraDamage);
                    Game.PlayEffect(EffectName.CustomFloatText, player.GetWorldPosition(), "critical damage");
                }
                else
                {
                    var healDamage = projectile.GetProperties().PlayerDamage * .5f; // damage from the front only deals half as much
                    player.SetHealth(player.GetHealth() + healDamage);
                }
            });
        }

        private float _checkTime = 0;
        private float _cooldownTime = 0;
        private bool _isCooldown = false;
        private const float CooldownTime = 7000;
        private float _hidingTime = 0;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (_isCooldown && ScriptHelper.IsElapsed(_cooldownTime, CooldownTime)) _isCooldown = false;
            if (IsHiding || _isCooldown) return;

            if (ScriptHelper.IsElapsed(_checkTime, 60))
            {
                foreach (var portal in Game.GetObjects<IObjectPortal>())
                {
                    if (Player.GetAABB().Intersects(portal.GetAABB()))
                        Hide();
                }

                _checkTime = Game.TotalElapsedGameTime;
            }
        }

        private void Hide()
        {
            Game.WriteToConsole("hide");
            Player.SetInputEnabled(false);
            Player.SetNametagVisible(false);
            Player.SetWorldPosition(FarAwayPosition);
            IsHiding = true;
            _hidingTime = RandomHelper.Between(5000, 20000);

            ScriptHelper.Timeout(() =>
            {
                var minDistance = float.MaxValue;
                IObject portalToShow = null;

                foreach (var portal in Game.GetObjects<IObjectPortal>())
                {
                    foreach (var enemy in Game.GetPlayers().Where(p => !ScriptHelper.SameTeam(p, Player)))
                    {
                        var distanceToEnemy = Vector2.Distance(enemy.GetWorldPosition(), portal.GetWorldPosition());
                        if (distanceToEnemy < minDistance)
                        {
                            minDistance = distanceToEnemy;
                            portalToShow = portal;
                        }
                    }
                }
                Show(portalToShow);
            }, (uint)_hidingTime);
        }

        private void Show(IObject portalToShow)
        {
            Game.WriteToConsole("show");
            Player.SetInputEnabled(true);
            Player.SetNametagVisible(true);
            Player.SetWorldPosition(portalToShow.GetWorldPosition());
            IsHiding = false;
            _isCooldown = true;
            _cooldownTime = Game.TotalElapsedGameTime;
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);
            _projectileHitCb.Stop();
        }
    }
    public class HunterBot : Bot
    {
        public HunterBot(BotArgs args) : base(args)
        {
            _isElapsedCheckTarget = ScriptHelper.WithIsElapsed(1000);
        }

        private Func<bool> _isElapsedCheckTarget;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;

            if (_isElapsedCheckTarget())
            {
                var target = Player.GetForcedBotTarget();
                if (target == null || (ScriptHelper.IsPlayer(target) && ScriptHelper.AsPlayer(target).IsDead))
                {
                    target = Game.GetPlayers().Where(p => !p.IsDead && !ScriptHelper.SameTeam(p, Player) && ScriptHelper.IsBear(p)).FirstOrDefault();
                    if (target != null)
                        Player.SetForcedBotTarget(target);
                }
            }
        }
    }
    public class IncineratorBot : PyromaniacBot
    {
        public IncineratorBot(BotArgs args) : base(args)
        {
            BoostOnBurnLevel = 2;
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (Player.CurrentPrimaryWeapon.WeaponItem == WeaponItem.GRENADE_LAUNCHER)
            {
                Game.SpawnFireNodes(Position, 20, 5f, FireNodeType.Flamethrower);
                Game.TriggerFireplosion(Position, 60f);
                Game.TriggerExplosion(Position);
            }
        }
    }
    public class InfiniteGrab_Controller : Controller<Bot>
    {
        private bool _isHoldingPlayerInGrab = false;
        public override void OnUpdate(float elapsed)
        {
            if (Player.IsHoldingPlayerInGrab)
            {
                if (Player.IsInputEnabled)
                    Player.SetInputEnabled(false);

                var grabbedPlayer = Game.GetPlayer(Player.HoldingPlayerInGrabID);
                if (grabbedPlayer.IsRemoved)
                    Player.SetInputEnabled(true);
            }

            if (_isHoldingPlayerInGrab && !Player.IsHoldingPlayerInGrab)
            {
                if (!Player.IsInputEnabled)
                    Player.SetInputEnabled(true);
            }

            _isHoldingPlayerInGrab = Player.IsHoldingPlayerInGrab;
        }
    }
    public class KingpinBot : Bot
    {
        private Controller<Bot> _controller;

        public KingpinBot(BotArgs a, Controller<Bot> controller) : base(a)
        {
            if (controller != null)
            {
                _controller = controller;
                _controller.Actor = this;
            }
        }

        private float m_crushEnemyTime = 0f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;

            if (_controller != null) _controller.OnUpdate(elapsed);

            // push objects away while sprinting
            var vec = Player.GetLinearVelocity();
            if (Math.Abs(vec.X) > Constants.MAX_WALK_SPEED)
            {
                var results = Game.RayCast(Position, Position + Player.AimVector * 8, new RayCastInput()
                {
                    FilterOnMaskBits = true,
                    MaskBits = CategoryBits.DynamicG1,
                    ClosestHitOnly = true,
                }).Where(r => r.HitObject != null);

                if (results.Count() > 0)
                    results.First().HitObject.SetLinearVelocity(new Vector2(Player.AimVector.X * 8, 3));
            }

            // crush enemy while grabbing
            if (Player.IsHoldingPlayerInGrab && ScriptHelper.IsElapsed(m_crushEnemyTime, 120))
            {
                var enemy = Game.GetPlayer(Player.HoldingPlayerInGrabID);

                if (enemy != null)
                {
                    enemy.DealDamage(1.5f);
                    Game.PlayEffect(EffectName.MeleeHitBlunt, enemy.GetWorldPosition());
                    m_crushEnemyTime = Game.TotalElapsedGameTime;
                    if (enemy.GetHealth() == 0) enemy.Gib();
                }
            }
        }

        public override void OnMeleeDamage(IPlayer attacker, PlayerMeleeHitArg arg)
        {
            base.OnMeleeDamage(attacker, arg);
            // TODO: move this ability to other bot
            // Immune to melee attack but will be pushed back a bit
            var pos = Player.GetWorldPosition();
            var direction = Math.Sign(pos.X - arg.HitPosition.X);
            Player.SetLinearVelocity(new Vector2(direction * 5, 0));
        }
    }
    class KriegbarBot_Controller : Controller<KriegbärBot>
    {
        private int m_oldHoldingPlayerInGrabID = 0;
        private float m_checkCorpseDelay = 0f;
        private float m_cooldownTime = 0f;
        private enum State { Normal, Cooldown }
        private State m_state = State.Normal;

        public override void OnUpdate(float elapsed)
        {
            if (Player.HoldingPlayerInGrabID != 0 && m_oldHoldingPlayerInGrabID == 0)
            {
                m_oldHoldingPlayerInGrabID = Player.HoldingPlayerInGrabID;
            }
            if (Player.HoldingPlayerInGrabID == 0 && m_oldHoldingPlayerInGrabID != 0)
            {
                m_oldHoldingPlayerInGrabID = Player.HoldingPlayerInGrabID;
            }

            switch (m_state)
            {
                case State.Normal:
                    if (ScriptHelper.IsElapsed(m_checkCorpseDelay, 125))
                    {
                        m_checkCorpseDelay = Game.TotalElapsedGameTime;
                        if (!PlayersNearby() && Actor.GetThrowTargets().Any())
                        {
                            var corpseNearby = CorpsesNearby().FirstOrDefault();

                            if (corpseNearby != null)
                            {
                                ScriptHelper.Command(Player, new PlayerCommand[]
                                {
                                    new PlayerCommand(PlayerCommandType.StartCrouch),
                                    new PlayerCommand(PlayerCommandType.Grab),
                                });
                                m_state = State.Cooldown;
                                m_cooldownTime = Game.TotalElapsedGameTime;
                            }
                        }
                    }
                break;
                case State.Cooldown:
                    if (ScriptHelper.IsElapsed(m_cooldownTime, 3000))
                        m_state = State.Normal;
                    break;
            }
        }

        private bool PlayersNearby()
        {
            Game.DrawArea(ScriptHelper.GrowFromCenter(Actor.Position, 50, 30), Color.Red);
            return Game.GetPlayers()
                .Where(p => !p.IsDead
                && !ScriptHelper.SameTeam(p, Player)
                && ScriptHelper.GrowFromCenter(Actor.Position, 50, 30).Intersects(p.GetAABB())).Any();
        }

        private IEnumerable<IPlayer> CorpsesNearby()
        {
            var area = Player.GetAABB();
            var center = area.Center;
            if (Player.FacingDirection > 0)
            {
                area.Left += 5;
                area.Right += 20;
            }
            if (Player.FacingDirection < 0)
            {
                area.Right -= 5;
                area.Left -= 20;
            }
            Game.DrawArea(area, Color.Green);
            return Game.GetPlayers().Where(p => p.IsDead && p.IsLayingOnGround
                && area.Intersects(p.GetAABB()) && Vector2.Distance(center, p.GetAABB().Center) > 10);
        }
    }
    public class KriegbärBot : Bot
    {
        private Controller<KriegbärBot> m_controller;
        public IPlayer ThrowTarget { get; private set; }

        public KriegbärBot(BotArgs args, Controller<KriegbärBot> controller) : base(args)
        {
            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        private int _holdingPlayerInGrabID = 0;
        private bool IsThrowingFromGrab = false;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);

            if (_holdingPlayerInGrabID == 0 && Player.HoldingPlayerInGrabID != 0)
            {
                OnEnemyGrabbed(Game.GetPlayer(Player.HoldingPlayerInGrabID));
                _holdingPlayerInGrabID = Player.HoldingPlayerInGrabID;
            }
            if (_holdingPlayerInGrabID != 0 && Player.HoldingPlayerInGrabID == 0)
            {
                OnEnemyGetThrownFromGrab(Game.GetPlayer(_holdingPlayerInGrabID));
                _holdingPlayerInGrabID = Player.HoldingPlayerInGrabID;
                IsThrowingFromGrab = false;
            }
        }

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            foreach (var keyInfo in keyInfos)
            {
                if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.BLOCK)
                {
                    IsThrowingFromGrab = Player.IsHoldingPlayerInGrab;
                    break;
                }
            }
        }

        public IEnumerable<IPlayer> GetThrowTargets(int thrownPlayerID = 0)
        {
            return Game.GetPlayers()
                .Where(p => p.UniqueID != thrownPlayerID && p.UniqueID != Player.UniqueID && !p.IsDead && !ScriptHelper.SameTeam(p, Player));
        }

        private void OnEnemyGrabbed(IPlayer grabbedPlayer)
        {
            var mod = Player.GetModifiers();
            mod.MeleeStunImmunity = 1;
            SetModifiers(mod);

            var targets = GetThrowTargets(grabbedPlayer.UniqueID);
            var grabPosition = grabbedPlayer.GetWorldPosition();

            foreach (var target in targets)
            {
                var end = target.GetWorldPosition();
                if (Vector2.Distance(grabPosition, end) > 450) continue;
                var results = Game.RayCast(grabPosition, end, new RayCastInput()
                {
                    FilterOnMaskBits = true,
                    MaskBits = CategoryBits.Player + CategoryBits.StaticGround,
                }).Where(r => r.HitObject != null && r.ObjectID != grabbedPlayer.UniqueID && r.ObjectID != Player.UniqueID);

                if (!results.Any()) continue;
                var result = results.FirstOrDefault();
                if (!result.IsPlayer) continue;

                ThrowTarget = Game.GetPlayer(result.ObjectID);

                if (ThrowTarget.GetWorldPosition().X < Position.X && Player.GetFaceDirection() != -1)
                {
                    ScriptHelper.Command(Player, PlayerCommandType.Walk, FaceDirection.Left);
                }
                else if (ThrowTarget.GetWorldPosition().X > Position.X && Player.GetFaceDirection() != 1)
                {
                    ScriptHelper.Command(Player, PlayerCommandType.Walk, FaceDirection.Right);
                }

                if (Game.IsEditorTest)
                {
                    var p = ThrowTarget;
                    ScriptHelper.RunIn(() => Game.DrawArea(p.GetAABB(), Color.Green), 3000);
                }
                break;
            }
        }

        private void OnEnemyGetThrownFromGrab(IPlayer thrownPlayer)
        {
            if (!Player.IsBot && !IsThrowingFromGrab || ThrowTarget == null) return;

            var grabPosition = thrownPlayer.GetWorldPosition();
            var throwDirection = Vector2.Normalize(ThrowTarget.GetWorldPosition() - grabPosition) + Vector2.UnitY * .05f;
            var mod = thrownPlayer.GetModifiers();

            mod.ImpactDamageTakenModifier = .01f;
            thrownPlayer.SetModifiers(mod);
            thrownPlayer.TrackAsMissile(true);
            ResetModifiers();

            var cb = (Events.PlayerDamageCallback)null;
            var stop = false;
            var mass = thrownPlayer.GetMass();

            thrownPlayer.SetMass(0); // avoid gravity
            Action Stop = () =>
            {
                if (stop) return;
                cb.Stop(); stop = true; thrownPlayer.SetMass(mass); BotManager.GetBot(thrownPlayer).ResetModifiers();
            };

            ScriptHelper.Timeout(() => Stop(), 1500); // safeguard
            ScriptHelper.RunUntil(() => thrownPlayer.SetLinearVelocity(throwDirection * 25),
                () => thrownPlayer.IsOnGround || thrownPlayer.IsRemoved || stop, Stop);

            cb = Events.PlayerDamageCallback.Start((player, args) =>
            {
                if (args.DamageType == PlayerDamageEventType.Fall)
                {
                    if (player.UniqueID == thrownPlayer.UniqueID) Stop();
                    if (player.UniqueID != Player.UniqueID && thrownPlayer.GetAABB().Intersects(player.GetAABB()))
                    {
                        var velocity = player.GetLinearVelocity() * 1.75f;
                        velocity.Y = Math.Max(4f, velocity.Y + 4f); // bounce up a little to counter the friction
                        velocity = MathExtension.ClampMagnitude(velocity, 20);
                        player.SetLinearVelocity(velocity);
                        Stop();
                    }
                }
            });

            ThrowTarget = null;
        }
    }
    public class MechaBot : RobotBot
    {
        public static readonly List<string> DebrisList = new List<string> {
            "MetalDebris00A",
            "MetalDebris00B",
            "MetalDebris00C",
            "MetalDebris00D",
            "MetalDebris00E",
            "ItemDebrisDark00",
            "ItemDebrisDark01",
            "ItemDebrisShiny00",
            "ItemDebrisShiny01",
        };
        private static readonly List<string> WiringTubeList = new List<string> {
            "WiringTube00A",
            "WiringTube00A_D",
            "WiringTube00B",
        };

        enum MechaState
        {
            Normal,
            PreparingSupercharge,
            Supercharging,
            DealthKneeling,
        }

        private MechaState m_state;
        private Controller<MechaBot> m_controller;

        public MechaBot(BotArgs args, MechaBot_Controller controller) : base(args)
        {
            UpdateDelay = 0;
            m_state = MechaState.Normal;

            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        public override void OnSpawn()
        {
            base.OnSpawn();

            var behavior = Player.GetBotBehaviorSet();
            behavior.SearchForItems = false;
            behavior.DefensiveAvoidProjectilesLevel = 0f;
            behavior.DefensiveBlockLevel = 0f;
            behavior.MeleeWeaponUsage = false;
            behavior.RangedWeaponUsage = false;

            Player.SetBotBehaviorSet(behavior);
        }

        protected override void OnUpdate(float elapsed)
        {
            if (Player == null || Player.IsRemoved) return;

            base.OnUpdate(elapsed);

            UpdateChargeStatusColor();

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);

            switch (m_state)
            {
                case MechaState.Normal:
                    UpdateSuperChargeEnergy(elapsed);
                    break;
                case MechaState.PreparingSupercharge:
                    UpdatePrepareSuperCharge(elapsed);
                    break;
                case MechaState.Supercharging:
                    UpdateSuperCharging(elapsed);
                    break;
                case MechaState.DealthKneeling:
                    UpdateDealthKneeling(elapsed);
                    break;
            }
        }

        private float m_lastChargeEnergy;
        private void UpdateChargeStatusColor()
        {
            if (m_lastChargeEnergy < EnergyToCharge && m_superchargeEnergy >= EnergyToCharge)
            {
                var profile = Player.GetProfile();
                profile.Skin.Color2 = "ClothingLightGreen";
                Player.SetProfile(profile);
            }
            if (m_lastChargeEnergy > m_superchargeEnergy)
            {
                var profile = Player.GetProfile();
                profile.Skin.Color2 = "ClothingLightRed";
                Player.SetProfile(profile);
            }
            m_lastChargeEnergy = m_superchargeEnergy;
        }

        public readonly float EnergyToCharge = Game.IsEditorTest ? 3000f : 9000f;
        public bool IsSuperCharging { get { return m_state == MechaState.Supercharging || m_state == MechaState.PreparingSupercharge; } }
        private float m_superchargeEnergy = 0f;
        private float m_chargeTimer = 0f;
        private void UpdateSuperChargeEnergy(float elapsed)
        {
            if (m_superchargeEnergy < EnergyToCharge)
                m_superchargeEnergy += elapsed;

            Game.DrawText(string.Format("{0}/{1}", m_superchargeEnergy, EnergyToCharge), Position + Vector2.UnitY * 30);
        }

        private HashSet<int> chargedPlayers = new HashSet<int>();
        private HashSet<int> chargedObjects = new HashSet<int>();
        // TODO: remove friction while charging
        private void UpdateSuperCharging(float elapsed)
        {
            foreach (var player in Game.GetPlayers())
            {
                if (player == Player) continue;

                var position = player.GetWorldPosition();
                var angles = new float[] { MathExtension.ToRadians(25), MathExtension.ToRadians(65) };
                if (Player.FacingDirection < 0)
                    angles = ScriptHelper.Flip(angles, FlipDirection.Horizontal);

                if (ScriptHelper.IntersectCircle(player.GetAABB(), Position, ChargeHitRange)
                    && !chargedPlayers.Contains(player.UniqueID))
                {
                    Game.PlayEffect(EffectName.Electric, position);
                    Game.PlaySound("ElectricSparks", position);
                    chargedPlayers.Add(player.UniqueID);

                    var direction = RandomHelper.Direction(angles[0], angles[1], true);
                    player.SetLinearVelocity(direction * 15f);
                    ScriptHelper.Fall(player);
                }
            }

            var area = Player.GetAABB();
            area.Grow(4);
            foreach (var obj in Game.GetObjectsByArea(area))
            {
                if (obj.UniqueID == Player.UniqueID || chargedObjects.Contains(obj.UniqueID) || ScriptHelper.IsPlayer(obj))
                    continue;

                if (ScriptHelper.IsDynamicObject(obj) || RayCastHelper.ObjectsBulletCanDestroy.Contains(obj.Name))
                {
                    if (ScriptHelper.IntersectCircle(obj.GetWorldPosition(), Position, ChargeHitRange))
                    {
                        var v = obj.GetLinearVelocity();
                        obj.SetLinearVelocity(v + Vector2.UnitX * Player.FacingDirection * 25);
                        obj.DealDamage(3);
                        chargedObjects.Add(obj.UniqueID);
                    }
                }
            }

            Game.PlayEffect(EffectName.FireNodeTrailAir, Position + new Vector2(-4, -4));
            Game.PlayEffect(EffectName.FireNodeTrailAir, Position + new Vector2(4, -4));

            m_chargeTimer += elapsed;
            if (m_chargeTimer >= 1500)
            {
                StopSuperCharge();
                m_chargeTimer = 0f;
            }
        }

        public bool CanSuperCharge()
        {
            return m_state == MechaState.Normal && m_superchargeEnergy >= EnergyToCharge && !Player.IsInMidAir;
        }

        public static readonly float ChargeHitRange = 25f;

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            foreach (var keyInfo in keyInfos)
            {
                if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT
                    && Player.KeyPressed(VirtualKey.CROUCH_ROLL_DIVE))
                {
                    ExecuteSupercharge();
                }
            }
        }

        public void ExecuteSupercharge()
        {
            if (CanSuperCharge())
                PrepareSuperCharge();
            else if (m_superchargeEnergy < EnergyToCharge)
                Game.PlayEffect(EffectName.CustomFloatText, Position, "Not enough fuel");
        }

        private void PrepareSuperCharge()
        {
            m_state = MechaState.PreparingSupercharge;
            Player.SetInputEnabled(false);
            Player.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch));
        }

        private float m_kneelPrepareTime = 0f;
        private float m_kneelPrepareEffectTime = 0f;
        private void UpdatePrepareSuperCharge(float elapsed)
        {
            m_kneelPrepareTime += elapsed;

            if (m_kneelPrepareTime >= 500)
            {
                Player.AddCommand(new PlayerCommand(PlayerCommandType.StopCrouch));
                m_kneelPrepareTime = 0f;

                StartSuperCharge();
            }
            else
            {
                m_kneelPrepareEffectTime += elapsed;
                if (m_kneelPrepareEffectTime >= 90)
                {
                    var pos = Position + Vector2.UnitX * -Player.FacingDirection * 10;
                    Game.PlayEffect(EffectName.Electric, pos);
                    Game.PlaySound("ElectricSparks", pos);
                    m_kneelPrepareEffectTime = 0f;
                }
            }
        }

        private void StartSuperCharge()
        {
            Player.SetLinearVelocity(Vector2.UnitY * 6);
            ScriptHelper.Timeout(() => Player.SetLinearVelocity(
                Vector2.UnitX * Player.FacingDirection * 16f +
                Vector2.UnitY * 3), 30);

            Game.PlayEffect(EffectName.FireNodeTrailGround, Position + new Vector2(-4, -4));
            Game.PlaySound("Flamethrower", Position);
            m_state = MechaState.Supercharging;
        }

        private void StopSuperCharge()
        {
            Player.SetInputEnabled(true);
            m_superchargeEnergy = 0f;
            chargedPlayers.Clear();
            chargedObjects.Clear();
            m_state = MechaState.Normal;
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            var mod = Player.GetModifiers();
            var currentHealth = mod.CurrentHealth;
            var maxHealth = mod.MaxHealth;

            if (currentHealth / maxHealth <= 0.25f)
            {
                Game.PlayEffect(EffectName.Electric, Position);
                Game.PlaySound("ElectricSparks", Position);
            }
        }

        // After the player died, a double body is used for death animation and is the actual body after that
        // the original body is Removed since you cannot "unkill" a player to add additional commands for death animation
        private bool m_useDoubleBody = false;
        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (Player == null || m_useDoubleBody) return;

            if (args.Removed) SelfDestruct();
            else
            {
                if (RandomHelper.Boolean()) SelfDestruct();
            }

            if (!m_useDoubleBody && !m_destroyed)
            {
                m_useDoubleBody = true;
                var doubleBody = Game.CreatePlayer(Position);

                Decorate(doubleBody);
                var mod = doubleBody.GetModifiers();
                mod.CurrentHealth = mod.MaxHealth;

                doubleBody.SetModifiers(mod);
                doubleBody.SetValidBotEliminateTarget(false);
                doubleBody.SetStatusBarsVisible(false);
                doubleBody.SetNametagVisible(false);
                doubleBody.SetFaceDirection(Player.GetFaceDirection());

                BotManager.SetPlayer(this, doubleBody);
                Player.Remove();
                Player = doubleBody;

                StartDeathKneeling();
            }
        }

        private bool m_destroyed = false;
        private void SelfDestruct()
        {
            m_destroyed = true;
            var effects = new List<Tuple<string, int>>() {
                    Tuple.Create(EffectName.BulletHitMetal, 1),
                    Tuple.Create(EffectName.Steam, 2),
                    Tuple.Create(EffectName.Electric, 4),
                };

            foreach (var effect in effects)
            {
                var effectName = effect.Item1;
                var count = effect.Item2;

                for (var i = 0; i < count; i++)
                {
                    var position = RandomHelper.WithinArea(Player.GetAABB());
                    Game.PlayEffect(effectName, position);
                }
            }

            for (var i = 0; i < 4; i++)
            {
                var debrisLinearVelocity = RandomHelper.Direction(15, 165) * 10;
                var debris = Game.CreateObject(RandomHelper.GetItem(DebrisList),
                    Position,
                    0f,
                    debrisLinearVelocity,
                    0f);
                debris.SetMaxFire();

                Game.CreateObject(RandomHelper.GetItem(DebrisList),
                    Position,
                    0f,
                    debrisLinearVelocity * -Vector2.UnitX,
                    0f);

                if (RandomHelper.Boolean())
                {
                    Game.CreateObject(RandomHelper.GetItem(WiringTubeList),
                        Position,
                        0f,
                        RandomHelper.Direction(0, 180) * 6,
                        0f);
                }
            }

            Game.TriggerExplosion(Position);
        }

        private void StartDeathKneeling()
        {
            if (Player == null) return;

            ScriptHelper.MakeInvincible(Player);
            Player.ClearCommandQueue();
            Player.SetBotBehaviorActive(false);
            Player.AddCommand(new PlayerCommand(PlayerCommandType.DeathKneelInfinite));
            m_state = MechaState.DealthKneeling;
        }
        private void StopKneelingAndDie()
        {
            // Make player damageable again, so it can be exploded when overkilled
            Player.SetModifiers(new PlayerModifiers(defaultValues: true)
            {
                SizeModifier = Info.Modifiers.SizeModifier,
            });
            Player.AddCommand(new PlayerCommand(PlayerCommandType.StopDeathKneel));
            Player.SetBotBehaviorActive(true);
            Player.Kill();
        }

        private float m_kneelingTime = 0f;
        private bool m_hasShotGrenades = false;
        private void UpdateDealthKneeling(float elapsed)
        {
            if (Player.IsDeathKneeling)
            {
                m_kneelingTime += elapsed;
                if (m_kneelingTime >= 600 && !m_hasShotGrenades)
                {
                    var grenadeDirection = new Vector2(Player.GetFaceDirection(), 1f);

                    for (uint i = 1; i <= 3; i++)
                    {
                        ScriptHelper.Timeout(() =>
                        {
                            if (Player.IsRemoved) return;
                            Game.PlaySound("GLauncher", Position);
                            Game.SpawnProjectile(ProjectileItem.GRENADE_LAUNCHER, Position + new Vector2(-5, 20), grenadeDirection);
                            grenadeDirection.X *= 2f;
                        }, 300 * i);
                    }
                    m_hasShotGrenades = true;
                }

                if (m_kneelingTime >= 2500)
                {
                    StopKneelingAndDie();
                }
            }
            else
            {
                if (!m_hasShotGrenades)
                {
                    StartDeathKneeling();
                    m_kneelingTime = 0f;
                }
                else
                {
                    StopKneelingAndDie();
                }
            }
        }
    }
    public class MechaBot_Controller : Controller<MechaBot>
    {
        private static readonly float ChargeMinimumRange = 30f;
        private static readonly float ChargeRange = 60;

        public override void OnUpdate(float elapsed)
        {
            if (Actor.CanSuperCharge())
            {
                if (ShouldSuperCharge())
                {
                    Actor.ExecuteSupercharge();
                }
            }

            DrawDebugging();
        }

        private Vector2[] GetLineOfSight()
        {
            var lineStart = Actor.Position + Vector2.UnitY * 12f;

            return new Vector2[]
            {
                lineStart,
                lineStart + Player.AimVector * (ChargeMinimumRange + ChargeRange),
            };
        }

        private bool ShouldSuperCharge()
        {
            return (Player.IsSprinting || Player.IsIdle || Player.IsWalking || Player.IsRunning)
                && HasTargetToCharge();
        }

        private bool HasTargetToCharge()
        {
            var los = GetLineOfSight();
            var lineStart = los[0];
            var lineEnd = los[1];

            foreach (var result in RayCastHelper.Players(lineStart, lineEnd))
            {
                var player = Game.GetPlayer(result.ObjectID);
                var inMinimumRange = ScriptHelper.IntersectCircle(
                    player.GetAABB(),
                    Actor.Position,
                    ChargeMinimumRange);

                if (!inMinimumRange && !player.IsDead && !player.IsInMidAir && !ScriptHelper.SameTeam(player, Player))
                {
                    return true;
                }
            }

            return false;
        }

        private void DrawDebugging()
        {
            if (!Game.IsEditorTest) return;
            var los = GetLineOfSight();

            Game.DrawCircle(Actor.Position, ChargeMinimumRange, Color.Red);
            Game.DrawCircle(Actor.Position, MechaBot.ChargeHitRange, Color.Cyan);
            if (Actor.CanSuperCharge())
            {
                Game.DrawLine(los[0], los[1], Color.Green);
            }
            else
                Game.DrawLine(los[0], los[1], Color.Red);
        }
    }
    public class MetroCopBot : Bot
    {
        public static List<LaserSweeper> Sweepers = new List<LaserSweeper>();

        public MetroCopBot(BotArgs args) : base(args)
        {
            _isElaspedSpawnSweeper = ScriptHelper.WithIsElapsed(4340);
        }

        private Func<bool> _isElaspedSpawnSweeper;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (!Player.IsDead && _isElaspedSpawnSweeper() && Sweepers.Count < 2)
                Sweepers.Add((LaserSweeper)WeaponManager.SpawnWeapon(BeWeapon.LaserSweeper, this));
        }
    }
    class MirrorManBot : Bot
    {
        public MirrorManBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetHitEffect(PlayerHitEffect.Metal);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            PlayShinyEffect(elapsed);

            var primaryWeapon = Player.CurrentPrimaryWeapon;
            var secondaryWeapon = Player.CurrentSecondaryWeapon;

            if (primaryWeapon.PowerupBouncingRounds == 0 && primaryWeapon.TotalAmmo > 0)
            {
                Player.SetCurrentPrimaryWeaponAmmo(primaryWeapon.TotalAmmo, ProjectilePowerup.Bouncing);
            }
            if (secondaryWeapon.PowerupBouncingRounds == 0 && secondaryWeapon.TotalAmmo > 0)
            {
                Player.SetCurrentSecondaryWeaponAmmo(secondaryWeapon.TotalAmmo, ProjectilePowerup.Bouncing);
            }
        }

        private List<float> m_effectTimes = new List<float>() { 0, 0 };
        private void PlayShinyEffect(float elapsed)
        {
            for (var i = 0; i < m_effectTimes.Count; i++)
            {
                m_effectTimes[i] += elapsed;
                if (m_effectTimes[i] >= 400)
                {
                    if (RandomHelper.Boolean())
                    {
                        Game.PlayEffect(EffectName.ItemGleam, RandomHelper.WithinArea(Player.GetAABB()));
                        m_effectTimes[i] = 0;
                    }
                    else
                        m_effectTimes[i] = RandomHelper.Between(0, 400);
                }
            }
        }

        public override void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            base.OnProjectileHit(projectile, args);

            if (RandomHelper.Between(0, 100) < 90)
            {
                DeflectBullet(projectile, args.HitNormal);
            }
        }

        private void DeflectBullet(IProjectile projectile, Vector2 normal)
        {
            var reflectVec = Vector2.Reflect(projectile.Direction, normal)
                + RandomHelper.Direction(-65, 65);
            var direction = projectile.Direction.X > 0 ? 1 : -1;
            var position = projectile.Position - direction * Vector2.UnitX * 5;
            var powerup = ProjectilePowerup.None;

            if (projectile.PowerupBounceActive)
                powerup = ProjectilePowerup.Bouncing;
            if (projectile.PowerupFireActive)
                powerup = ProjectilePowerup.Fire;

            Game.SpawnProjectile(projectile.ProjectileItem, position, reflectVec, powerup);
        }
    }
    public class MutantBot : Bot
    {
        public MutantBot(BotArgs args) : base(args) { }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (args.Removed) return;

            var mod = Player.GetModifiers();
            if (mod.SizeModifier <= Size.Tiny) return;

            var twin1 = Breed();
            var twin2 = Breed();
            
            twin1.DisarmAll();

            twin2.Player.SetWorldPosition(twin1.Position);
            twin1.Decorate(twin2.Player);

            mod.SizeModifier = Size.Tiny;
            mod.MaxHealth /= 2;
            mod.MeleeDamageDealtModifier /= 2;
            twin1.SetModifiers(mod, true);
            twin2.SetModifiers(mod, true);

            var profiles = SplitProfile(Player);
            twin1.Player.SetProfile(profiles[0]);
            twin2.Player.SetProfile(profiles[1]);

            Game.PlayEffect(EffectName.Smack, Position);
            Player.Remove();
        }

        private static readonly ClothingType[] LowerBodyClothingTypes = new ClothingType[] { ClothingType.Feet, ClothingType.Legs, ClothingType.Waist, };
        private static readonly ClothingType[] UpperBodyClothingTypes = new ClothingType[]
        {
            ClothingType.Accesory, ClothingType.ChestOver, ClothingType.ChestUnder, ClothingType.Hands, ClothingType.Head, 
        };
        public static IProfile[] SplitProfile(IPlayer player)
        {
            var profile1 = ScriptHelper.StripUnderwear(player.GetProfile());
            var profile2 = ScriptHelper.StripUnderwear(player.GetProfile());
            var stripeableClothingTypes = ScriptHelper.StrippeableClothingTypes(profile1);
            var lowerBodyClothingTypes = stripeableClothingTypes.Where(x => LowerBodyClothingTypes.Any(xx => xx == x)).ToList();
            var upperBodyClothingTypes = stripeableClothingTypes.Where(x => UpperBodyClothingTypes.Any(xx => xx == x)).ToList();

            lowerBodyClothingTypes.ForEach(x => ScriptHelper.Strip(profile1, x));
            upperBodyClothingTypes.ForEach(x => ScriptHelper.Strip(profile2, x));

            return new IProfile[] { profile1, profile2 };
        }

        private Bot Breed()
        {
            var bot = BotManager.SpawnBot(Type, faction: Faction, team: Player.GetTeam(), ignoreFullSpawner: true);
            bot.Position = Position;
            return bot;
        }
    }
    public class NadjaBot : Bot
    {
        private static List<Weapon> Traps = new List<Weapon>();
        private static readonly List<BeWeapon> TrapNames = new List<BeWeapon>() { BeWeapon.ShotgunTrap, BeWeapon.FireTrap, BeWeapon.Tripwire };
        private NadjaBotController _controller;

        public NadjaBot(BotArgs args) : base(args)
        {
            _isElapsedCheckPlaceTrap = ScriptHelper.WithIsElapsed(125);
            _controller = new NadjaBotController()
            {
                Bot = this
            };
        }

        private float _placeTrapTime = 0f;
        private Func<bool> _isElapsedCheckPlaceTrap;

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead || !Player.IsAIControlled) return;

            if (ScriptHelper.IsElapsed(_placeTrapTime, 9000))
            {
                if (_isElapsedCheckPlaceTrap() && CanPlaceTrap())
                {
                    _placeTrapTime = Game.TotalElapsedGameTime;
                    ScriptHelper.Command(Player, PlayerCommandType.StartCrouch, delayTime: 1000).ContinueWith(r => PlaceTrap());
                }
            }
        }

        public void PlaceTrap() { Traps.Add(WeaponManager.SpawnWeapon(RandomHelper.GetItem(TrapNames), Player)); }

        public bool CanPlaceTrap()
        {
            var check1 = Player.IsOnGround && !Traps.Any(x => Vector2.Distance(x.Position, Position) < 10);
            if (!check1) return false;
            var groundObj = ScriptHelper.GetGroundObject(Player);
            var check2 = groundObj != null && groundObj.GetCollisionFilter().CategoryBits == CategoryBits.StaticGround;
            return check2;
        }

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);
            _controller.OnPlayerKeyInput(keyInfos);
        }
    }

    public class NadjaBotController
    {
        public NadjaBot Bot;
        private float _placeTrapCooldownTime = 0f;
        public void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            foreach (var keyInfo in keyInfos)
            {
                if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT && Bot.Player.IsCrouching)
                {
                    if (ScriptHelper.IsElapsed(_placeTrapCooldownTime, 3000) && Bot.CanPlaceTrap())
                    {
                        _placeTrapCooldownTime = Game.TotalElapsedGameTime;
                        Bot.PlaceTrap();
                    }
                    break;
                }
            }
        }
    }
    class PoliceChiefBot : Bot
    {
        public PoliceChiefBot(BotArgs args) : base(args)
        {
        }

        public override void OnSpawn()
        {
            base.OnSpawn();

            foreach (var bot in BotManager.GetBots())
            {
                if (bot.Type == BotType.Police)
                {
                    var player = bot.Player;
                    var weaponItem = player.CurrentPrimaryWeapon.WeaponItem;

                    if (player.CurrentPrimaryWeapon.WeaponItem != WeaponItem.NONE)
                        PowerupManager.SetPowerup(player, weaponItem, RangedWeaponPowerup.Fatigue);
                    weaponItem = player.CurrentSecondaryWeapon.WeaponItem;
                    if (player.CurrentSecondaryWeapon.WeaponItem != WeaponItem.NONE)
                        PowerupManager.SetPowerup(player, weaponItem, RangedWeaponPowerup.Fatigue);
                }
            }
        }
    }
    public class PresidentBot : Bot
    {
        public PresidentBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            foreach (var bot in BotManager.GetBots())
            {
                if (bot.Player.UniqueID != Player.UniqueID && ScriptHelper.SameTeam(Player, bot.Player))
                {
                    var bs = bot.Player.GetBotBehaviorSet();
                    bs.GuardRange = 8;
                    bs.ChaseRange = 10;
                    bot.SetBotBehaviorSet(bs, true);
                    bot.Player.SetGuardTarget(Player);

                    var mod = bot.Player.GetModifiers();
                    mod.ImpactDamageTakenModifier = DamageTaken.VeryResistant;
                    bot.SetModifiers(mod, true);
                }
            }
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            UpdateObesity();
        }

        private bool _isFalling = false;
        private bool _isInMidAir = false;
        private bool _isLayingOnGround = false;
        private Vector2 _fallPosition;
        private Vector2 _linearVelocity;
        private void UpdateObesity()
        {
            var linearVec = Player.GetLinearVelocity();

            if (!_isInMidAir && Player.IsInMidAir && linearVec.Y > 3 && !Player.IsClimbing)
            {
                Player.SetLinearVelocity(linearVec + Vector2.UnitY * 2.5f);
            }
            if (!_isLayingOnGround && Player.IsLayingOnGround)
            {
                var groundObj = ScriptHelper.GetGroundObject(Player, CategoryBits.DynamicG1);
                if (groundObj != null && ScriptHelper.IsDynamicObject(groundObj))
                    groundObj.Destroy();
            }
            if (Player.IsInMidAir && !Player.IsFalling && linearVec.Y <= 0 && _linearVelocity.Y > 0)
            {
                if (RandomHelper.Boolean())
                {
                    ScriptHelper.Fall(Player);
                }
            }
            if (!_isFalling && Player.IsFalling)
                _fallPosition = Position;

            _isFalling = Player.IsFalling;
            _isInMidAir = Player.IsInMidAir;
            _isLayingOnGround = Player.IsLayingOnGround;
            _linearVelocity = linearVec;
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            if (args.DamageType == PlayerDamageEventType.Fall)
            {
                var fallDepth = Vector2.Distance(_fallPosition, Position);
                if (fallDepth < 10) return;
                var maxForce = Math.Min(fallDepth / 3, 25);
                ScriptHelper.CreateEarthquake(ScriptHelper.Grow(Player.GetAABB(), 60, 2), Player, 3, maxForce);
            }
        }
    }
    public class PyromaniacBot : Bot
    {
        public int BoostOnBurnLevel { get; protected set; }
        public int SpeedOnBurnLevel { get; protected set; }

        public PyromaniacBot(BotArgs args) : base(args)
        {
            _isElapsedCheckFire = ScriptHelper.WithIsElapsed(109);
            BoostOnBurnLevel = -1;
            SpeedOnBurnLevel = 1;
        }

        private Func<bool> _isElapsedCheckFire;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (_isElapsedCheckFire())
            {
                var burnLevel = Player.IsBurningInferno ? 2 : Player.IsBurning ? 1 : 0;
                if (BoostOnBurnLevel == burnLevel)
                    Player.SetStrengthBoostTime(15000);
                if (SpeedOnBurnLevel == burnLevel)
                    Player.SetSpeedBoostTime(15000);
            }
        }
    }
    public class RobotBot : Bot
    {
        private float m_electricElapsed = 0f;

        public RobotBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetHitEffect(PlayerHitEffect.Metal);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead)
            {
                UpdateCorpse(elapsed);
            }
            else
            {
                var mod = Player.GetModifiers();
                var healthLeft = mod.CurrentHealth / mod.MaxHealth;

                if (healthLeft <= 0.4f)
                    UpdateNearDeathEffects(elapsed, healthLeft);
            }
        }

        private void UpdateNearDeathEffects(float elapsed, float healthLeft)
        {
            m_electricElapsed += elapsed;

            if (m_electricElapsed >= 700)
            {
                if (RandomHelper.Boolean())
                {
                    var position = RandomHelper.WithinArea(Player.GetAABB());

                    if (healthLeft <= 0.2f)
                    {
                        Game.PlayEffect(EffectName.Fire, position);
                        Game.PlaySound("Flamethrower", position);
                    }
                    if (healthLeft <= 0.3f)
                    {
                        Game.PlayEffect(EffectName.Sparks, position);
                    }
                    if (healthLeft <= 0.4f)
                    {
                        if (RandomHelper.Boolean())
                        {
                            Game.PlayEffect(EffectName.Steam, position);
                            Game.PlayEffect(EffectName.Steam, position);
                        }
                        Game.PlayEffect(EffectName.Electric, position);
                        Game.PlaySound("ElectricSparks", position);
                    }
                    m_electricElapsed = 0f;
                }
                else
                {
                    m_electricElapsed -= RandomHelper.Between(0, m_electricElapsed);
                }
            }
        }

        private void UpdateCorpse(float elapsed)
        {
            if (!Player.IsDead) return; // Safeguard
            m_electricElapsed += elapsed;

            if (m_electricElapsed >= 1000)
            {
                if (RandomHelper.Boolean())
                {
                    var position = Player.GetWorldPosition();
                    position.X += RandomHelper.Between(-10, 10);
                    position.Y += RandomHelper.Between(-10, 10);

                    Game.PlayEffect(EffectName.Electric, position);

                    if (RandomHelper.Boolean())
                    {
                        Game.PlayEffect(EffectName.Steam, position);
                        Game.PlayEffect(EffectName.Steam, position);
                        Game.PlayEffect(EffectName.Steam, position);
                    }
                    if (RandomHelper.Boolean())
                        Game.PlayEffect(EffectName.Sparks, position);
                    if (RandomHelper.Boolean())
                        Game.PlayEffect(EffectName.Fire, position);

                    Game.PlaySound("ElectricSparks", position);
                    m_electricElapsed = 0f;
                }
                else
                {
                    m_electricElapsed -= RandomHelper.Between(0, m_electricElapsed);
                }
            }
        }
    }
    class SheriffBot : CowboyBot
    {
        public SheriffBot(BotArgs args) : base(args) { }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (!Player.IsDead && Player.CurrentSecondaryWeapon.WeaponItem == WeaponItem.NONE)
            {
                // Don't give primary weapon again. it's OP
                if (arg.WeaponItemType == WeaponItemType.Rifle)
                {
                    Player.GiveWeaponItem(WeaponItem.REVOLVER);
                }
                else
                    Player.GiveWeaponItem(arg.WeaponItem);
            }
        }
    }
    class SmokerBot : Bot
    {
        private float m_smokeDelay = -25000;

        public SmokerBot(BotArgs args) : base(args)
        {
        }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (arg.WeaponItemType == WeaponItemType.Rifle)
            {
                PowerupManager.SetPowerup(Player, WeaponItem.GRENADE_LAUNCHER, RangedWeaponPowerup.Smoke);
            }
        }
    }
    class StripperBot : Bot
    {
        private static HashSet<int> m_occupiedBouncerIDs = new HashSet<int>();
        private IPlayer m_bouncer;
        private readonly float BouncerCheckTime = 1000f;
        private float m_bouncerCheckTime = 0f;

        public StripperBot(BotArgs args) : base(args)
        {
            BouncerCheckTime = RandomHelper.Between(800, 1200);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (ScriptHelper.IsElapsed(m_bouncerCheckTime, BouncerCheckTime))
            {
                m_bouncerCheckTime = Game.TotalElapsedGameTime;

                if (m_bouncer == null)
                {
                    FindBouncer();
                }
            }
        }

        private void FindBouncer()
        {
            foreach (var bot in BotManager.GetBots())
            {
                var isBodyguard = bot.Type == BotType.Bodyguard
                    || bot.Type == BotType.BikerHulk
                    || bot.Type == BotType.GangsterHulk
                    || bot.Type == BotType.PunkHulk
                    || bot.Type == BotType.ThugHulk;

                if (isBodyguard && ScriptHelper.SameTeam(bot.Player, Player) && !m_occupiedBouncerIDs.Contains(bot.Player.UniqueID))
                {
                    m_bouncer = bot.Player;
                    m_occupiedBouncerIDs.Add(m_bouncer.UniqueID);

                    var bs = m_bouncer.GetBotBehaviorSet();
                    bs.GuardRange = 10f;
                    bs.ChaseRange = 11.5f;
                    bot.SetBotBehaviorSet(bs, true);

                    m_bouncer.SetGuardTarget(Player);
                    m_bouncer.SetBotName("Bouncer");

                    if (Game.IsEditorTest)
                    {
                        var color = RandomHelper.GetItem(Color.Red, Color.Yellow, Color.Blue, Color.Green, Color.Magenta, Color.Cyan);

                        ScriptHelper.RunIn(() =>
                        {
                            Game.DrawArea(m_bouncer.GetAABB(), color);
                            Game.DrawLine(m_bouncer.GetWorldPosition(), Player.GetWorldPosition(), color);
                            Game.DrawArea(Player.GetAABB(), color);
                        }, 2000);
                    }
                    break;
                }
            }
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);
            if (m_bouncer != null)
            {
                m_bouncer.SetGuardTarget(null);
                m_occupiedBouncerIDs.Remove(m_bouncer.UniqueID);
            }
        }
    }
    class SurvivorBot : Bot
    {
        public SurvivorBot(BotArgs args) : base (args) { }

        private int m_actualMaxHealth = 100;
        public override void OnSpawn()
        {
            base.OnSpawn();
            // Fake blood on the face to make it look like the infected
            // NOTE: Don't modify modifiers in ctor. modifiers will be applied after ctor call and before OnSpawn call
            var modifiers = Player.GetModifiers();
            m_actualMaxHealth = (int)Player.GetMaxHealth();
            modifiers.MaxHealth = m_actualMaxHealth * 100;
            SetModifiers(modifiers, true);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            var currentHealth = Player.GetHealth();
            if (currentHealth >= m_actualMaxHealth)
            {
                Player.SetHealth(m_actualMaxHealth);
            }
        }
    }
    public class TeddybearBot : Bot
    {
        public const int EnrageTime = 30000;

        public bool IsEnraged
        {
            get { return Player.GetForcedBotTarget() != null; }
        }
        private static readonly List<string> PlayerEnrageReactions = new List<string>()
        {
            "Oh no",
            "Fuck",
            "Guess I will die",
            "Wait. I'm sorry",
            "It's not my fault",
        };

        public TeddybearBot(BotArgs args) : base(args) { }

        private float m_enrageTimeElasped = 0f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Game.IsEditorTest)
                LogDebug(m_enrageTimeElasped, m_enrageTime,
                    Player.GetModifiers().RunSpeedModifier, Player.GetBotBehaviorSet().SearchItems);

            if (IsEnraged)
            {
                m_enrageTimeElasped += elapsed;
                if (m_enrageTimeElasped >= m_enrageTime)
                {
                    StopEnraging();
                    m_enrageTimeElasped = 0f;
                }
            }
        }

        private int m_enrageTime = 0;
        public void Enrage(IPlayer offender)
        {
            if (Player.IsRemoved || Player == null) return;

            var hasAlreadyEnraged = IsEnraged;
            m_enrageTime = EnrageTime;
            m_enrageTimeElasped = 0;

            if (hasAlreadyEnraged)
            {
                m_enrageTime *= 2;
                SayLine("GRRRRRRRROOAAR!", BeColors.Red);
            }
            else
            {
                SayLine("GRRRRRR", BeColors.Orange);
                Events.PlayerDeathCallback cb = null;
                cb = Events.PlayerDeathCallback.Start((player) =>
                {
                    if (player.UniqueID == offender.UniqueID)
                    {
                        Player.SetForcedBotTarget(null);
                        cb.Stop();
                    }
                });
            }

            BotManager.GetBot(offender).SayLine(RandomHelper.GetItem(PlayerEnrageReactions));

            var enrageModifiers = Player.GetModifiers();
            enrageModifiers.MeleeStunImmunity = Constants.TOGGLE_ON;
            enrageModifiers.RunSpeedModifier = hasAlreadyEnraged ? Speed.ExtremelyFast : Speed.VeryFast;
            enrageModifiers.SprintSpeedModifier = hasAlreadyEnraged ? Speed.ExtremelyFast : Speed.VeryFast;
            enrageModifiers.MeleeForceModifier = MeleeForce.ExtremelyStrong;
            enrageModifiers.EnergyConsumptionModifier = .25f;
            SetModifiers(enrageModifiers);

            var bs = GetBehaviorSet(BotAI.RagingHulk);
            bs.SearchItems = hasAlreadyEnraged ? SearchItems.Melee | SearchItems.Makeshift : SearchItems.Makeshift;
            SetBotBehaviorSet(bs);
            Player.SetStrengthBoostTime(float.MaxValue);

            if (offender != null && !offender.IsDead)
                Player.SetForcedBotTarget(offender);
        }

        private void StopEnraging()
        {
            ResetModifiers();
            ResetBotBehaviorSet();
            Player.SetStrengthBoostTime(0);
            Player.SetForcedBotTarget(null);
            m_enrageTime = 0;
        }
    }
    public class ThugBot : Bot
    {
        public ThugBot(BotArgs args) : base(args)
        {
            _isElapsedCheckTarget = ScriptHelper.WithIsElapsed(500, 900);
            _isElapsedCheckWpn = ScriptHelper.WithIsElapsed(200);
        }

        static ThugBot()
        {
            Events.ObjectDamageCallback.Start((obj, args) =>
            {
                if (!args.IsPlayer || args.SourceID == 0) return;
                var hitter = BotManager.GetBot(args.SourceID);
                if (hitter.Faction != BotFaction.Thug || hitter.Player.IsDead) return;

                // x3 object damage for thug
                obj.DealDamage(args.Damage * 2);

                if (obj.GetHealth() == 0 && IsLootable(obj))
                {
                    var thugBot = hitter as ThugBot;
                    if (thugBot != null) thugBot.Loot(null);
                    Game.CreateObject(RandomHelper.GetItem(Constants.WeaponNames), obj.GetWorldPosition());
                }
            });
        }

        private Func<bool> _isElapsedCheckTarget;
        private Func<bool> _isElapsedCheckWpn;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);
            if (Faction != BotFaction.Thug) return;

            var lootObject = Player.GetForcedBotTarget();
            if (Game.IsEditorTest)
            {
                if (lootObject != null) Game.DrawLine(Position, lootObject.GetWorldPosition());
            }

            var isUsingRangedWpn = Player.CurrentWeaponDrawn == WeaponItemType.Rifle || Player.CurrentWeaponDrawn == WeaponItemType.Handgun;
            if (isUsingRangedWpn && lootObject != null && _isElapsedCheckWpn())
            {
                ScriptHelper.Command(Player, PlayerCommandType.Sheath);
            }

            if (!Player.IsDead && _isElapsedCheckTarget())
            {
                var enemiesNearby = AreEnemiesNearby();

                if (!enemiesNearby && lootObject == null)
                {
                    var searchRange = ScriptHelper.Grow(Player.GetAABB(), 6);
                    var newTarget = Game.GetObjectsByArea(searchRange).FirstOrDefault(IsLootable);
                    if (newTarget != null) Loot(newTarget);
                }
                else if (enemiesNearby || Vector2.Distance(Position, lootObject.GetWorldPosition()) > 30)
                    Loot(null);
            }
        }

        public void Loot(IObject o)
        {
            UseRangeWeapon(o == null, shealthRangeWpn: true);
            Player.SetForcedBotTarget(o);
        }

        private static bool IsLootable(IObject o)
        {
            return o.GetCollisionFilter().CategoryBits == CategoryBits.DynamicG1 && o.Destructable && o.Name != "BarrelExplosive";
        }
    }
    public class ZombieEaterBot : Bot
    {
        private Controller<Bot> _controller;
        public static readonly float EatBodyPartTime = 250;
        public ZombieEaterBot(BotArgs args, Controller<Bot> controller) : base(args)
        {
            if (controller != null)
            {
                _controller = controller;
                _controller.Actor = this;
            }
            _isElapsedEat = ScriptHelper.WithIsElapsed(EatBodyPartTime);
            _isElapsedSearchFood = ScriptHelper.WithIsElapsed(60);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;
            if (_controller != null) _controller.OnUpdate(elapsed);

            SearchFood();
            UpdateGrab();
        }

        private Func<bool> _isElapsedSearchFood;
        private float _grabTimeout = 0f;
        private void SearchFood()
        {
            if (!ScriptHelper.IsElapsed(_grabTimeout, 3000) || !_isElapsedSearchFood() || Player.IsHoldingPlayerInGrab) return;

            var foodNearby = FoodNearby().FirstOrDefault();
            if (foodNearby == null) return;

            // because you cannot grab your own teammate
            if (ScriptHelper.SameTeam(foodNearby, Player))
            {
                foodNearby.SetInputEnabled(false);
                foodNearby.SetTeam(PlayerTeam.Independent);
                foodNearby.SetNametagVisible(false);

                // don't let teammate hit and drop the food
                ScriptHelper.RunIf(() => foodNearby.SetTeam(Player.GetTeam()), () => !Player.IsRemoved && Player.HoldingPlayerInGrabID != 0 || Player.IsInputEnabled);
                ScriptHelper.RunIf(() =>
                {
                    // grab failed
                    if (!foodNearby.IsDead)
                    {
                        foodNearby.SetTeam(Player.GetTeam());
                        foodNearby.SetNametagVisible(true);
                        foodNearby.SetInputEnabled(true);
                    }
                }, () => Player.IsRemoved || Player.IsInputEnabled);
            }

            _grabTimeout = Game.TotalElapsedGameTime;
            ScriptHelper.Command(Player, new PlayerCommand[]
            {
                new PlayerCommand(PlayerCommandType.StartCrouch),
                new PlayerCommand(PlayerCommandType.Grab),
            });
        }

        private IEnumerable<IPlayer> FoodNearby()
        {
            var area = Player.GetAABB();
            var center = area.Center;
            if (Player.FacingDirection > 0)
            {
                area.Left += area.Width;
                area.Right += area.Width + 15;
            }
            if (Player.FacingDirection < 0)
            {
                area.Right -= area.Width;
                area.Left -= (area.Width + 15);
            }
            return Game.GetPlayers().Where(p => area.Intersects(p.GetAABB()));
        }

        private int _holdingPlayerInGrabID = 0;
        private Func<bool> _isElapsedEat;
        private int _lostGiblets = 0;
        private void UpdateGrab()
        {
            if (_holdingPlayerInGrabID == 0 && Player.HoldingPlayerInGrabID != 0)
            {
                OnEnemyGrabbed(Player.HoldingPlayerInGrabID);
            }
            if (Player.IsHoldingPlayerInGrab && _isElapsedEat())
            {
                var enemy = Game.GetPlayer(Player.HoldingPlayerInGrabID);

                if (enemy != null)
                {
                    _lostGiblets++;
                    enemy.DealDamage(0.001f); // play effect
                    Game.PlayEffect(EffectName.MeleeHitBlunt, enemy.GetWorldPosition());
                    var giblet = Game.CreateObject(RandomHelper.GetItem(Constants.Giblets), enemy.GetWorldPosition());
                    giblet.SetLinearVelocity(RandomHelper.Direction(20, 180 - 20) * RandomHelper.Between(5, 15));

                    if (_lostGiblets == Constants.Giblets.Length)
                    {
                        ConsumeFood(enemy);
                        return;
                    }
                }
            }
            if (_holdingPlayerInGrabID != 0 && Player.HoldingPlayerInGrabID == 0)
            {
                OnEnemyDroppedFromGrab();
            }

            _holdingPlayerInGrabID = Player.HoldingPlayerInGrabID;
        }

        private PlayerModifiers _newModifiers;
        private void OnEnemyGrabbed(int playerID)
        {
            var grabbedBot = BotManager.GetBot(playerID);
            var mod = grabbedBot.Player.GetModifiers();
            var sizeDiff = Math.Min(mod.SizeModifier - Size.Tiny, 0.25f);

            _newModifiers = Player.GetModifiers();
            _newModifiers.SizeModifier += sizeDiff;
            _newModifiers.MeleeDamageTakenModifier -= 0.05f;
            _newModifiers.MeleeDamageDealtModifier += 0.05f;
            _newModifiers.MeleeForceModifier = Math.Min(_newModifiers.MeleeForceModifier + 0.15f, MeleeForce.UltraStrong);
            _newModifiers.RunSpeedModifier -= 0.1f;
            _newModifiers.SprintSpeedModifier -= 0.1f;

            var mod2 = Player.GetModifiers();
            mod2.MeleeStunImmunity = Constants.TOGGLE_ON;
            SetModifiers(mod2);
        }

        private void OnEnemyDroppedFromGrab()
        {
            _lostGiblets = 0;
            ResetModifiers();
            _grabTimeout = Game.TotalElapsedGameTime;
        }

        private void ConsumeFood(IPlayer food)
        {
            food.Gib();
            _lostGiblets = 0;
            if (Player.GetModifiers().SizeModifier == Size.Chonky) Player.SetStrengthBoostTime(10000);
            SetHealth(Player.GetHealth() + 20, true);
            SetModifiers(_newModifiers, true);
            _grabTimeout = Game.TotalElapsedGameTime;
        }
    }
    public class ZombieFatBot : Bot
    {
        private static readonly int InfectRadius = 30;

        public ZombieFatBot(BotArgs args) : base(args) { }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            var center = Position + Vector2.UnitY * 5;
            var hitbox = Player.GetAABB();

            if (Game.IsEditorTest)
                ScriptHelper.RunIn(() => Game.DrawCircle(center, InfectRadius, Color.Cyan), 3000);

            foreach (var bot in BotManager.GetBots())
            {
                if (ScriptHelper.IntersectCircle(bot.Player.GetAABB(), center, InfectRadius))
                {
                    bot.Infect(InfectTeam);
                    Game.ShowChatMessage(bot.Player.Name + " is infected");
                }
            }

            Game.TriggerExplosion(Position);

            for (var i = 0; i < 5; i++)
            {
                Game.CreateObject(RandomHelper.GetItem(Constants.Giblets), RandomHelper.WithinArea(hitbox),
                    RandomHelper.Between(0, MathHelper.TwoPI));
                Game.PlayEffect(EffectName.Gib, RandomHelper.WithinArea(hitbox));
            }
        }
    }
    public class ZombieFlamerBot : Bot
    {
        public ZombieFlamerBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetMaxFire();
        }
    }
    public enum BotFaction
    {
        None = 0,
        Assassin,
        Agent,
        Bandido,
        Biker,
        Clown,
        Cowboy,
        Engineer,
        Farmer,
        Gangster,
        Hunter,
        MetroCop,
        Mutant,
        Nazi,
        Police,
        Police_Cindy,
        PoliceSWAT,
        Pyromaniac,
        Robot,
        Sniper,
        Soldier,
        Spacer,
        SpaceSniper,
        Stripper,
        Survivor,
        Thug,
        Punk,
        Zombie,
        ZombieMutated,

        Boss_Demolitionist = Constants.BOSS_FACTION_START_INDEX,
        Boss_Agent79,
        Boss_Amos,
        Boss_Balista,
        Boss_Balloonatic,
        Boss_BazookaJane,
        Boss_Beast,
        Boss_BigMutant,
        Boss_Bobby,
        Boss_Boffin,
        Boss_Chairman,
        Boss_Cindy,
        Boss_PoliceChief,
        Boss_Funnyman,
        Boss_Jo,
        Boss_Hacker,
        Boss_Handler,
        Boss_Hitman,
        Boss_Incinerator,
        Boss_Firebug,
        Boss_Fireman,
        Boss_Kingpin,
        Boss_MadScientist,
        Boss_Kriegbar,
        Boss_Meatgrinder,
        Boss_Mecha,
        Boss_MetroCop,
        Boss_MirrorMan,
        Boss_Nadja,
        Boss_Ninja,
        Boss_President,
        Boss_Rambo,
        Boss_Raze,
        Boss_Reznor,
        Boss_Santa,
        Boss_Sheriff,
        Boss_Smoker,
        Boss_Survivalist,
        Boss_Teddybear,
        Boss_ZombieFighter,
        Boss_ZombieEater,
    }
    public class Faction
    {
        public BotFaction BotFaction { get; private set; }
        public List<SubFaction> SubFactions { get; private set; }
        public float TotalScore { get; private set; }
        public bool HasBoss { get; private set; }
        public List<BotType> Bosses { get; private set; }

        public Faction(List<SubFaction> subFactions, BotFaction botFaction)
        {
            BotFaction = botFaction;
            SubFactions = new List<SubFaction>();
            HasBoss = false;
            Bosses = new List<BotType>();

            foreach (var subFaction in subFactions)
            {
                if (subFaction.Types.Length == 0) continue;

                if (subFaction.HasBoss)
                {
                    HasBoss = true;
                    Bosses.Add(subFaction.Types.Single());
                }
                else
                    TotalScore += subFaction.Weight;

                SubFactions.Add(subFaction);
            }
        }

        private static Dictionary<PlayerTeam, List<IPlayer>> m_playerByTeam = null;
        private static Dictionary<PlayerTeam, List<IPlayer>> PlayerByTeam
        {
            get
            {
                if (m_playerByTeam == null)
                {
                    m_playerByTeam = new Dictionary<PlayerTeam, List<IPlayer>>()
                    {
                        { PlayerTeam.Independent, new List<IPlayer>() },
                        { PlayerTeam.Team1, new List<IPlayer>() },
                        { PlayerTeam.Team2, new List<IPlayer>() },
                        { PlayerTeam.Team3, new List<IPlayer>() },
                        { PlayerTeam.Team4, new List<IPlayer>() },
                    };
                    foreach (var player in Game.GetPlayers())
                    {
                        PlayerByTeam[player.GetTeam()].Add(player);
                    }
                }
                return m_playerByTeam;
            }
        }

        public IEnumerable<Bot> Spawn(PlayerTeam team)
        {
            var factionCount = PlayerByTeam[team].Count;

            return Spawn(factionCount, team, (i, botType, isBoss) =>
            {
                if (i >= PlayerByTeam[team].Count())
                    return null;
                var player = PlayerByTeam[team][i];
                if (isBoss)
                    return BotManager.SpawnBot(botType, BotFaction, player, team, true, triggerOnSpawn: false);
                else
                    return BotManager.SpawnBot(botType, BotFaction, player, team, triggerOnSpawn: false);
            });
        }
        public IEnumerable<Bot> Spawn(int factionCount, PlayerTeam team)
        {
            return Spawn(factionCount, team, (_, botType, isBoss) =>
            {
                if (isBoss)
                    return BotManager.SpawnBot(botType, BotFaction, null, team, true, triggerOnSpawn: false);
                else
                    return BotManager.SpawnBot(botType, BotFaction, null, team, triggerOnSpawn: false);
            });
        }

        private IEnumerable<Bot> Spawn(int factionCount, PlayerTeam team, Func<int, BotType, bool, Bot> spawnCallback)
        {
            var bots = new List<Bot>();
            if (factionCount == 0) return bots;

            var subFactionCount = 0;
            var factionCountRemaining = factionCount;
            var mobCount = HasBoss ? factionCount - 1 : factionCount;
            var i = 0;

            foreach (var subFaction in SubFactions)
            {
                subFactionCount++;

                if (!subFaction.HasBoss)
                {
                    var weight = subFaction.Weight;
                    var share = weight / TotalScore;
                    var botCountRemainingThisType = Math.Round(mobCount * share);

                    while (factionCountRemaining > 0 && (botCountRemainingThisType > 0 || subFactionCount == SubFactions.Count))
                    {
                        var botType = RandomHelper.GetItem(subFaction.Types);
                        var bot = spawnCallback(i++, botType, false);
                        if (bot != null)
                            bots.Add(bot);

                        factionCountRemaining--;
                        botCountRemainingThisType--;
                    }
                }
                else
                {
                    var botType = RandomHelper.GetItem(subFaction.Types);
                    var bot = spawnCallback(i++, botType, true);
                    if (bot != null)
                        bots.Add(bot);

                    factionCountRemaining--;
                }
            }
            return bots;
        }
    }
    public class FactionSet
    {
        public BotFaction Faction { get; private set; }
        public List<Faction> Factions { get; private set; }

        public FactionSet(BotFaction faction)
        {
            Faction = faction;
            Factions = new List<Faction>();
        }

        public void AddFaction(List<SubFaction> subFactions)
        {
            if (subFactions.Count == 0) return;
            Factions.Add(new Faction(subFactions, Faction));
        }
        public void AddFaction(SubFaction subFaction)
        {
            AddFaction(new List<SubFaction> { subFaction });
        }
    }
    public class SubFaction
    {
        public SubFaction(BotType[] types, float weight = 0f)
        {
            Types = types;
            Weight = weight;
        }

        public SubFaction(BotType type, float weight = 0f)
        {
            Types = type == BotType.None ? new BotType[] { } : new BotType[] { type };
            Weight = weight;
        }

        public BotType[] Types { get; private set; }
        public float Weight { get; private set; }
        public bool HasBoss { get { return Weight == 0; } }
    }
    public static class Mapper
    {
        public static WeaponItemType GetWeaponItemType(WeaponItem weaponItem)
        {
            // UPDATE: SFD.Weapons.WeaponDatabase 1.3.4
            switch (weaponItem)
            {
                case WeaponItem.ASSAULT:
                case WeaponItem.BAZOOKA:
                case WeaponItem.BOW:
                case WeaponItem.CARBINE:
                case WeaponItem.DARK_SHOTGUN:
                case WeaponItem.FLAMETHROWER:
                case WeaponItem.GRENADE_LAUNCHER:
                case WeaponItem.M60:
                case WeaponItem.MP50:
                case WeaponItem.SAWED_OFF:
                case WeaponItem.SHOTGUN:
                case WeaponItem.SMG:
                case WeaponItem.SNIPER:
                case WeaponItem.TOMMYGUN:
                    return WeaponItemType.Rifle;

                case WeaponItem.FLAREGUN:
                case WeaponItem.MACHINE_PISTOL:
                case WeaponItem.MAGNUM:
                case WeaponItem.PISTOL:
                case WeaponItem.PISTOL45:
                case WeaponItem.REVOLVER:
                case WeaponItem.SILENCEDPISTOL:
                case WeaponItem.SILENCEDUZI:
                case WeaponItem.UZI:
                    return WeaponItemType.Handgun;

                case WeaponItem.PIPE:
                case WeaponItem.CHAIN:
                case WeaponItem.WHIP:
                case WeaponItem.HAMMER:
                case WeaponItem.KATANA:
                case WeaponItem.MACHETE:
                case WeaponItem.CHAINSAW:
                case WeaponItem.KNIFE:
                case WeaponItem.BAT:
                case WeaponItem.BATON:
                case WeaponItem.SHOCK_BATON:
                case WeaponItem.LEAD_PIPE:
                case WeaponItem.AXE:
                case WeaponItem.BASEBALL:
                    return WeaponItemType.Melee;

                case WeaponItem.BOTTLE:
                case WeaponItem.BROKEN_BOTTLE:
                case WeaponItem.CHAIR:
                case WeaponItem.CUESTICK:
                case WeaponItem.CUESTICK_SHAFT:
                case WeaponItem.FLAGPOLE:
                case WeaponItem.PILLOW:
                case WeaponItem.SUITCASE:
                case WeaponItem.TEAPOT:
                case WeaponItem.TRASH_BAG:
                case WeaponItem.TRASHCAN_LID:
                case WeaponItem.CHAIR_LEG:
                    return WeaponItemType.Melee;

                case WeaponItem.GRENADES:
                case WeaponItem.MOLOTOVS:
                case WeaponItem.MINES:
                case WeaponItem.C4:
                case WeaponItem.C4DETONATOR:
                case WeaponItem.SHURIKEN:
                    return WeaponItemType.Thrown;

                case WeaponItem.STRENGTHBOOST:
                case WeaponItem.SPEEDBOOST:
                case WeaponItem.SLOWMO_5:
                case WeaponItem.SLOWMO_10:
                    return WeaponItemType.Powerup;

                case WeaponItem.PILLS:
                case WeaponItem.MEDKIT:
                case WeaponItem.LAZER:
                case WeaponItem.BOUNCINGAMMO:
                case WeaponItem.FIREAMMO:
                case WeaponItem.STREETSWEEPER:
                    return WeaponItemType.InstantPickup;

                default:
                    return WeaponItemType.NONE;
            }
        }

        public static bool IsMakeshiftWeapon(WeaponItem weaponItem)
        {
            return weaponItem == WeaponItem.BOTTLE
                || weaponItem == WeaponItem.BROKEN_BOTTLE
                || weaponItem == WeaponItem.CUESTICK
                || weaponItem == WeaponItem.CUESTICK_SHAFT
                || weaponItem == WeaponItem.CHAIR
                || weaponItem == WeaponItem.CHAIR_LEG
                || weaponItem == WeaponItem.FLAGPOLE
                || weaponItem == WeaponItem.PILLOW
                || weaponItem == WeaponItem.SUITCASE
                || weaponItem == WeaponItem.TEAPOT
                || weaponItem == WeaponItem.TRASH_BAG
                || weaponItem == WeaponItem.TRASHCAN_LID;
        }

        public static ProjectileItem GetProjectile(WeaponItem weaponItem)
        {
            switch (weaponItem)
            {
                case WeaponItem.ASSAULT:
                    return ProjectileItem.ASSAULT;
                case WeaponItem.BAZOOKA:
                    return ProjectileItem.BAZOOKA;
                case WeaponItem.BOW:
                    return ProjectileItem.BOW;
                case WeaponItem.CARBINE:
                    return ProjectileItem.CARBINE;
                case WeaponItem.DARK_SHOTGUN:
                    return ProjectileItem.DARK_SHOTGUN;
                case WeaponItem.GRENADE_LAUNCHER:
                    return ProjectileItem.GRENADE_LAUNCHER;
                case WeaponItem.M60:
                    return ProjectileItem.M60;
                case WeaponItem.MP50:
                    return ProjectileItem.MP50;
                case WeaponItem.SAWED_OFF:
                    return ProjectileItem.SAWED_OFF;
                case WeaponItem.SHOTGUN:
                    return ProjectileItem.SHOTGUN;
                case WeaponItem.SMG:
                    return ProjectileItem.SMG;
                case WeaponItem.SNIPER:
                    return ProjectileItem.SNIPER;
                case WeaponItem.TOMMYGUN:
                    return ProjectileItem.TOMMYGUN;

                case WeaponItem.FLAREGUN:
                    return ProjectileItem.FLAREGUN;
                case WeaponItem.MACHINE_PISTOL:
                    return ProjectileItem.MACHINE_PISTOL;
                case WeaponItem.MAGNUM:
                    return ProjectileItem.MAGNUM;
                case WeaponItem.PISTOL:
                    return ProjectileItem.PISTOL;
                case WeaponItem.PISTOL45:
                    return ProjectileItem.PISTOL45;
                case WeaponItem.REVOLVER:
                    return ProjectileItem.REVOLVER;
                case WeaponItem.SILENCEDPISTOL:
                    return ProjectileItem.SILENCEDPISTOL;
                case WeaponItem.SILENCEDUZI:
                    return ProjectileItem.SILENCEDUZI;
                case WeaponItem.UZI:
                    return ProjectileItem.UZI;

                default:
                    return ProjectileItem.NONE;
            }
        }

        public static WeaponItem GetWeaponItem(ProjectileItem projectileItem)
        {
            if (projectileItem == ProjectileItem.FLAKCANNON)
                return WeaponItem.NONE;
            // Game bug: https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=4333
            if (projectileItem == ProjectileItem.SUB_MACHINEGUN)
                return WeaponItem.TOMMYGUN;
            return SharpHelper.StringToEnum<WeaponItem>(SharpHelper.EnumToString<ProjectileItem>(projectileItem));
        }
    }
    static class MathExtension
    {
        public const float TwoPI = MathHelper.TwoPI;
        public const float PI = MathHelper.PI;
        public const float PIOver2 = MathHelper.PIOver2;
        public const float PIOver4 = MathHelper.PIOver4;
        public const float PIOver8 = MathHelper.PIOver8;

        public const float PI_3Over2 = TwoPI - PIOver2;

        public const float OneDeg = MathHelper.PI / 180;

        public static float ToRadians(float angleDegree)
        {
            return (float)(angleDegree * Math.PI) / 180;
        }
        public static float ToDegree(float radians)
        {
            return radians * 180 / (float)Math.PI;
        }
        public static float NormalizeAngle(float radian)
        {
            var result = radian % MathHelper.TwoPI;
            return result < 0 ? result + MathHelper.TwoPI : result;
        }

        public static float Diff(float a, float b)
        {
            return Math.Abs(Math.Abs(a) - Math.Abs(b));
        }

        public static bool InRange(float value, float min, float max)
        {
            return min <= value && value <= max;
        }

        // https://stackoverflow.com/a/28123501/9449426
        public static float AngleBetween(Vector2 vector1, Vector2 vector2)
        {
            double sin = vector1.X * vector2.Y - vector2.X * vector1.Y;
            double cos = vector1.X * vector2.X + vector1.Y * vector2.Y;

            return (float)Math.Atan2(sin, cos);
        }

        public static float FlipAngleX(float angle)
        {
            angle = NormalizeAngle(angle);
            return MathHelper.TwoPI - angle;
        }

        public static float FlipAngleY(float angle)
        {
            angle = NormalizeAngle(angle);
            if (angle < MathHelper.PI)
                return MathHelper.PI - angle;
            else
                return MathHelper.TwoPI - angle + MathHelper.PI;
        }

        public static Vector2 ClampMagnitude(Vector2 vector, float maxLength)
        {
            var lengthSquare = vector.LengthSquared();
            if (lengthSquare > maxLength * maxLength)
            {
                var length = (float)Math.Sqrt(lengthSquare);
                var normalized_x = vector.X / length;
                var normalized_y = vector.Y / length;
                return new Vector2(normalized_x * maxLength, normalized_y * maxLength);
            }
            return vector;
        }
    }
    public static class RandomHelper
    {
        public static Random Rnd { get; set; }
        static RandomHelper() { Rnd = new Random(); }

        public static bool Boolean()
        {
            return Rnd.NextDouble() >= 0.5;
        }

        public static float Between(float min, float max)
        {
            return (float)Rnd.NextDouble() * (max - min) + min;
        }
        public static int BetweenInt(int min, int max)
        {
            return Rnd.Next(min, max);
        }

        public static T GetItem<T>(List<T> list)
        {
            if (list.Count == 0)
                throw new Exception("list is empty");

            var rndIndex = Rnd.Next(list.Count);
            return list[rndIndex];
        }

        public static T GetItem<T>(params T[] list)
        {
            if (list.Length == 0)
                throw new Exception("list is empty");

            var rndIndex = Rnd.Next(list.Length);
            return list[rndIndex];
        }

        public static T GetEnumValue<T>() where T : struct, IConvertible
        {
            if (!typeof(T).IsEnum)
            {
                throw new ArgumentException("T must be an enumerated type");
            }

            var enumValues = Enum.GetValues(typeof(T));
            return (T)enumValues.GetValue(Rnd.Next(enumValues.Length));
        }

        /// <summary>
        /// Chance from 0f to 1f. 0f means never. 1f means always
        /// </summary>
        /// <param name="chance"></param>
        /// <returns></returns>
        public static bool Percentage(float chance)
        {
            return Between(0f, 1f) < chance;
        }

        // https://stackoverflow.com/a/1262619/9449426
        public static IList<T> Shuffle<T>(IList<T> list)
        {
            var n = list.Count;
            while (n > 1)
            {
                n--;
                var k = Rnd.Next(n + 1);
                var swap = list[k];
                list[k] = list[n];
                list[n] = swap;
            }
            return list;
        }

        public static Vector2 Direction(float minAngle, float maxAngle, bool useRadians = false)
        {
            var angle = Between(minAngle, maxAngle);

            if (!useRadians)
                angle = MathExtension.ToRadians(angle);

            return ScriptHelper.GetDirection(angle);
        }

        public static Vector2 WithinArea(Area area)
        {
            var center = area.Center;
            var halfWidth = area.Width / 2;
            var halfHeight = area.Height / 2;

            return new Vector2()
            {
                X = Between(center.X - halfWidth, center.X + halfWidth),
                Y = Between(center.Y - halfHeight, center.Y + halfHeight),
            };
        }
    }
    static class RayCastHelper
    {
        // List of objects that bullet cannot pass initially, but can be broken down
        public static readonly HashSet<string> ObjectsBulletCanDestroy = new HashSet<string>()
        {
            "ReinforcedGlass00A",
            "AtlasStatue00",
            "BulletproofGlass00Weak",
            "StoneWeak00A",
            "StoneWeak00B",
            "StoneWeak00C",
            "Concrete01Weak",
            "Wood06Weak",
            "StreetsweeperCrate"
        };

        // List of objects that bullet cant pass (edge cases)
        // https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3952&p=23291#p23291
        public static readonly HashSet<string> ObjectsBulletCantPass = new HashSet<string>()
        {
            "DinerBooth",
        };

        private static bool BlockProjectile(RayCastResult result)
        {
            return ObjectsBulletCantPass.Contains(result.HitObject.Name)
                    // Filter objects bullet can passthrough like ladder
                    // Not an optimal solution: https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3952&p=23291#p23291
                    || (result.HitObject.GetCollisionFilter().BlockExplosions
                    && !ObjectsBulletCanDestroy.Contains(result.HitObject.Name));
        }

        public static IEnumerable<RayCastResult> ImpassableObjects(Vector2 start, Vector2 end)
        {
            var rayCastInput = new RayCastInput()
            {
                MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicPlatform + CategoryBits.DynamicG1,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(start, end, rayCastInput);

            foreach (var result in results)
            {
                if (BlockProjectile(result))
                    yield return result;
            }
        }

        public static bool SameTeamRaycast(IPlayer p1, IPlayer p2, PlayerTeam t1)
        {
            if (p1 == null || p2 == null) return false;
            // t1 is cached before p1 is removed
            if (p1.IsRemoved)
            {
                var t2 = p2.GetTeam();
                return t2 == PlayerTeam.Independent ? false : t1 == t2;
            }
            return ScriptHelper.SameTeam(p1, p2);
        }

        /// <summary>
        /// Find players that touch the line. filter players behind block objects (wall, ground...)
        /// </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns></returns>
        public static IEnumerable<RayCastResult> Players(Vector2 start, Vector2 end,
            bool blockTeammates = false, PlayerTeam team = PlayerTeam.Independent, IPlayer fromPlayer = null)
        {
            var rayCastInput = new RayCastInput()
            {
                // How to customize filter
                // Open with notepad ..\Superfighters Deluxe\Content\Data\Tiles\CollisionGroups\collisionGroups.sfdx
                // Search for categoryBits for the object types you want to accept for collision
                // Calc sum of those values (in binary) and convert to hex
                // 
                MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicPlatform + CategoryBits.Player + CategoryBits.DynamicG1,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(start, end, rayCastInput);
            var smallestBlockedFraction = float.PositiveInfinity;
            var smallestTeammateFraction = float.PositiveInfinity;
            int closestBlockObjectID = int.MinValue;
            int closestTeammateID = int.MinValue;
            var playerResult = new List<RayCastResult>();

            foreach (var result in results)
            {
                if (BlockProjectile(result))
                {
                    if (smallestBlockedFraction > result.Fraction)
                    {
                        smallestBlockedFraction = result.Fraction;
                        closestBlockObjectID = result.ObjectID;
                    }
                }
                if (result.IsPlayer) playerResult.Add(result);
                if (result.IsPlayer && blockTeammates)
                {
                    var player = Game.GetPlayer(result.ObjectID);

                    if (SameTeamRaycast(fromPlayer, player, team))
                    {
                        if (smallestTeammateFraction > result.Fraction)
                        {
                            smallestTeammateFraction = result.Fraction;
                            closestTeammateID = result.ObjectID;
                        }
                    }
                }
            }

            //Game.DrawLine(start, end);
            if (closestBlockObjectID != int.MinValue)
                Game.DrawArea(Game.GetObject(closestBlockObjectID).GetAABB(), Color.Yellow);
            if (closestTeammateID != int.MinValue)
                Game.DrawArea(Game.GetPlayer(closestTeammateID).GetAABB(), Color.Red);

            foreach (var result in playerResult)
            {
                var player = Game.GetPlayer(result.ObjectID);
                var blocked = false;

                if (blockTeammates)
                {
                    if (SameTeamRaycast(fromPlayer, player, team))
                        continue;
                    if (smallestTeammateFraction <= result.Fraction)
                        blocked = true;
                }
                if (smallestBlockedFraction < result.Fraction)
                    blocked = true;

                if (!blocked)
                {
                    //Game.DrawArea(player.GetAABB(), Color.Green);
                    yield return result;
                }
            }
        }

        public static IEnumerable<IPlayer> GetFirstPlayerInRange(IPlayer player, float radius, float minAngle = 0, float maxAngle = 0,
            bool blockTeammates = false, PlayerTeam team = PlayerTeam.Independent, IPlayer fromPlayer = null)
        {
            return GetFirstPlayerInRange(player.GetWorldPosition() + Vector2.UnitY * 15, radius, minAngle, maxAngle,
                blockTeammates, team, fromPlayer);
        }

        public static IEnumerable<IPlayer> GetFirstPlayerInRange(Vector2 center, float radius, float minAngle = 0, float maxAngle = 0,
            bool blockTeammates = false, PlayerTeam team = PlayerTeam.Independent, IPlayer fromPlayer = null)
        {
            var filterArea = ScriptHelper.GrowFromCenter(center, radius * 2); 
            var players = Game.GetObjectsByArea<IPlayer>(filterArea)
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), center, radius, minAngle, maxAngle));

            foreach (var player in players)
            {
                if (ScriptHelper.SameTeam(player, fromPlayer) && blockTeammates)
                    continue;

                var playerPosition = player.GetWorldPosition() + Vector2.UnitY * 7;
                foreach (var result in Players(center, playerPosition, blockTeammates, team, fromPlayer))
                {
                    yield return Game.GetPlayer(result.ObjectID);
                    break;
                }
            }
        }
    }
    public enum Direction
    {
        Left,
        Top,
        Right,
        Bottom,
    }

    public static class ScriptHelper
    {
        public static void PrintMessage(string message, Color? color = null)
        {
            Game.ShowChatMessage(message, color ?? BeColors.MESSAGE_COLOR);
        }

        // TODO: remove once gurt fixes
        // https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=3995
        // https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3994
        public static string ToDisplayString(params object[] values)
        {
            var str = "";

            foreach (var v in values)
            {
                if (v == null)
                    str += " <null>";
                else if (v is float || v is double)
                    str += " " + ((float)v).ToString("0.00");
                else
                    str += " " + v;
            }

            return str;
        }
        public static void LogDebugF(string format, params object[] values)
        {
            if (!Game.IsEditorTest) return;
            Game.WriteToConsoleF(format, values);
        }
        public static void LogDebug(params object[] values)
        {
            if (!Game.IsEditorTest) return;
            Game.WriteToConsole(ToDisplayString(values));
        }
        public static void LogF(string format, params object[] values)
        {
            Game.WriteToConsoleF(format, values);
        }
        public static void Log(params object[] values)
        {
            Game.WriteToConsole(ToDisplayString(values));
        }

        public static void Timeout(Action callback, uint interval)
        {
            Events.UpdateCallback.Start(e => callback.Invoke(), interval, 1);
        }

        public static Events.UpdateCallback RunIn(Action callback, int ms, Action onTimeout = null, uint interval = 0)
        {
            var timeStarted = Game.TotalElapsedGameTime;
            var cb = (Events.UpdateCallback)null;

            cb = Events.UpdateCallback.Start(e =>
            {
                callback.Invoke();
                if (IsElapsed(timeStarted, ms))
                {
                    if (onTimeout != null) onTimeout();
                    cb.Stop();
                }
            }, interval);

            return cb;
        }

        public static void RunUntil(Action callback, Func<bool> stopCondition, Action cleanup = null)
        {
            var cb = (Events.UpdateCallback)null;
            cb = Events.UpdateCallback.Start(e =>
            {
                if (stopCondition())
                {
                    if (cleanup != null) cleanup();
                    cb.Stop();
                    return;
                }
                callback.Invoke();
            });
        }

        public static void RunIf(Action callback, Func<bool> If, int timeout = 10000, Action onTimeout = null, uint interval = 0)
        {
            var cb = (Events.UpdateCallback)null;
            cb = RunIn(() =>
            {
                if (If())
                {
                    callback.Invoke();
                    cb.Stop();
                }
            }, timeout, onTimeout, interval);
        }

        public static bool IsElapsed(float timeStarted, float timeToElapse)
        {
            return Game.TotalElapsedGameTime - timeStarted >= timeToElapse;
        }

        public static Func<bool> WithIsElapsed(float minTime, float maxTime = 0, bool isElapsedFirstTime = true)
        {
            var interval = maxTime == 0 ? minTime : RandomHelper.Between(minTime, maxTime);
            var timeStarted = 0f;
            if (isElapsedFirstTime)
            {
                return () =>
                {
                    if (IsElapsed(timeStarted, interval))
                    {
                        timeStarted = Game.TotalElapsedGameTime;
                        interval = maxTime == 0 ? minTime : RandomHelper.Between(minTime, maxTime);
                        return true;
                    }
                    return false;
                };
            }

            var firstTime = true;
            return () =>
            {
                if (firstTime)
                {
                    timeStarted = Game.TotalElapsedGameTime;
                    firstTime = false;
                }
                if (IsElapsed(timeStarted, interval))
                {
                    timeStarted = Game.TotalElapsedGameTime;
                    interval = maxTime == 0 ? minTime : RandomHelper.Between(minTime, maxTime);
                    return true;
                }
                return false;
            };
        }

        public static void MakeInvincible(IPlayer player)
        {
            if (player != null)
            {
                var mod = player.GetModifiers();
                mod.FireDamageTakenModifier = 0;
                mod.ImpactDamageTakenModifier = 0;
                mod.MeleeDamageTakenModifier = 0;
                mod.ExplosionDamageTakenModifier = 0;
                mod.ProjectileDamageTakenModifier = 0;
                player.SetModifiers(mod);
            }
        }

        private static void NormalizeMinMaxAngle(ref float minAngle, ref float maxAngle, bool smallSector)
        {
            minAngle = MathExtension.NormalizeAngle(minAngle);
            maxAngle = MathExtension.NormalizeAngle(maxAngle);

            if (minAngle > maxAngle)
            {
                var swap = minAngle;
                minAngle = maxAngle;
                maxAngle = swap;
            }

            if (maxAngle - minAngle > MathHelper.PI && smallSector)
            {
                var oldMinAngle = minAngle;
                minAngle = maxAngle;
                maxAngle = oldMinAngle + MathHelper.TwoPI;
            }
        }

        public static Direction GetDir(float angle)
        {
            angle = MathExtension.NormalizeAngle(angle);

            if (angle >= 0 && angle < MathHelper.PIOver4 || angle >= MathExtension.PI_3Over2 && angle <= MathExtension.PI * 2)
                return Direction.Right;
            if (angle >= MathHelper.PIOver4 && angle < MathHelper.PIOver2 + MathHelper.PIOver4)
                return Direction.Top;
            if (angle >= MathHelper.PIOver2 + MathHelper.PIOver4 && angle < MathHelper.PI + MathHelper.PIOver4)
                return Direction.Left;
            return Direction.Bottom;
        }

        // Camera.cs#GetDistanceToEdge()
        public static float GetDistanceToEdge(Vector2 position, Vector2 direction)
        {
            var result = -1f;
            var camera = Game.GetCameraArea();
            if (direction.X != 0.0)
            {
                if (position.X < camera.Right)
                {
                    var num2 = (camera.Right - position.X) / direction.X;
                    if (num2 > 0.0 && (result == -1.0 || num2 < result))
                        result = num2;
                }
                if (position.X > camera.Left)
                {
                    var num2 = (camera.Left - position.X) / direction.X;
                    if (num2 > 0.0 && (result == -1.0 || num2 < result))
                        result = num2;
                }
            }
            if (direction.Y != 0.0)
            {
                if (position.Y < camera.Top)
                {
                    var num2 = (camera.Top - position.Y) / direction.Y;
                    if (num2 > 0.0 && (result == -1.0 || num2 < result))
                        result = num2;
                }
                if (position.Y > camera.Bottom)
                {
                    var num2 = (camera.Bottom - position.Y) / direction.Y;
                    if (num2 > 0.0 && (result == -1.0 || num2 < result))
                        result = num2;
                }
            }
            return result;
        }

        public static bool IntersectCircle(Vector2 position, Vector2 center, float radius,
            float minAngle = 0, float maxAngle = 0, bool smallSector = true)
        {
            NormalizeMinMaxAngle(ref minAngle, ref maxAngle, smallSector);
            var fullCircle = minAngle == 0 && maxAngle == 0;
            var distanceToCenter = Vector2.Distance(position, center);

            if (distanceToCenter <= radius)
            {
                if (!fullCircle)
                {
                    var angle = MathExtension.NormalizeAngle(GetAngle(position - center));

                    if (angle >= minAngle && angle <= maxAngle
                            || angle + MathHelper.TwoPI >= minAngle && angle + MathHelper.TwoPI <= maxAngle)
                        return true;
                }
                else
                    return true;
            }

            return false;
        }

        public static bool IntersectCircle(Area area, Vector2 center, float radius)
        {
            return IntersectCircle(area, center, radius, 0, 0, false);
        }
        public static bool IntersectCircle(Area area, Vector2 center, float radius,
            float minAngle = 0, float maxAngle = 0, bool smallSector = true)
        {
            NormalizeMinMaxAngle(ref minAngle, ref maxAngle, smallSector);
            var fullCircle = minAngle == 0 && maxAngle == 0;
            var lines = new List<Vector2[]>()
            {
                new Vector2[] { area.BottomRight, area.BottomLeft },
                new Vector2[] { area.BottomLeft, area.TopLeft },
                new Vector2[] { area.TopLeft, area.TopRight },
                new Vector2[] { area.TopRight, area.BottomRight },
            };

            foreach (var line in lines)
            {
                var distanceToCenter = FindDistanceToSegment(center, line[0], line[1]);

                if (distanceToCenter <= radius)
                {
                    if (!fullCircle)
                    {
                        var corner = line[0];
                        var angle = MathExtension.NormalizeAngle(GetAngle(corner - center));

                        if (angle >= minAngle && angle <= maxAngle
                            || angle + MathHelper.TwoPI >= minAngle && angle + MathHelper.TwoPI <= maxAngle)
                            return true;
                    }
                    else
                        return true;
                }
            }

            return false;
        }

        // https://stackoverflow.com/a/1501725/9449426
        public static float FindDistanceToSegment(Vector2 point, Vector2 p1, Vector2 p2)
        {
            // Return minimum distance between line segment vw and point point
            var lengthSquare = (float)(Math.Pow(p2.X - p1.X, 2) + Math.Pow(p2.Y - p1.Y, 2));  // i.e. |p2-p1|^2 -  avoid a sqrt
            if (lengthSquare == 0.0) return Vector2.Distance(point, p1);   // p1 == p2 case
            // Consider the line extending the segment, parameterized as p1 + t (p2 - p1).
            // We find projection of point point onto the line. 
            // It falls where t = [(point-p1) . (p2-p1)] / |p2-p1|^2
            // We clamp t from [0,1] to handle points outside the segment vw.
            var t = MathHelper.Clamp(Vector2.Dot(point - p1, p2 - p1) / lengthSquare, 0, 1);
            var projection = p1 + t * (p2 - p1);  // Projection falls on the segment
            return Vector2.Distance(point, projection);
        }

        public static Vector2 GetDirection(float radianAngle)
        {
            return new Vector2()
            {
                X = (float)Math.Cos(radianAngle),
                Y = (float)Math.Sin(radianAngle),
            };
        }

        // https://stackoverflow.com/a/6247163/9449426
        public static float GetAngle(Vector2 direction)
        {
            return (float)Math.Atan2(direction.Y, direction.X);
        }

        public static float[] Flip(float[] angles, FlipDirection direction)
        {
            if (direction == FlipDirection.Horizontal)
            {
                angles[0] = MathExtension.FlipAngleY(angles[0]);
                angles[1] = MathExtension.FlipAngleY(angles[1]);
            }
            else
            {
                angles[0] = MathExtension.FlipAngleX(angles[0]);
                angles[1] = MathExtension.FlipAngleX(angles[1]);
            }

            return new float[]
            {
                Math.Min(angles[0], angles[1]),
                Math.Max(angles[0], angles[1]),
            };
        }

        public static bool SameTeam(IPlayer player1, IPlayer player2)
        {
            if (player1 == null || player2 == null) return false;
            return player1.GetTeam() != PlayerTeam.Independent && player1.GetTeam() == player2.GetTeam()
                || player1.GetTeam() == PlayerTeam.Independent && player1.UniqueID == player2.UniqueID;
        }

        public static bool SameTeam(IPlayer player, PlayerTeam team)
        {
            if (team == PlayerTeam.Independent || player.GetTeam() == PlayerTeam.Independent) return false;
            return player.GetTeam() == team;
        }

        public static Color GetTeamColor(PlayerTeam team)
        {
            switch (team)
            {
                case PlayerTeam.Team1: return BeColors.Team1;
                case PlayerTeam.Team2: return BeColors.Team2;
                case PlayerTeam.Team3: return BeColors.Team3;
                case PlayerTeam.Team4: return BeColors.Team4;
                default: return Color.White;
            }
        }

        public static bool IsIndestructible(IObject o) { return o.GetMaxHealth() == 1; }

        public static Dictionary<string, IUser> GetActiveUsersByAccountID()
        {
            var usersByAccountID = new Dictionary<string, IUser>();

            // NOTE: there can be multiple users with the same AccountID in the Map Editor. wtf moment
            // Anyway, get the first IUser match only
            foreach (var user in Game.GetActiveUsers())
            {
                if (!usersByAccountID.ContainsKey(user.AccountID))
                    usersByAccountID.Add(user.AccountID, user);
            }

            return usersByAccountID;
        }

        public static Area Grow(Area area, float width = 0, float height = 0)
        {
            return GrowFromCenter(area.Center, area.Width + width, area.Height + height);
        }

        public static Area GrowFromCenter(Vector2 center, float width, float height = 0)
        {
            if (height == 0) height = width;
            var halfWidth = width / 2;
            var halfHeight = height / 2;

            return GrowFromCenter(center, halfWidth, halfHeight, halfWidth, halfHeight);
        }

        public static Area GrowFromCenter(Vector2 center, float toLeft, float toTop, float toRight, float toBottom)
        {
            return new Area(
                center.Y + toTop,
                center.X - toLeft,
                center.Y - toBottom,
                center.X + toRight);
        }
        public static Area Area(Vector2 min, Vector2 max)
        {
            var area = new Area(min, max); area.Normalize(); return area;
        }

        public static System.Reflection.MethodBase GetMethodInfo(int skipFrames)
        {
            return new System.Diagnostics.StackFrame(skipFrames).GetMethod();
        }
        public static void Stopwatch(Func<string> action, int reportThreshold = 1)
        {
            var stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();
            var name = action();
            stopwatch.Stop();

            if (stopwatch.ElapsedMilliseconds >= reportThreshold)
                LogDebugF("-Perf {2,6} {0}:{1}", stopwatch.ElapsedMilliseconds, GetMethodInfo(1).Name, name);
        }

        public static ProjectilePowerup GetPowerup(IProjectile projectile)
        {
            if (projectile.PowerupBounceActive)
                return ProjectilePowerup.Bouncing;

            if (projectile.PowerupFireActive)
                return ProjectilePowerup.Fire;

            return ProjectilePowerup.None;
        }

        public static bool IsMeAlone()
        {
            var users = Game.GetActiveUsers().Where(u => !u.IsBot);
            var i = 0;

            foreach (var u in users)
            {
                if (u.AccountName == "NearHuscarl") i++;
            }
            return users.Count() == i;
        }

        // Never use is keyword to check if IObject is IPlayer. it's slow
        public static bool IsPlayer(IObject obj)
        {
            if (obj == null) return false;
            return obj.GetCollisionFilter().CategoryBits == CategoryBits.Player;
        }
        // A faster cast player (dont use as/is)
        public static IPlayer AsPlayer(IObject obj)
        {
            if (obj == null) return null;
            return Game.GetPlayer(obj.UniqueID);
        }

        public static bool IsDynamicObject(IObject obj)
        {
            var cf = obj.GetCollisionFilter();
            return cf.CategoryBits == CategoryBits.DynamicG1
                || cf.CategoryBits == CategoryBits.DynamicG2
                || cf.CategoryBits == CategoryBits.Dynamic;
        }

        public static bool IsStaticGround(IObject o) { return o.GetCollisionFilter().CategoryBits == CategoryBits.StaticGround; }
        public static bool IsDynamicG2(IObject o) { return o.GetCollisionFilter().CategoryBits == CategoryBits.DynamicG2; }

        public static bool IsInteractiveObject(IObject obj)
        {
            var cf = obj.GetCollisionFilter();
            return cf.CategoryBits == CategoryBits.DynamicG1
                || cf.CategoryBits == CategoryBits.DynamicG2
                || cf.CategoryBits == CategoryBits.Dynamic
                || cf.CategoryBits == CategoryBits.Player;
        }

        public static bool IsActiveObject(IObject obj)
        {
            var cf = obj.GetCollisionFilter();
            return cf.CategoryBits == CategoryBits.DynamicG1
                || cf.CategoryBits == CategoryBits.DynamicG2
                || cf.CategoryBits == CategoryBits.Dynamic
                || cf.CategoryBits == CategoryBits.Player
                || cf.CategoryBits == CategoryBits.DynamicPlatform
                || cf.CategoryBits == CategoryBits.StaticGround;
        }

        public static IObject GetGroundObject(IObject aboveObject, ushort categoryBits = CategoryBits.StaticGround)
        {
            var boundingBox = aboveObject.GetAABB();
            var start = new Vector2(boundingBox.Center.X, boundingBox.Bottom);
            var end = start + new Vector2(0, -1);
            var results = Game.RayCast(start, end, new RayCastInput()
            {
                FilterOnMaskBits = true,
                MaskBits = categoryBits,
                ClosestHitOnly = true,
                IncludeOverlap = true,
            }).Where(r => r.HitObject != null);

            if (results.Any()) return results.First().HitObject;
            return null;
        }

        public static void Unscrew(IObject o)
        {
            var hitbox = o.GetAABB();
            foreach (var j in Game.GetObjectsByArea<IObjectTargetObjectJoint>(hitbox))
            {
                var to = j.GetTargetObject();
                if (to == null) continue;
                if (to.UniqueID == o.UniqueID)
                {
                    o.SetLinearVelocity(Vector2.Zero);
                    j.SetTargetObject(null);
                    j.Remove();
                }
            }
            foreach (var j in Game.GetObjectsByArea<IObjectWeldJoint>(hitbox))
            {
                j.RemoveTargetObject(o);
            }
            foreach (var j in Game.GetObjectsByArea<IObjectRevoluteJoint>(hitbox))
            {
                var to = j.GetTargetObjectA();
                if (to == null) continue;
                if (to.UniqueID == o.UniqueID)
                    j.SetTargetObjectA(null);
            }
        }

        public static IObjectWeldJoint Weld(params IObject[] weldedObjects)
        {
            weldedObjects = weldedObjects.Where(x => x != null).ToArray();
            if (weldedObjects.Length < 2)
                throw new Exception("weldedObjects is less than 2");

            var weldJoint = (IObjectWeldJoint)Game.CreateObject("WeldJoint", weldedObjects.First().GetWorldPosition());
            weldJoint.SetTargetObjects(weldedObjects);
            return weldJoint;
        }

        public static void WeldPlayer(IPlayer player, IObject weldedObject)
        {
            var weldJoint = Weld(player, weldedObject);
            var relPos = player.GetAABB().Center - weldedObject.GetWorldPosition();
            var hitDir = player.GetFaceDirection();

            RunUntil(() =>
            {
                if (player.IsOnGround)
                {
                    var dir = player.GetFaceDirection() != hitDir ? -1 : 1;
                    var pBox = player.GetAABB();
                    var aBox = weldedObject.GetAABB();
                    var center = pBox.Center;

                    weldedObject.SetFaceDirection(dir);
                    if (weldJoint != null)
                    {
                        weldedObject.SetBodyType(BodyType.Static);
                        weldJoint.Remove();
                        weldJoint = null;
                    }

                    var pos = center - Vector2.UnitY * relPos.Y - Vector2.UnitX * relPos.X * dir;
                    pos.Y = MathHelper.Clamp(pos.Y, pBox.Bottom + aBox.Height, pBox.Top - aBox.Height);
                    pos.X = MathHelper.Clamp(pos.X, pBox.Left + aBox.Width, pBox.Right - aBox.Width);

                    if (player.IsCrouching)
                    {
                        var crouchOffset = -Vector2.UnitY * 5;
                        pos += crouchOffset;
                        pos.Y = MathHelper.Clamp(pos.Y, pBox.Bottom + aBox.Height, pBox.Top - aBox.Height);
                        pos.X = MathHelper.Clamp(pos.X, pBox.Left + aBox.Width, pBox.Right - aBox.Width);
                        weldedObject.SetWorldPosition(pos);
                    }
                    else if (player.IsRolling)
                    {
                        weldedObject.SetWorldPosition(pBox.Center);
                    }
                    else
                    {
                        weldedObject.SetWorldPosition(pos);
                    }
                }
                else if (player.IsInMidAir) // cannot track position accurately when player is in mid air
                {
                    if (weldJoint == null)
                    {
                        weldedObject.SetBodyType(BodyType.Dynamic);
                        weldJoint = Weld(weldedObject, player);
                    }
                }
            }, () => player.IsRemoved || weldedObject.IsRemoved);
        }

        public static IObject[] SplitTileObject(IObject o, Vector2 position)
        {
            var xTiles = o.GetSizeFactor().X;
            var yTiles = o.GetSizeFactor().Y;

            if (xTiles == 1) return new IObject[] { }; // not a tile object

            var tileSize = 8;
            var leftPos = o.GetAABB().Left;
            var effectArea = GrowFromCenter(position, 8, 2);
            var oLeft = (IObject)null;
            var oRight = (IObject)null;

            Unscrew(o);

            for (var i = 0; i < 4; i++)
                Game.PlayEffect(EffectName.BulletHitDefault, RandomHelper.WithinArea(effectArea));

            for (var i = 0; i < xTiles; i++)
            {
                if (leftPos + tileSize * i >= position.X)
                {
                    oLeft = Game.CreateObject(o.Name, o.GetWorldPosition());
                    oRight = Game.CreateObject(o.Name, o.GetWorldPosition() + Vector2.UnitX * tileSize * i);

                    oLeft.SetAngle(o.GetAngle());
                    oLeft.SetLinearVelocity(Vector2.UnitY * -20);
                    oLeft.SetSizeFactor(new Point(i - 1, yTiles));
                    oLeft.SetBodyType(BodyType.Dynamic);
                    oRight.SetAngle(o.GetAngle());
                    oRight.SetLinearVelocity(Vector2.UnitY * -20);
                    oRight.SetSizeFactor(new Point(xTiles - i, yTiles));
                    oRight.SetBodyType(BodyType.Dynamic);
                    break;
                }
            }

            var results = new IObject[] { oLeft, oRight }.Where(x => x != null).ToArray();
            if (results.Length == 2)
                o.Remove();
            return results;
        }

        public struct RopeResult
        {
            public IObjectDistanceJoint DistanceJoint;
            public IObject DistanceJointObject;
            public IObjectTargetObjectJoint TargetObjectJoint;
            public System.Threading.Tasks.Task<bool> Task;
        }
        public static RopeResult CreateRope(Vector2 position, IObject attachedObject, float maxLength, LineVisual visual = LineVisual.None)
        {
            var promise = new System.Threading.Tasks.TaskCompletionSource<bool>();
            var oPos = attachedObject.GetWorldPosition();
            var farPos = GetFarAwayPosition();
            // Setting up the rope length
            var distanceJoint = (IObjectDistanceJoint)Game.CreateObject("DistanceJoint", farPos);
            var distanceJointObject = Game.CreateObject("InvisibleBlockNoCollision", farPos);
            var targetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint", farPos + Vector2.UnitY * maxLength);
            attachedObject.SetWorldPosition(farPos + Vector2.UnitY * maxLength);

            Timeout(() =>
            {
                distanceJoint.SetWorldPosition(position);
                distanceJointObject.SetWorldPosition(position);
                distanceJoint.SetLineVisual(visual);
                targetJoint.SetWorldPosition(oPos);
                attachedObject.SetWorldPosition(oPos);
                promise.TrySetResult(true);
            }, 0);

            distanceJoint.SetTargetObject(distanceJointObject);
            distanceJoint.SetLengthType(DistanceJointLengthType.Elastic);
            distanceJoint.SetTargetObjectJoint(targetJoint);
            targetJoint.SetTargetObject(attachedObject);

            return new RopeResult
            {
                DistanceJoint = distanceJoint,
                DistanceJointObject = distanceJointObject,
                TargetObjectJoint = targetJoint,
                Task = promise.Task,
            };
        }

        public static void Fall(IPlayer player) { Command(player, PlayerCommandType.Fall); }
        public static void KneelFall(IPlayer player)
        {
            Command(player, new PlayerCommand[]
            {
                new PlayerCommand(PlayerCommandType.DeathKneel, 0, 800),
                new PlayerCommand(PlayerCommandType.Fall),
            });
        }

        private static readonly HashSet<PlayerCommandType> CommandWithoutWorkingDirection = new HashSet<PlayerCommandType>
        {
            PlayerCommandType.Stagger, PlayerCommandType.StaggerInfinite,
        };
        public static PlayerCommandFaceDirection GetCommandDirection(IPlayer player, PlayerCommandType commandType, FaceDirection direction)
        {
            var result = PlayerCommandFaceDirection.None;
            if (direction == FaceDirection.None)
                result = player.GetFaceDirection() == -1 ? PlayerCommandFaceDirection.Left : PlayerCommandFaceDirection.Right;
            else
                result = direction == FaceDirection.Left ? PlayerCommandFaceDirection.Left : PlayerCommandFaceDirection.Right;

            if (CommandWithoutWorkingDirection.Contains(commandType))
            {
                if (direction == FaceDirection.Left) player.SetFaceDirection(-1);
                if (direction == FaceDirection.Right) player.SetFaceDirection(1);
            }
            
            return result;
        }

        // a better command method
        public static System.Threading.Tasks.Task<bool> Command(IPlayer player, PlayerCommandType commandType,
            FaceDirection direction = FaceDirection.None,
            int delayTime = 0,
            int targetObjectID = 0)
        {
            var promise = new System.Threading.Tasks.TaskCompletionSource<bool>();

            if (player == null || player.IsDead)
            {
                promise.TrySetResult(false);
                return promise.Task;
            }

            var commandDir = GetCommandDirection(player, commandType, direction);
            if (player.IsInputEnabled) player.SetInputEnabled(false);

            RunIf(() =>
            {
                if (targetObjectID != 0)
                    player.AddCommand(new PlayerCommand(commandType, targetObjectID, commandDir, delayTime));
                else
                    player.AddCommand(new PlayerCommand(commandType, commandDir, delayTime));

                RunIf(() =>
                {
                    player.SetInputEnabled(true);
                    promise.TrySetResult(true);
                }, If: () => player.IsDead || player.CurrentCommandIndex == player.PerformedCommandCount, interval: 32);
            }, If: () => !player.IsDead && player.CurrentCommandIndex == player.PerformedCommandCount, interval: 32);

            return promise.Task;
        }

        public static System.Threading.Tasks.Task<bool> Command(IPlayer player, PlayerCommand[] playerCommands)
        {
            var promise = new System.Threading.Tasks.TaskCompletionSource<bool>();

            if (player == null || player.IsDead)
            {
                promise.TrySetResult(false);
                return promise.Task;
            }

            if (player.IsInputEnabled) player.SetInputEnabled(false);

            var HasQueuedCommands = WithHasQueuedCommands(player);
            Action OnTimeout = () =>
            {
                player.SetInputEnabled(true);
                promise.TrySetResult(false);
            };

            RunIf(() =>
            {
                foreach (var command in playerCommands) player.AddCommand(command);

                RunIf(() =>
                {
                    player.SetInputEnabled(true);
                    promise.TrySetResult(true);
                }, If: () => player.IsDead || !HasQueuedCommands(), timeout: 2000, onTimeout: OnTimeout);
            }, If: () => !player.IsDead && !HasQueuedCommands(), timeout: 2000, onTimeout: OnTimeout);

            return promise.Task;
        }

        public static Func<bool> WithHasQueuedCommands(IPlayer player)
        {
            var exhaustCommandTime = 0f;
            var waitTime = 32;

            return new Func<bool>(() =>
            {
                // don't return true inside this check, there is a frame between multiple commands where CurrentCommandIndex == PerformedCommandCount.
                // We need to wait for a little bit before we are sure that all commands are executed
                if (player.CurrentCommandIndex == player.PerformedCommandCount)
                {
                    if (exhaustCommandTime == 0) exhaustCommandTime = Game.TotalElapsedGameTime;
                }
                else
                    exhaustCommandTime = 0f;

                if (exhaustCommandTime != 0f && IsElapsed(exhaustCommandTime, waitTime))
                {
                    exhaustCommandTime = 0f;
                    return false;
                }
                return true;
            });
        }

        public static void CreateEarthquake(Area area, IPlayer owner = null, float minForce = 3, float maxForce = 12)
        {
            var width = area.Width;
            var center = area.Center;
            var objects = Game.GetObjectsByArea(area);

            Game.PlayEffect(EffectName.CameraShaker, center, 6f, 200f, false);
            Game.PlaySound("Break", center, 150);

            var groundObj = (IObject)null;
            if (owner != null)
                groundObj = GetGroundObject(owner, CategoryBits.DynamicG1);

            foreach (var o in objects)
            {
                if (owner != null && o.UniqueID == owner.UniqueID) continue;

                if (groundObj != null && groundObj.UniqueID == o.UniqueID) continue;
                if (IsInteractiveObject(o))
                {
                    Fall(AsPlayer(o));

                    var distance = Vector2.Distance(center, o.GetWorldPosition());
                    var upVec = MathHelper.Lerp(maxForce, minForce, distance / (width / 2));
                    o.SetLinearVelocity(new Vector2(RandomHelper.Between(-2, 2), upVec));
                    o.SetAngularVelocity(RandomHelper.Between(-6, 6));
                    o.DealDamage(1f);
                }
            }
        }

        public static void Destroy(IObject o, bool remove = true)
        {
            // stupid lamp spawns another object Lamp00_D while I want to remove it completely
            if (o.Name == "Lamp00")
            {
                if (remove) { o.Remove(); return; }
                else
                {
                    var cf = o.GetCollisionFilter();
                    var box = o.GetAABB();
                    o.Destroy();
                    Timeout(() =>
                    {
                        var od = Game.GetObjectsByArea(box).FirstOrDefault(x => x.Name == "Lamp00_D");
                        od.SetCollisionFilter(cf);
                    }, 0);
                }
            }
            else
                o.Destroy();
        }

        public static Vector2 GetFarAwayPosition()
        {
            var randX = RandomHelper.Between(0, 20);
            var randy = RandomHelper.Between(0, 20);
            return Game.GetCameraMaxArea().TopLeft + new Vector2(10 + randX, 10 + randy);
        }

        public static bool IsBear(IPlayer player)
        {
            var skinName = player.GetProfile().Skin.Name;
            return skinName == "FrankenbearSkin" || skinName == "BearSkin";
        }

        public static bool HaveUnderwear(IProfile profile)
        {
            var skin = profile.Skin;
            var noUnderwear = skin.Color1 == "Skin1" && skin.Color2 == "ClothingBrown"
                || skin.Color1 == "Skin2" && skin.Color2 == "ClothingPink"
                || skin.Color1 == "Skin3" && skin.Color2 == "ClothingLightPink"
                || skin.Color1 == "Skin4" && skin.Color2 == "ClothingLightPink"
                || skin.Color1 == "Skin5" && skin.Color2 == "ClothingLightGray";
            return !noUnderwear;
        }

        public static IProfile StripUnderwear(IProfile profile)
        {
            var skin = profile.Skin;
            if (skin.Color1 == "Skin1") profile.Skin.Color2 = "ClothingBrown";
            if (skin.Color1 == "Skin2") profile.Skin.Color2 = "ClothingPink";
            if (skin.Color1 == "Skin3") profile.Skin.Color2 = "ClothingLightPink";
            if (skin.Color1 == "Skin4") profile.Skin.Color2 = "ClothingLightPink";
            if (skin.Color1 == "Skin5") profile.Skin.Color2 = "ClothingLightGray";
            return profile;
        }

        public static List<ClothingType> StrippeableClothingTypes(IProfile profile)
        {
            var strippeableClothingTypes = new List<ClothingType>();

            if (profile.Accesory != null && CanBeStripped(ClothingType.Accesory, profile.Accesory.Name))
                strippeableClothingTypes.Add(ClothingType.Accesory);
            if (profile.ChestOver != null && CanBeStripped(ClothingType.ChestOver, profile.ChestOver.Name))
                strippeableClothingTypes.Add(ClothingType.ChestOver);
            if (profile.ChestUnder != null && CanBeStripped(ClothingType.ChestUnder, profile.ChestUnder.Name))
                strippeableClothingTypes.Add(ClothingType.ChestUnder);
            if (profile.Feet != null && CanBeStripped(ClothingType.Feet, profile.Feet.Name))
                strippeableClothingTypes.Add(ClothingType.Feet);
            if (profile.Hands != null && CanBeStripped(ClothingType.Hands, profile.Hands.Name))
                strippeableClothingTypes.Add(ClothingType.Hands);
            if (profile.Head != null && CanBeStripped(ClothingType.Head, profile.Head.Name))
                strippeableClothingTypes.Add(ClothingType.Head);
            if (profile.Legs != null && CanBeStripped(ClothingType.Legs, profile.Legs.Name))
                strippeableClothingTypes.Add(ClothingType.Legs);
            if (profile.Waist != null && CanBeStripped(ClothingType.Waist, profile.Waist.Name))
                strippeableClothingTypes.Add(ClothingType.Waist);

            return strippeableClothingTypes;
        }

        public static bool CanBeStripped(ClothingType type, string clothingItem)
        {
            switch (type)
            {
                case ClothingType.Head:
                {
                    switch (clothingItem)
                    {
                        case "Afro":
                        case "Buzzcut":
                        case "Mohawk":
                            return false;
                    }
                    break;
                }
                case ClothingType.Accesory:
                {
                    switch (clothingItem)
                    {
                        case "ClownMakeup":
                        case "ClownMakeup_fem":
                        case "Moustache":
                        case "Small Moustache":
                            return false;
                    }
                    break;
                }
            }

            return true;
        }

        public static IProfile Strip(IProfile profile, ClothingType clothingType)
        {
            if (clothingType == ClothingType.Accesory)
                profile.Accesory = null;
            if (clothingType == ClothingType.ChestOver)
                profile.ChestOver = null;
            if (clothingType == ClothingType.ChestUnder)
                profile.ChestUnder = null;
            if (clothingType == ClothingType.Feet)
                profile.Feet = null;
            if (clothingType == ClothingType.Hands)
                profile.Hands = null;
            if (clothingType == ClothingType.Head)
                profile.Head = null;
            if (clothingType == ClothingType.Legs)
                profile.Legs = null;
            if (clothingType == ClothingType.Waist)
                profile.Waist = null;
            return profile;
        }

        public static string GetSoundID(WeaponItem weaponItem)
        {
            switch (weaponItem)
            {
                // TODO: gun only for now
                // Superfighters Deluxe\Content\Data\Sounds\Sounds.sfds
                case WeaponItem.PISTOL45: return "Pistol45";
                case WeaponItem.ASSAULT: return "AssaultRifle";
                case WeaponItem.BAZOOKA: return "Bazooka";
                case WeaponItem.BOW: return "BowShoot";
                case WeaponItem.CARBINE: return "Carbine";
                case WeaponItem.FLAMETHROWER: return "Flamethrower";
                case WeaponItem.FLAREGUN: return "Flaregun";
                case WeaponItem.GRENADE_LAUNCHER: return "GLauncher";
                case WeaponItem.M60: return "M60";
                case WeaponItem.MACHINE_PISTOL: return "MachinePistol";
                case WeaponItem.MAGNUM: return "Magnum";
                case WeaponItem.MP50: return "MP50";
                case WeaponItem.PISTOL: return "Pistol";
                case WeaponItem.SHOTGUN: return "Shotgun";
                case WeaponItem.REVOLVER: return "Revolver";
                case WeaponItem.DARK_SHOTGUN: return "RiotShotgun";
                case WeaponItem.SAWED_OFF: return "SawedOff";
                case WeaponItem.SILENCEDPISTOL: return "SilencedPistol";
                case WeaponItem.SILENCEDUZI: return "SilencedUzi";
                case WeaponItem.SNIPER: return "Sniper";
                case WeaponItem.SUB_MACHINEGUN: return "SMG";
                case WeaponItem.TOMMYGUN: return "TommyGun";
                case WeaponItem.UZI: return "UZI";
                default: return "Pistol";
            }
        }
    }
    public static class SFD
    {
        public static IGame Game;
    }
    public static class SharpHelper
    {
        public static T StringToEnum<T>(string str)
        {
            return (T)Enum.Parse(typeof(T), str);
        }
        public static T[] EnumToArray<T>()
        {
            return (T[])Enum.GetValues(typeof(T));
        }

        public static IEnumerable<T> EnumToList<T>()
        {
            var enumArray = EnumToArray<T>();

            foreach (var enumVal in enumArray)
            {
                yield return enumVal;
            }
        }
        // a bit faster than ToString(). https://stackoverflow.com/a/17034624/9449426
        public static string EnumToString<T>(T enumVal)
        {
            return Enum.GetName(typeof(T), enumVal);
        }
        public static bool TryParseEnum<T>(string str, out T result) where T : struct, IConvertible
        {
            result = default(T);

            if (!typeof(T).IsEnum)
            {
                return false;
            }

            int index = -1;
            if (int.TryParse(str, out index))
            {
                if (Enum.IsDefined(typeof(T), index))
                {
                    // https://stackoverflow.com/questions/10387095/cast-int-to-generic-enum-in-c-sharp
                    result = (T)(object)index;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if (!Enum.TryParse(str, ignoreCase: true, result: out result))
                {
                    return false;
                }
            }

            return true;
        }

        public static string GetNamespace<T>()
        {
            return typeof(T).Namespace;
        }

        public static bool IsIntersectRectangle(Vector2 start, Vector2 end, Vector2[] corners)
        {
            if (corners.Length != 4)
                throw new Exception("A rectangle must have 4 corners");

            var normal = Vector2.Normalize(end - start);

            //we don't know yet on which side of the line the rectangle lies
            float rectangleSide = 0;
            foreach (Vector2 corner in corners)
            {
                //cornerSide will be positive if the corner is on the side the normal points to,
                //zero if the corner is exactly on the line, and negative otherwise
                float cornerSide = Vector2.Dot(corner - start, normal);
                if (rectangleSide == 0)
                    //first evaluated corner or all previous corners lie exactly on the line
                    rectangleSide = cornerSide;
                else
                    if (cornerSide != 0 && // ignore corners on the line
                      (cornerSide > 0) != (rectangleSide > 0)) // different sides
                    return true;
            }

            return false;
        }

        public static System.Threading.Tasks.Task<T> FromResult<T>(T value)
        {
            var tcs = new System.Threading.Tasks.TaskCompletionSource<T>();
            tcs.SetResult(value);
            return tcs.Task;
        }
    }
    class CustomProjectile : ProjectileBase
    {
        public IObject Instance { get; private set; }
        public override int ID { get { return Instance.UniqueID; } }
        public override bool IsRemoved
        {
            get { return Instance == null ? true : Instance.IsRemoved; }
            protected set { }
        }

        private Vector2 m_createPosition;
        public float TotalDistanceTraveled { get; private set; }

        public CustomProjectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup)
        {
            Instance = OnProjectileCreated(projectile);
            if (Instance == null) Powerup = RangedWeaponPowerup.None;

            m_createPosition = Instance.GetWorldPosition();
            TotalDistanceTraveled = 0f;
            IsCustomProjectile = true;
        }

        protected static IObject CreateCustomProjectile(IProjectile projectile, string objectID)
        {
            return CreateCustomProjectile(projectile, objectID, projectile.Velocity / 50 + Vector2.UnitY * 3);
        }
        protected static IObject CreateCustomProjectile(IProjectile projectile, string objectID, Vector2 velocity, float angularVelocity = 0)
        {
            var customBullet = Game.CreateObject(objectID);
            var length = Math.Max(customBullet.GetAABB().Width, customBullet.GetAABB().Height);

            customBullet.SetWorldPosition(projectile.Position + projectile.Direction * (length + 1));
            customBullet.SetLinearVelocity(velocity);
            customBullet.SetAngularVelocity(angularVelocity);
            customBullet.SetFaceDirection(Math.Sign(projectile.Direction.X));
            customBullet.TrackAsMissile(true);

            projectile.FlagForRemoval();

            return customBullet;
        }

        protected virtual IObject OnProjectileCreated(IProjectile projectile) { return null; }
        public virtual void OnProjectileTerminated() { }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);
            TotalDistanceTraveled = Vector2.Distance(Instance.GetWorldPosition(), m_createPosition);
        }
    }
    public enum MeleeWeaponPowerup
    {
        None,
        Breaking,
        Earthquake,
        FireTrail,
        Hurling,
        Gib,
        GroundBreaker,
        GroundSlam,
        Megaton,
        Pushback,
        Serious,
        Slide,
        Splitting,
    }
    class MeleeWpn : Wpn
    {
        public MeleeWeaponPowerup Powerup { get; protected set; }

        public MeleeWpn(IPlayer owner) : this(owner, WeaponItem.NONE, MeleeWeaponPowerup.None) { }
        public MeleeWpn(IPlayer owner, WeaponItem name, MeleeWeaponPowerup powerup)
            : base(owner, name)
        {
            Powerup = powerup;
            if (!IsValidPowerup()) throw new Exception("Weapon " + name + " cannot have powerup " + powerup);
        }

        public override bool IsValidPowerup()
        {
            return Name != WeaponItem.CHAINSAW || Powerup == MeleeWeaponPowerup.None;
        }

        public void Add(WeaponItem name, MeleeWeaponPowerup powerup)
        {
            Name = name;
            Type = Mapper.GetWeaponItemType(name);
            Powerup = powerup;
        }

        public override void Remove()
        {
            base.Remove();
            Powerup = MeleeWeaponPowerup.None;
        }

        private MeleeAction _lastMeleeAction;
        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (Powerup == MeleeWeaponPowerup.None) return;

            if (_lastMeleeAction != CurrentMeleeAction)
            {
                var hitPosition = Owner.GetWorldPosition() + Vector2.UnitX * Owner.GetFaceDirection() * 12;
                OnMeleeActionChanged(CurrentMeleeAction, hitPosition);
                _lastMeleeAction = CurrentMeleeAction;
            }
        }

        protected virtual void OnMeleeActionChanged(MeleeAction meleeAction, Vector2 hitPosition) { }
        public MeleeAction CurrentMeleeAction { get { return BotManager.GetBot(Owner).CurrentMeleeAction; } }
        public virtual void OnMeleeAction(PlayerMeleeHitArg[] args) { }

        public static bool IsSharpWeapon(WeaponItem weaponItem)
        {
            return weaponItem == WeaponItem.AXE
                || weaponItem == WeaponItem.KATANA
                || weaponItem == WeaponItem.KNIFE
                || weaponItem == WeaponItem.MACHETE;
        }

        public static bool IsHitTheFloorWeapon(WeaponItem weaponItem)
        {
            // weapons that have the beat-the-ground animation on third attack
            return weaponItem == WeaponItem.MACHETE
                || weaponItem == WeaponItem.AXE
                || weaponItem == WeaponItem.BAT
                || weaponItem == WeaponItem.BATON
                || weaponItem == WeaponItem.SHOCK_BATON
                || weaponItem == WeaponItem.PIPE
                || weaponItem == WeaponItem.HAMMER
                || weaponItem == WeaponItem.LEAD_PIPE
                || weaponItem == WeaponItem.KATANA;
        }
    }
    class PlayerWeapon
    {
        public IPlayer Owner { get; private set; }
        public MeleeWpn MeleeHand;
        public MeleeWpn MeleeMakeshift;
        public MeleeWpn Melee;
        public RangeWpn Primary { get; set; }
        public RangeWpn Secondary { get; set; }

        public RangeWpn Throwable { get; set; }
        public Wpn Powerup { get; set; }

        public MeleeWpn CurrentMeleeWeapon
        {
            get
            {
                switch (Owner.CurrentWeaponDrawn)
                {
                    case WeaponItemType.Melee:
                        if (Owner.CurrentMeleeMakeshiftWeapon.WeaponItem != WeaponItem.NONE)
                            return MeleeMakeshift;
                        return Melee;
                    case WeaponItemType.NONE:
                        return MeleeHand;
                    default:
                        return null;
                }
            }
        }

        public RangeWpn CurrentRangeWeapon
        {
            get
            {
                switch (Owner.CurrentWeaponDrawn)
                {
                    case WeaponItemType.Rifle:
                        return Primary;
                    case WeaponItemType.Handgun:
                        return Secondary;
                    case WeaponItemType.Thrown:
                        return Throwable;
                    default:
                        return null;
                }
            }
        }

        public static PlayerWeapon Empty(IPlayer owner)
        {
            return new PlayerWeapon()
            {
                Owner = owner,
                MeleeMakeshift = new MeleeWpn(owner),
                MeleeHand = new MeleeWpn(owner),
                Melee = new MeleeWpn(owner),
                Primary = new RangeWpn(owner),
                Secondary = new RangeWpn(owner),
                Throwable = new RangeWpn(owner),
                Powerup = new Wpn(owner),
            };
        }
    }
    class PowerupManager
    {
        public class PowerupInfo
        {
            public RangedWeaponPowerup RangedPowerup = RangedWeaponPowerup.None;
            public MeleeWeaponPowerup MeleePowerup = MeleeWeaponPowerup.None;
            public bool HasPowerup
            {
                get { return RangedPowerup != RangedWeaponPowerup.None || MeleePowerup != MeleeWeaponPowerup.None; }
            }
        }
        private class WeaponInfo : PowerupInfo
        {
            public WeaponItem Weapon = WeaponItem.NONE;
        }
        private class WeaponObjectInfo : PowerupInfo
        {
            public IObjectWeaponItem Weapon = null;
        }

        private class Weapon
        {
            public Weapon(WeaponObjectInfo info) { WeaponInfo = info; }
            public WeaponObjectInfo WeaponInfo;
            public float EffectTime = 0f;
        }

        private static Dictionary<int, List<WeaponInfo>> m_queuedPowerups = new Dictionary<int, List<WeaponInfo>>();
        private static Dictionary<int, CustomProjectile> m_customProjectiles = new Dictionary<int, CustomProjectile>();
        private static Dictionary<int, ProjectileBase> m_projectiles = new Dictionary<int, ProjectileBase>();
        private static Dictionary<int, Weapon> m_weapons = new Dictionary<int, Weapon>(); // weapons laying on the ground
        private static Dictionary<int, PlayerWeapon> m_owners = new Dictionary<int, PlayerWeapon>(); // equipped weapons

        public static void Initialize()
        {
            Events.UpdateCallback.Start(OnUpdate);
            Events.PlayerWeaponAddedActionCallback.Start(OnPlayerPickedUpWeapon);
            Events.PlayerWeaponRemovedActionCallback.Start(OnPlayerDroppedWeapon);
            Events.PlayerDeathCallback.Start(OnPlayerDeath);
            Events.PlayerKeyInputCallback.Start(OnPlayerKeyInput);
            Events.ProjectileCreatedCallback.Start(OnProjectileCreated);
            Events.ProjectileHitCallback.Start(OnProjectileHit);
            Events.PlayerMeleeActionCallback.Start(OnMeleeAction);
            Events.ObjectTerminatedCallback.Start(OnObjectTerminated);

            //Events.UpdateCallback.Start((e) =>
            //{
            //    ScriptHelper.LogDebug(
            //        m_owners.Count,
            //        m_queuedPowerups.Count,
            //        m_projectiles.Count,
            //        m_customProjectiles.Count,
            //        m_weapons.Count);
            //}, 30, 0);
        }

        private static float m_lastUpdateTime = 0f;
        private static void OnUpdate(float _)
        {
            var elapsed = Game.TotalElapsedGameTime - m_lastUpdateTime;

            foreach (var item in m_weapons)
            {
                var weapon = item.Value;
                if (weapon.WeaponInfo.HasPowerup)
                    PlayMoreShinyEffect(weapon, elapsed);
            }

            foreach (var projectileID in m_projectiles.Keys.ToList())
            {
                var projectile = m_projectiles[projectileID];
                projectile.OnUpdate(elapsed);
                if (projectile.IsRemoved)
                {
                    projectile.OnRemove();
                    m_projectiles.Remove(projectileID); // Projectile.ID was already reset to 0 at this point
                }
            }

            foreach (var projectileID in m_customProjectiles.Keys.ToList())
            {
                var projectile = m_customProjectiles[projectileID];
                
                if (projectile.IsRemoved)
                {
                    projectile.OnRemove();
                    m_customProjectiles.Remove(projectileID);
                }
                else
                    projectile.OnUpdate(elapsed);
            }

            // need to create a new list before iterating since Update() can trigger a kill which leads to the collection being modified
            foreach (var o in m_owners.ToList())
            {
                var playerWpn = o.Value;

                playerWpn.Primary.Update(elapsed);
                playerWpn.Secondary.Update(elapsed);

                var currentMeleeWpn = GetMeleeWpn(Game.GetPlayer(o.Key));

                if (currentMeleeWpn != null)
                    currentMeleeWpn.Update(elapsed);
            }

            m_lastUpdateTime = Game.TotalElapsedGameTime;
        }

        private static void OnPlayerDeath(IPlayer player, PlayerDeathArgs args)
        {
            if (args.Removed)
            {
                PlayerWeapon playerWpn;

                if (m_owners.TryGetValue(player.UniqueID, out playerWpn))
                {
                    playerWpn.Melee.Remove();
                    playerWpn.Primary.Remove();
                    playerWpn.Secondary.Remove();
                    playerWpn.Throwable.Remove();
                    playerWpn.Powerup.Remove();
                    m_owners.Remove(player.UniqueID);
                }

                if (m_queuedPowerups.ContainsKey(player.UniqueID))
                {
                    m_queuedPowerups.Remove(player.UniqueID);
                }
            }
        }

        private static void OnPlayerKeyInput(IPlayer player, VirtualKeyInfo[] keyInfos)
        {
            PlayerWeapon playerWpn;

            if (m_owners.TryGetValue(player.UniqueID, out playerWpn))
            {
                var currentRangeWpn = playerWpn.CurrentRangeWeapon;
                if (currentRangeWpn != null)
                    currentRangeWpn.OnPlayerKeyInput(keyInfos);
            }
        }

        private static void PlayMoreShinyEffect(Weapon weapon, float elapsed)
        {
            var weaponObject = weapon.WeaponInfo.Weapon;
            var hitBox = weaponObject.GetAABB();
            weapon.EffectTime += elapsed;

            if (weapon.EffectTime >= 400)
            {
                Game.PlayEffect(EffectName.ItemGleam, new Vector2()
                {
                    X = RandomHelper.Between(hitBox.Left, hitBox.Right),
                    Y = RandomHelper.Between(hitBox.Bottom, hitBox.Top),
                });
                weapon.EffectTime = 0f;
            }
        }

        public static PlayerWeapon GetOrCreatePlayerWeapon(IPlayer owner)
        {
            if (owner.UniqueID == 0) return null;

            PlayerWeapon playerWpn;
            if (!m_owners.TryGetValue(owner.UniqueID, out playerWpn))
            {
                playerWpn = PlayerWeapon.Empty(owner);
                m_owners.Add(owner.UniqueID, playerWpn);
            }
            return playerWpn;
        }

        public static PowerupInfo GetPowerupInfo(int weaponObjectID)
        {
            Weapon weapon;

            if (m_weapons.TryGetValue(weaponObjectID, out weapon))
            {
                return weapon.WeaponInfo;
            }
            return null;
        }

        private static WeaponInfo CreateWeaponInfo(WeaponItem weaponItem)
        {
            return new WeaponInfo { Weapon = weaponItem };
        }
        private static WeaponInfo CreateWeaponInfo(WeaponItem weaponItem, RangedWeaponPowerup powerup)
        {
            return new WeaponInfo { Weapon = weaponItem, RangedPowerup = powerup };
        }
        private static WeaponInfo CreateWeaponInfo(WeaponItem weaponItem, MeleeWeaponPowerup powerup)
        {
            return new WeaponInfo { Weapon = weaponItem, MeleePowerup = powerup };
        }

        internal static void SetPowerup(IPlayer player, WeaponItem weaponItem, MeleeWeaponPowerup powerup)
        {
            if (!m_queuedPowerups.ContainsKey(player.UniqueID))
                m_queuedPowerups[player.UniqueID] = new List<WeaponInfo>();

            // Barehand: OnPlayerPickupWeapon is never invoked in this case so we need to assign hand weapon here.
            if (weaponItem == WeaponItem.NONE)
            {
                GetOrCreatePlayerWeapon(player).MeleeHand = PowerupWeaponFactory.Create(player, weaponItem, powerup);
                return;
            }
            m_queuedPowerups[player.UniqueID].Add(CreateWeaponInfo(weaponItem, powerup));
            player.GiveWeaponItem(weaponItem);
        }

        internal static void SetPowerup(IPlayer player, WeaponItem weaponItem, RangedWeaponPowerup powerup)
        {
            if (!m_queuedPowerups.ContainsKey(player.UniqueID))
                m_queuedPowerups[player.UniqueID] = new List<WeaponInfo>();

            m_queuedPowerups[player.UniqueID].Add(CreateWeaponInfo(weaponItem, powerup));
            player.GiveWeaponItem(weaponItem);
        }

        internal static IObjectWeaponItem CreateWeapon(string objectID, MeleeWeaponPowerup powerup)
        {
            var weaponObject = (IObjectWeaponItem)Game.CreateObject(objectID);
            var newWeaponInfo = new WeaponObjectInfo()
            {
                Weapon = weaponObject,
                MeleePowerup = powerup,
            };
            m_weapons.Add(weaponObject.UniqueID, new Weapon(newWeaponInfo));
            return weaponObject;
        }

        internal static IObjectWeaponItem CreateWeapon(string objectID, RangedWeaponPowerup powerup)
        {
            var weaponObject = (IObjectWeaponItem)Game.CreateObject(objectID);
            var newWeaponInfo = new WeaponObjectInfo()
            {
                Weapon = weaponObject,
                RangedPowerup = powerup,
            };
            m_weapons.Add(weaponObject.UniqueID, new Weapon(newWeaponInfo));
            return weaponObject;
        }

        private static void OnPlayerDroppedWeapon(IPlayer player, PlayerWeaponRemovedArg arg)
        {
            // ID == 0 means no weapon was dropped. For example: Activating instant powerup will make it disappeared, not dropped
            if (arg.TargetObjectID == 0) return;

            // player argument may be a null object if the weapon drops right after the player was gibbed
            if (player.UniqueID == 0) return;

            // dropped weapons dont not always have IObjectWeaponItem type. For example thrown grenades have IObject type
            var weaponObject = Game.GetObject(arg.TargetObjectID) as IObjectWeaponItem;
            if (weaponObject == null) return;

            var oldPlayerWpn = GetOrCreatePlayerWeapon(player);
            var newWeaponInfo = new WeaponObjectInfo() { Weapon = weaponObject };

            switch (weaponObject.WeaponItemType)
            {
                case WeaponItemType.Melee:
                    if (Mapper.IsMakeshiftWeapon(weaponObject.WeaponItem))
                    {
                        newWeaponInfo.MeleePowerup = oldPlayerWpn.MeleeMakeshift.Powerup;
                        m_owners[player.UniqueID].MeleeMakeshift.Remove();
                        m_owners[player.UniqueID].MeleeMakeshift = PowerupWeaponFactory.Create(player, WeaponItem.NONE, MeleeWeaponPowerup.None);
                        break;
                    }
                    newWeaponInfo.MeleePowerup = oldPlayerWpn.Melee.Powerup;
                    m_owners[player.UniqueID].Melee.Remove();
                    m_owners[player.UniqueID].Melee = PowerupWeaponFactory.Create(player, WeaponItem.NONE, MeleeWeaponPowerup.None);
                    break;
                case WeaponItemType.Rifle:
                    newWeaponInfo.RangedPowerup = oldPlayerWpn.Primary.Powerup;
                    m_owners[player.UniqueID].Primary.Remove();
                    m_owners[player.UniqueID].Primary = PowerupWeaponFactory.Create(player, WeaponItem.NONE, RangedWeaponPowerup.None);
                    break;
                case WeaponItemType.Handgun:
                    newWeaponInfo.RangedPowerup = oldPlayerWpn.Secondary.Powerup;
                    m_owners[player.UniqueID].Secondary.Remove();
                    m_owners[player.UniqueID].Secondary = PowerupWeaponFactory.Create(player, WeaponItem.NONE, RangedWeaponPowerup.None);
                    break;
                case WeaponItemType.Thrown:
                    newWeaponInfo.RangedPowerup = oldPlayerWpn.Throwable.Powerup;
                    m_owners[player.UniqueID].Throwable.Remove();
                    // TODO: create null object for thrown weapon
                    m_owners[player.UniqueID].Throwable = PowerupWeaponFactory.Create(player, WeaponItem.NONE, RangedWeaponPowerup.None);
                    break;
            }

            m_weapons.Add(weaponObject.UniqueID, new Weapon(newWeaponInfo));
        }

        private static void OnPlayerPickedUpWeapon(IPlayer player, PlayerWeaponAddedArg arg)
        {
            if (!m_weapons.ContainsKey(arg.SourceObjectID) && !m_queuedPowerups.ContainsKey(player.UniqueID))
                return;

            GetOrCreatePlayerWeapon(player);

            // TODO: gibbed player doesn't fire OnPlayerDropped, so calling m_weapons.GetItem() will throw
            // wait for gurt to fix and remove this line:
            // https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=3999&p=23441#p23441
            if (arg.SourceObjectID != 0 && !m_weapons.ContainsKey(arg.SourceObjectID))
                return;

            var weaponInfo = (PowerupInfo)null;

            // get weapon via commands
            if (arg.SourceObjectID == 0)
            {
                // get weapon via BE command or from LocalStorage (e.g. /be sw near m60 minigun)
                weaponInfo = m_queuedPowerups[player.UniqueID].Where(wi => wi.Weapon == arg.WeaponItem).FirstOrDefault();
                // get weapon via vanilla command (e.g. /give 0 m60)
                //if (weaponInfo == null)
                //    weaponInfo = CreateWeaponInfo(arg.WeaponItem);
            }
            else
                weaponInfo = m_weapons[arg.SourceObjectID].WeaponInfo;

            if (weaponInfo == null) return;

            var createRangedWeapon = new Func<RangeWpn>(
                () => PowerupWeaponFactory.Create(player, arg.WeaponItem, weaponInfo.RangedPowerup));
            var createMeleeWeapon = new Func<MeleeWpn>(
                () => PowerupWeaponFactory.Create(player, arg.WeaponItem, weaponInfo.MeleePowerup));

            switch (arg.WeaponItemType)
            {
                case WeaponItemType.Melee:
                    if (Mapper.IsMakeshiftWeapon(arg.WeaponItem))
                    {
                        m_owners[player.UniqueID].MeleeMakeshift = createMeleeWeapon();
                        break;
                    }
                    m_owners[player.UniqueID].Melee = createMeleeWeapon();
                    break;
                case WeaponItemType.Rifle:
                    m_owners[player.UniqueID].Primary = createRangedWeapon();
                    break;
                case WeaponItemType.Handgun:
                    m_owners[player.UniqueID].Secondary = createRangedWeapon();
                    break;
                // TODO: create thrown weapon with factory if implement one
                case WeaponItemType.Thrown:
                    m_owners[player.UniqueID].Throwable = createRangedWeapon();
                    break;
            }

            if (arg.SourceObjectID == 0)
                m_queuedPowerups[player.UniqueID].Remove((WeaponInfo)weaponInfo);
            else
                m_weapons.Remove(arg.SourceObjectID);
        }

        private static void OnProjectileCreated(IProjectile[] projectiles)
        {
            foreach (var projectile in projectiles)
            {
                var ownerID = projectile.InitialOwnerPlayerID;

                // Projectile is not fired from IPlayer, custom weapon with custom powerup is not supported
                if (ownerID == 0) continue;

                var owner = Game.GetPlayer(ownerID);
                var playerWpn = GetOrCreatePlayerWeapon(owner);
                var powerup = RangedWeaponPowerup.None;
                var weaponItem = Mapper.GetWeaponItem(projectile.ProjectileItem);

                if (weaponItem == playerWpn.Primary.Name)
                    powerup = playerWpn.Primary.Powerup;
                if (weaponItem == playerWpn.Secondary.Name)
                    powerup = playerWpn.Secondary.Powerup;

                if (powerup != RangedWeaponPowerup.None)
                {
                    var proj = ProjectileFactory.Create(projectile, powerup);
                    if (proj != null && proj.Powerup != RangedWeaponPowerup.None)
                    {
                        if (proj.IsCustomProjectile)
                            m_customProjectiles.Add(proj.ID, (CustomProjectile)proj);
                        else
                            m_projectiles.Add(proj.ID, proj);
                    }

                    var currentRangeWpn = playerWpn.CurrentRangeWeapon;
                    if (currentRangeWpn != null)
                        playerWpn.CurrentRangeWeapon.OnProjectileCreated(projectile);
                }
            }
        }

        public static void UpdateProjectile(IProjectile oldP, IProjectile newP)
        {
            if (!m_projectiles.ContainsKey(oldP.InstanceID)) return;
            var oldProjectile = m_projectiles[oldP.InstanceID];
            m_projectiles.Remove(oldP.InstanceID);
            m_projectiles.Add(newP.InstanceID, oldProjectile);
        }

        private static void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            if (m_projectiles.ContainsKey(projectile.InstanceID))
            {
                var proj = m_projectiles[projectile.InstanceID];
                var ownerID = proj.InitialOwnerPlayerID;

                // Projectile is not fired from IPlayer, custom weapon with custom powerup is not supported
                if (ownerID == 0) return;

                proj.OnProjectileHit(args);

                // TODO: powerup is not activated if the player is dead
                PlayerWeapon playerWpn;
                if (m_owners.TryGetValue(ownerID, out playerWpn))
                {
                    var currentRangeWpn = playerWpn.CurrentRangeWeapon;
                    if (currentRangeWpn != null)
                    {
                        // TODO: this line doesn't work
                        currentRangeWpn.OnProjectileHit(projectile, args);
                    }
                }

                // NOTE: the reason I dont remove projectile when RemoveFlag = true is because some projectiles
                // like Spinner have longer lifecycle than the original projectile itself
            }
        }

        private static MeleeWpn GetMeleeWpn(IPlayer player)
        {
            if (player == null) return null;

            var playerWpn = GetOrCreatePlayerWeapon(player);
            var weaponItem = BotManager.GetBot(player).CurrentWeapon;

            // barehand powerup is always available and is only overridden when another melee weapon has powerup
            if (weaponItem == playerWpn.Melee.Name && weaponItem != WeaponItem.NONE && playerWpn.Melee.Powerup != MeleeWeaponPowerup.None)
            {
                return playerWpn.Melee;
            }
            return playerWpn.MeleeHand;
        }

        private static void OnMeleeAction(IPlayer owner, PlayerMeleeHitArg[] args)
        {
            var meleeWpn = GetMeleeWpn(owner);

            if (meleeWpn == null || meleeWpn.Powerup == MeleeWeaponPowerup.None) return;

            // OnMeleeAction is invoked a bit early, before MeleeAction is updated
            // https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&p=24824&sid=80ecb190dfe9c7febc1f3ede990a83c6#p24824
            ScriptHelper.Timeout(() =>
            {
                foreach (var arg in args) meleeWpn.OnMeleeAction(args);
            }, 0);
        }

        private static void OnObjectTerminated(IObject[] objs)
        {
            foreach (var obj in objs)
            {
                if (m_customProjectiles.ContainsKey(obj.UniqueID))
                {
                    var proj = m_customProjectiles[obj.UniqueID];
                    proj.OnProjectileTerminated();
                }

                var uniqueID = obj.UniqueID;

                // wait and see if the picked-up callback fires and removes first. this callback should only remove m_weapons here
                // if it's despawned
                // because picked-up callback is fired at the end of the update, removing the object now will lead to null
                // exception later on in the picked-up callback
                ScriptHelper.Timeout(() =>
                {
                    if (m_weapons.ContainsKey(uniqueID))
                    {
                        m_weapons.Remove(uniqueID);
                    }
                }, 0);
            }
        }
    }
    static class PowerupWeaponFactory
    {
        public static RangeWpn Create(IPlayer owner, WeaponItem name, RangedWeaponPowerup powerup)
        {
            try
            {
                var type = Mapper.GetWeaponItemType(name);
                switch (powerup)
                {
                    case RangedWeaponPowerup.Delay:
                        return new DelayGun(owner, name);
                    case RangedWeaponPowerup.Gauss:
                        return new GaussGun(owner, name);
                    case RangedWeaponPowerup.Gravity:
                    case RangedWeaponPowerup.GravityDE:
                        return new GravityGun(owner, name, powerup);
                    case RangedWeaponPowerup.Minigun:
                        return new MiniGun(owner, name);
                    case RangedWeaponPowerup.Object:
                        return new ObjectGun(owner, name);
                    case RangedWeaponPowerup.Shotgun:
                        return new Shotgun(owner, name);
                    case RangedWeaponPowerup.Taser:
                        return new TaserGun(owner, name);
                    default:
                        return new RangeWpn(owner, name, powerup);
                }
            }
            catch
            {
                return new RangeWpn(owner, name, powerup);
            }
        }
        public static MeleeWpn Create(IPlayer owner, WeaponItem name, MeleeWeaponPowerup powerup)
        {
            try
            {
                switch (powerup)
                {
                    case MeleeWeaponPowerup.Breaking:
                        return new BreakingPowerup(owner, name);
                    case MeleeWeaponPowerup.Earthquake:
                        return new EarthquakePowerup(owner, name);
                    case MeleeWeaponPowerup.FireTrail:
                        return new FireTrailPowerup(owner, name);
                    case MeleeWeaponPowerup.Hurling:
                        return new HurlingPowerup(owner, name);
                    case MeleeWeaponPowerup.Gib:
                        return new GibPowerup(owner, name);
                    case MeleeWeaponPowerup.GroundBreaker:
                        return new GroundBreakerPowerup(owner, name);
                    case MeleeWeaponPowerup.GroundSlam:
                        return new GroundSlamPowerup(owner, name);
                    case MeleeWeaponPowerup.Megaton:
                        return new MegatonPowerup(owner, name);
                    case MeleeWeaponPowerup.Pushback:
                        return new PushbackPowerup(owner, name);
                    case MeleeWeaponPowerup.Serious:
                        return new SeriousPowerup(owner, name);
                    case MeleeWeaponPowerup.Slide:
                        return new SlidePowerup(owner, name);
                    case MeleeWeaponPowerup.Splitting:
                        return new SplittingPowerup(owner, name);
                    default:
                        return new MeleeWpn(owner, name, powerup);
                }
            }
            catch
            {
                return new MeleeWpn(owner, name, powerup);
            }
        }
    }
    class Projectile : ProjectileBase
    {
        private IProjectile _instance;
        public IProjectile Instance
        {
            get { return _instance; }
            protected set
            {
                if (Instance != null && value != null)
                    PowerupManager.UpdateProjectile(Instance, value);
                _instance = value;
            }
        }

        public override int ID { get { return Instance.InstanceID; } }
        public override bool IsRemoved
        {
            get { return Instance.IsRemoved; }
            protected set { }
        }

        public Projectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup)
        {
            Instance = projectile;

            if (!OnProjectileCreated())
            {
                Powerup = RangedWeaponPowerup.None;
            }

            IsCustomProjectile = false;
        }

        protected virtual bool OnProjectileCreated() { return true; }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (IsExplosiveProjectile)
            {
                var explosiveArea = ScriptHelper.GrowFromCenter(args.HitPosition, Constants.ExplosionRadius * 2);
                var playersInRadius = Game.GetObjectsByArea<IPlayer>(explosiveArea)
                    .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), args.HitPosition, Constants.ExplosionRadius));

                OnProjectileExploded(playersInRadius);
            }
        }

        protected virtual void OnProjectileExploded(IEnumerable<IPlayer> playersInRadius) { }

        public bool IsShotgunShell { get { return IsShotgun(Instance.ProjectileItem); } }

        public bool IsExplosiveProjectile
        {
            get
            {
                // TODO: test Flak Cannon
                return Instance.ProjectileItem == ProjectileItem.BAZOOKA
                    || Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER;
            }
        }

        public static bool IsShotgun(ProjectileItem projectile)
        {
            return projectile == ProjectileItem.SHOTGUN
                || projectile == ProjectileItem.DARK_SHOTGUN
                || projectile == ProjectileItem.SAWED_OFF;
        }

        public static bool IsSlowProjectile(ProjectileItem projectile)
        {
            return projectile == ProjectileItem.BOW
                || projectile == ProjectileItem.BAZOOKA
                || projectile == ProjectileItem.GRENADE_LAUNCHER
                || projectile == ProjectileItem.FLAREGUN;
        }

        public int ProjectilesPerShell
        {
            get
            {
                if (Instance == null) return 0;

                switch (Instance.ProjectileItem)
                {
                    case ProjectileItem.SHOTGUN:
                        return 6;
                    case ProjectileItem.DARK_SHOTGUN:
                        return 8;
                    case ProjectileItem.SAWED_OFF:
                        return 6;
                    case ProjectileItem.NONE:
                        return 0;
                    default:
                        return 1;
                }
            }
        }
    }
    abstract class ProjectileBase
    {
        public abstract int ID { get; }
        public PlayerTeam Team { get; private set; }
        public float CreatedTime { get; private set; }
        // Don't reference Instance.InitialOwnerPlayerID. Instance can be updated and makes
        // Instance.InitialOwnerPlayerID become obsolete, since there is no way to copy InitialOwnerPlayerID
        // value to the new Instance
        // Also CustomProjectile do not have its own InitialOwnerPlayerID
        public int InitialOwnerPlayerID { get; private set; }
        public abstract bool IsRemoved { get; protected set; }
        public RangedWeaponPowerup Powerup { get; protected set; }
        public bool IsCustomProjectile { get; protected set; }
        protected float UpdateDelay { get; set; }

        public ProjectileBase(IProjectile projectile, RangedWeaponPowerup powerup)
        {
            Powerup = powerup;
            UpdateDelay = 0f;
            // in case the original player is not available when the projectile hits
            Team = Game.GetPlayer(projectile.InitialOwnerPlayerID).GetTeam();
            InitialOwnerPlayerID = projectile.InitialOwnerPlayerID;
            CreatedTime = Game.TotalElapsedGameTime;
        }

        private float m_updateTime = 0f;
        public void OnUpdate(float elapsed)
        {
            if (ScriptHelper.IsElapsed(m_updateTime, UpdateDelay))
            {
                m_updateTime = Game.TotalElapsedGameTime;
                Update(elapsed);
            }
        }
        protected virtual void Update(float elapsed) { }

        public virtual void OnProjectileHit() { }
        public virtual void OnProjectileHit(ProjectileHitArgs args) { }
        public virtual void OnRemove() { }

        public bool SameTeam(IPlayer player)
        {
            if (player == null) return false;
            return Team == player.GetTeam() && Team != PlayerTeam.Independent
                || InitialOwnerPlayerID == player.UniqueID;
        }
    }
    class ProjectileFactory
    {
        public static ProjectileBase Create(IProjectile projectile, RangedWeaponPowerup powerup)
        {
            switch (powerup)
            {
                case RangedWeaponPowerup.Blackhole:
                    return new BlackholeProjectile(projectile);
                case RangedWeaponPowerup.Blast:
                    return new BlastBullet(projectile);
                case RangedWeaponPowerup.Bow:
                    return new Bow(projectile);
                case RangedWeaponPowerup.Dormant:
                    return new DormantProjectile(projectile);
                case RangedWeaponPowerup.DoublePenetration:
                    return new DoublePenetrationProjectile(projectile);
                case RangedWeaponPowerup.DoubleTrouble:
                    return new DoubleTroubleProjectile(projectile);
                case RangedWeaponPowerup.Fatigue:
                    return new FatigueProjectile(projectile);
                case RangedWeaponPowerup.Fire:
                    return new FireProjectile(projectile);
                case RangedWeaponPowerup.Grapeshot:
                    return new GrapeshotProjectile(projectile);
                case RangedWeaponPowerup.Helium:
                    return new HeliumProjectile(projectile);
                case RangedWeaponPowerup.Hunting:
                    return new HuntingProjectile(projectile);
                case RangedWeaponPowerup.Homing:
                    return new HomingProjectile(projectile);
                case RangedWeaponPowerup.InfiniteBouncing:
                    return new InfiniteBouncingProjectile(projectile);
                case RangedWeaponPowerup.Lightning:
                    return new LightningProjectile(projectile);
                case RangedWeaponPowerup.Molotov:
                    return new MolotovProjectile(projectile);
                case RangedWeaponPowerup.Penetration:
                    return new PenetrationProjectile(projectile);
                case RangedWeaponPowerup.Poison:
                    return new PoisonProjectile(projectile);
                case RangedWeaponPowerup.Present:
                    return new PresentBullet(projectile);
                case RangedWeaponPowerup.Riding:
                    return new RidingProjectile(projectile);
                case RangedWeaponPowerup.Shrinking:
                    return new ShrinkingProjectile(projectile);
                case RangedWeaponPowerup.Smoke:
                    return new SmokeProjectile(projectile);
                case RangedWeaponPowerup.Spinner:
                    return new SpinnerBullet(projectile);
                case RangedWeaponPowerup.Steak:
                    return new SteakProjectile(projectile);
                case RangedWeaponPowerup.StickyBomb:
                    return new StickyBombProjectile(projectile);
                case RangedWeaponPowerup.Stun:
                    return new StunBullet(projectile);
                case RangedWeaponPowerup.SuicideDove:
                    return new SuicideDoveProjectile(projectile);
                case RangedWeaponPowerup.SuicideFighter:
                    return new SuicideFighterProjectile(projectile);
                case RangedWeaponPowerup.Tearing:
                    return new TearingProjectile(projectile);
                case RangedWeaponPowerup.Termite:
                    return new TermiteProjectile(projectile);
                case RangedWeaponPowerup.Welding:
                    return new WeldingBullet(projectile);
                default:
                    return null;
            }
        }
    }
    public enum RangedWeaponPowerup
    {
        None,
        Blackhole,
        Blast,
        Bow,
        Delay,
        Dormant,
        DoublePenetration,
        DoubleTrouble,
        Fatigue,
        Fire,
        Helium,
        Hunting,
        Homing,
        Gauss,
        Grapeshot,
        Gravity,
        GravityDE,
        InfiniteBouncing,
        Minigun,
        Molotov,
        Lightning,
        Object,
        Penetration,
        Poison,
        Present,
        Riding,
        Shotgun,
        Shrinking,
        Smoke,
        Stun,
        Spinner,
        Steak,
        StickyBomb,
        SuicideDove,
        SuicideFighter,
        Taser,
        Tearing,
        Termite,
        Welding,
    }
    class MuzzleInfo
    {
        public Vector2 Position;
        public Vector2 Direction;
        public bool IsSussess = false;
    }

    class RangeWpn : Wpn
    {
        public RangedWeaponPowerup Powerup { get; protected set; }

        virtual public float MaxRange { get { return float.MaxValue; } }
        public bool DisableRangeCheck { get; protected set; }

        public RangeWpn(IPlayer owner) : this(owner, WeaponItem.NONE, RangedWeaponPowerup.None) { }
        public RangeWpn(IPlayer owner, WeaponItem name, RangedWeaponPowerup powerup)
            : base(owner, name)
        {
            DisableRangeCheck = false;
            Powerup = powerup;
            _isElapsedCheckRange = ScriptHelper.WithIsElapsed(95);
            if (!IsValidPowerup()) throw new Exception("Weapon " + name + " cannot have powerup " + powerup);
        }

        public void Add(WeaponItem name, RangedWeaponPowerup powerup)
        {
            Name = name;
            Type = Mapper.GetWeaponItemType(name);
            Powerup = powerup;
        }

        public override void Remove()
        {
            base.Remove();
            Powerup = RangedWeaponPowerup.None;
        }

        public bool IsEquipping { get { return Owner.CurrentWeaponDrawn == Mapper.GetWeaponItemType(Name); } }

        private bool _oldManualAiming = false;
        private Func<bool> _isElapsedCheckRange;
        public override void Update(float elapsed)
        {
            if (!_oldManualAiming && Owner.IsManualAiming)
                OnStartManualAim();
            if (_oldManualAiming && !Owner.IsManualAiming)
                OnStopManualAim();
            _oldManualAiming = Owner.IsManualAiming;

            // don't shoot if the enemy is too far away because some guns have limited range
            if (IsEquipping && !DisableRangeCheck && Powerup != RangedWeaponPowerup.None && _isElapsedCheckRange())
            {
                foreach (var player in Game.GetPlayers())
                {
                    if (!ScriptHelper.SameTeam(player, Owner))
                    {
                        var inRange = ScriptHelper.IntersectCircle(player.GetAABB(), Owner.GetWorldPosition(), MaxRange);
                        BotManager.GetBot(Owner).UseRangeWeapon(inRange);
                    }
                }
            }
        }

        protected virtual void OnStartManualAim() { }
        protected virtual void OnStopManualAim() { }

        public virtual void OnProjectileCreated(IProjectile projectile) { }
        public virtual void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args) { }

        public MuzzleInfo GetMuzleInfo()
        {
            Vector2 position, direction;
            var result = Owner.GetWeaponMuzzleInfo(out position, out direction);

            return new MuzzleInfo
            {
                Position = position,
                Direction = direction,
                IsSussess = result,
            };
        }
    }
    // Placeholder for now
    class ThrowWpn
    {
        public WeaponItem Name { get; set; }
        public RangedWeaponPowerup Powerup { get; set; }

        public ThrowWpn()
        {
            Name = WeaponItem.NONE;
            Powerup = RangedWeaponPowerup.None;
        }
    }
    class Wpn
    {
        public WeaponItem Name { get; protected set; }
        public WeaponItemType Type { get; protected set; }
        public IPlayer Owner { get; protected set; }

        virtual public bool IsValidPowerup() { return true; }
        public virtual void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos) { }
        public virtual void Update(float elapsed) { }

        public Wpn(IPlayer owner, WeaponItem name = WeaponItem.NONE)
        {
            Name = name;
            Type = Mapper.GetWeaponItemType(name);
            Owner = owner;
        }

        public virtual void Remove()
        {
            Name = WeaponItem.NONE;
            Type = WeaponItemType.NONE;
        }
    }
    public enum BeWeapon
    {
        Camp,
        Chicken,
        FireTrap,
        LaserSweeper,
        ShotgunTrap,
        Tripwire,
        Turret,
    }
    public class Camp : Weapon
    {
        public GangsterBot Bot { get; private set; }
        public List<Bot> Members { get; set; }
        public List<Bot> AttackMembers { get; set; }
        public IPlayer Target { get; private set; }
        public Area Area { get; private set; }
        public override IEnumerable<IObject> Components { get; set; }

        public static readonly int MaxMembers = 10;
        public static readonly int MembersToStartAttacking = 7;

        public Camp(GangsterBot bot) : base(bot.Player)
        {
            Bot = bot;
            Members = new List<Bot>();
            AttackMembers = new List<Bot>();

            var body = Game.CreateObject("BgCarnivalTent01D", new Vector2(Bot.Position.X, Bot.Position.Y + 12));
            var roof = Game.CreateObject("BgCarnivalTent01B", new Vector2(Bot.Position.X, Bot.Position.Y + 36));

            body.SetColor1(Turret.GetColor(Bot.Player.GetTeam()));
            body.CustomID = "GangTentBody";
            roof.SetColor1(Turret.GetColor(Bot.Player.GetTeam()));
            roof.CustomID = "GangTentRoof";

            Area = ScriptHelper.GrowFromCenter(body.GetAABB().Center, 100, 40);
            Components = new List<IObject>() { body, roof };
            Instance = body;
            _isElapsedHeal = ScriptHelper.WithIsElapsed(555);
            _isElapsedCheckMember = ScriptHelper.WithIsElapsed(3019);
        }

        private float _spawnGangsterTime = 0;
        private Func<bool> _isElapsedHeal;
        private Func<bool> _isElapsedCheckMember;
        public override void Update(float elapsed)
        {
            //Game.DrawText(Members.Count.ToString(), Position);
            //Game.DrawArea(Area, Color.Green);
            //Members.ForEach(m => Game.DrawText(m.Player.UniqueId.ToString(), m.Position, Color.Green));
            //AttackMembers.ForEach(m => Game.DrawText(m.Player.UniqueId.ToString(), m.Position, Color.Red));

            if (ScriptHelper.IsElapsed(_spawnGangsterTime, 12000))
            {
                if (Members.Count < MaxMembers)
                {
                    var rndNum = RandomHelper.Between(0, 100);
                    var botType = RandomHelper.Boolean() ? BotType.Gangster : BotType.GangsterHulk;
                    
                    if (rndNum < 1)
                        botType = BotType.Kingpin;
                    if (1 <= rndNum && rndNum < 2)
                        botType = BotType.Bobby;
                    if (2 <= rndNum && rndNum < 3)
                        botType = BotType.Jo;
                    var bot = BotManager.SpawnBot(botType, BotFaction.Gangster, team: Team, ignoreFullSpawner: true);

                    bot.Player.SetWorldPosition(Position);
                    AddMember(bot);
                }

                if (Members.Count >= MembersToStartAttacking && AttackMembers.Count <= 2)
                {
                    var attackCount = RandomHelper.BetweenInt(1, Members.Count - 3);
                    
                    AttackMembers = Members.Where(x => x.Player.GetHealth() > 50).Take(attackCount).ToList();
                    AttackMembers.ForEach(x => x.Player.SetGuardTarget(null));
                }

                _spawnGangsterTime = Game.TotalElapsedGameTime;
            }

            if (_isElapsedHeal())
            {
                foreach (var member in Members)
                {
                    if (member.Player.GetAABB().Intersects(Area))
                        member.Player.SetHealth(member.Player.GetHealth() + 1);
                }
            }

            if (_isElapsedCheckMember())
            {
                foreach (var gangster in BotManager.GetBots())
                {
                    if (!gangster.Player.IsDead
                        && gangster.Faction == BotFaction.Gangster
                        && gangster.Player.GetTeam() == Team
                        && !Members.Any(x => x.Player.UniqueID == gangster.Player.UniqueID))
                        AddMember(gangster);
                }
                // retreat if injured
                foreach (var member in AttackMembers.ToList())
                {
                    if (member.Player.GetHealth() < 30)
                    {
                        member.Player.SetGuardTarget(Instance);
                        AttackMembers.Remove(member);
                    }
                }
                foreach (var member in Members.ToList())
                {
                    if (member.Player.IsDead) RemoveMember(member);
                }
            }
        }

        public void AddMember(Bot member)
        {
            Members.Add(member);
            member.Player.SetGuardTarget(Instance);
        }

        public void RemoveMember(Bot member)
        {
            Members.Remove(member);
            AttackMembers.Remove(member);
        }
    }
    public class Chicken : Weapon
    {
        public FarmerBot FarmerBot { get; private set; }
        public IPlayer Target { get; private set; }
        public Vector2 TargetPosition { get { return Target == null ? Owner.GetWorldPosition() : Target.GetWorldPosition(); } }

        private static readonly float MaxDistanceFromOwner = 35f;
        public override IEnumerable<IObject> Components { get; set; }

        public Chicken(FarmerBot bot) : base(bot.Player)
        {
            FarmerBot = bot;
            Instance = Game.CreateObject("Chicken00", Owner.GetWorldPosition());
            Instance.CustomID = "Chicken";
            Instance.SetTargetAIData(new ObjectAITargetData
            {
                Team = Owner.GetTeam(),
                Range = 100,
                PriorityModifier = 5f,
            });
            Components = new List<IObject>() { Instance };
        }

        public override void Update(float elapsed)
        {
            Instance.SetAngularVelocity(0);
            Instance.SetAngle(0);

            FindClosestTarget();
            WanderAroundTarget();
            UpdateMovement();
            UpdateAttack();
        }

        private float _attackTime = 0;
        private void UpdateAttack()
        {
            if (Target == null) return;

            if (ScriptHelper.IsElapsed(_attackTime, 600))
            {
                foreach (var player in Game.GetPlayers())
                {
                    if (player.IsDead || ScriptHelper.SameTeam(player, Owner)) continue;
                    if (Instance.GetAABB().Intersects(player.GetAABB()))
                    {
                        player.DealDamage(2);
                        Game.PlayEffect(EffectName.Blood, player.GetWorldPosition());
                        if (RandomHelper.Percentage(.25f)) ScriptHelper.Fall(player);
                    }
                    _attackTime = Game.TotalElapsedGameTime;
                }
            }
        }

        private float _findTime = 0;
        private void FindClosestTarget()
        {
            if (ScriptHelper.IsElapsed(_findTime, 2600) && (Target == null || Vector2.Distance(Target.GetWorldPosition(), Position) >= 35))
            {
                var searchArea = ScriptHelper.GrowFromCenter(Position, 100, 5);
                var minDistance = float.MaxValue;
                foreach (var player in Game.GetObjectsByArea<IPlayer>(searchArea))
                {
                    if (player.IsDead || ScriptHelper.SameTeam(player, Team)) continue;

                    if (Owner.IsDead)
                        Game.WriteToConsole(Owner.GetTeam());
                    var distance = Vector2.Distance(Position, player.GetWorldPosition());
                    if (distance < minDistance)
                    {
                        Target = player; minDistance = distance;
                    }
                }
                _findTime = Game.TotalElapsedGameTime;
            }
        }

        public bool IsOnGround { get { return Math.Abs(Instance.GetLinearVelocity().Y) <= 0.1; } }

        private float _lastJumpTime = 0f;
        private float _jumpTime = 300f;
        private void UpdateMovement()
        {
            if (ScriptHelper.IsElapsed(_lastJumpTime, _jumpTime) && IsOnGround)
            {
                var diffY = MathHelper.Clamp(TargetPosition.Y - Position.Y, 0, 25);
                Instance.SetLinearVelocity(Vector2.UnitY * (3 + diffY * .17f));
                _jumpTime = RandomHelper.Between(300, 600);
                _lastJumpTime = Game.TotalElapsedGameTime;
            }
        }

        private float _destination = 0f;
        private float _lastMoveTime = 0f;
        private float _moveTime = 650;
        private Vector2 Destination
        {
            get
            {
                return new Vector2 { X = TargetPosition.X + _destination, Y = TargetPosition.Y };
            }
        }

        private void WanderAroundTarget()
        {
            if (!IsOnGround) return;
            if (ScriptHelper.IsElapsed(_lastMoveTime, _moveTime))
            {
                var distance = Destination.X - Position.X;
                var direction = Math.Sign(distance);
                var diffY = MathHelper.Clamp(TargetPosition.Y - Position.Y, 0, 25);

                Instance.SetLinearVelocity(new Vector2(direction * 5f, diffY * 0.2f));
                Instance.SetFaceDirection(direction);
                _lastMoveTime = Game.TotalElapsedGameTime;
                _moveTime = MathHelper.Clamp(RandomHelper.Between(350, 800) - Math.Abs(distance * 4), 20, 800);
            }

            if (Instance.GetAABB().Contains(Destination))
                _destination = RandomHelper.Between(-MaxDistanceFromOwner, MaxDistanceFromOwner);
        }

        public override void OnComponentTerminated(IObject component)
        {
            base.OnComponentTerminated(component);
            if (!FarmerBot.IsRemoved && !FarmerBot.Player.IsDead) FarmerBot.BreedChicken();
            IsDestroyed = true;
        }
    }
    /// <summary>
    /// A wrapper around IObject just like Bot is a wrapper around IPlayer
    /// </summary>
    class Component
    {
        public bool RemoveWhenDestroyed { get; set; }
        public IObject Object { get; private set; }

        public string CustomID
        {
            get { return Object.CustomID; }
            set { Object.CustomID = value; }
        }

        private float m_maxHealth = 0;
        public float MaxHealth
        {
            get { return m_maxHealth == 0 ? Object.GetMaxHealth() : m_maxHealth; }
            set
            {
                m_maxHealth = value;
                Health = value;
                Object.SetHealth(value);
            }
        }

        private float m_health;
        public float Health
        {
            get { return m_health; }
            set { m_health = MathHelper.Clamp(value, 0, MaxHealth); }
        }

        public Component(string objectID, Vector2 worldPosition)
        {
            Object = Game.CreateObject(objectID, worldPosition);
            RemoveWhenDestroyed = true;
        }

        public void OnDamage(ObjectDamageArgs args)
        {
            Health -= args.Damage; // IObject.GetHealth() is already recalculated when this event is fired

            if (Object.GetHealth() == 0 && Health > 0)
            {
                Object.SetHealth(Math.Min(Object.GetMaxHealth(), Health));
            }

            if (Health == 0)
            {
                if (RemoveWhenDestroyed)
                    Object.Remove();
                else
                    Object.SetHealth(Object.GetMaxHealth());
            }
        }
    }
    public class FireTrap : Trap
    {
        public static readonly uint TrapTime = 5000;
        private Func<bool> _isElapsedSpawnFire;
        public FireTrap(IPlayer owner) : base(owner, "FireTrap00", new Vector2(0, -3))
        {
            _isElapsedSpawnFire = ScriptHelper.WithIsElapsed(1000);
        }

        protected override bool OnTrigger(IPlayer player)
        {
            base.OnTrigger(player);

            var result = ScriptHelper.CreateRope(Position, player, 30, LineVisual.DJRope);
            var distanceJoint = result.DistanceJoint;
            var distanceJointObject = result.DistanceJointObject;
            var targetJoint = result.TargetObjectJoint;

            ScriptHelper.Timeout(() =>
            {
                if (!player.IsDead)
                {
                    distanceJoint.Remove();
                    targetJoint.Remove();
                    distanceJointObject.Remove();
                }
                Instance.Remove();
                IsDestroyed = true;
            }, TrapTime);

            return true;
        }

        protected override void OnUpdateAfterTrigger()
        {
            base.OnUpdateAfterTrigger();

            if (_isElapsedSpawnFire())
            {
                Game.PlaySound("Flamethrower", Position);
                Game.SpawnFireNodes(Position, 10, 5f, FireNodeType.Flamethrower);
            }
        }
    }
    public class LaserSweeper : Weapon
    {
        enum State { Normal, CheckingFire, Firing }
        private State _state = State.Normal;

        public MetroCopBot Bot { get; private set; }
        public Vector2 StationaryPosition { get; private set; }
        private float _rotatedAngle { get; set; }
        private int _facingDirection { get; set; }
        public StreetsweeperWeaponType Weapon { get; private set; }
        public IObjectStreetsweeper Sweeper { get; private set; }
        public override IEnumerable<IObject> Components { get; set; }
        public static readonly float SweepAngle = 65;

        public LaserSweeper(MetroCopBot bot) : base(bot.Player)
        {
            Bot = bot;

            Sweeper = (IObjectStreetsweeper)Game.CreateObject("Streetsweeper", bot.Position + Vector2.UnitY * 3);
            Sweeper.SetOwnerPlayer(bot.Player);
            Sweeper.CustomID = "LaserSweeper";
            Weapon = Sweeper.GetWeaponType();
            Components = new List<IObject>() { Sweeper };
            Instance = Sweeper;
         
            _fireLaserTime = Game.TotalElapsedGameTime;
            _isElapsedCheckFireLaser = ScriptHelper.WithIsElapsed(1500);
            _isElapsedUpdateFiring = ScriptHelper.WithIsElapsed(16);
        }

        private float _fireLaserTime;
        private Func<bool> _isElapsedCheckFireLaser;
        private Func<bool> _isElapsedUpdateFiring;
        public override void Update(float elapsed)
        {
            switch (_state)
            {
                case State.Normal:
                    if (ScriptHelper.IsElapsed(_fireLaserTime, 4100))
                        _state = State.CheckingFire;
                    break;
                case State.CheckingFire:
                    if (_isElapsedCheckFireLaser() && CanFire())
                        FireLaser();
                    break;
                case State.Firing:
                    if (_isElapsedUpdateFiring())
                        UpdateFiring();
                    break;
            }
        }

        private Vector2 EyePosition { get { return new Vector2(Position.X + Sweeper.GetFaceDirection(), Position.Y); } }
        private Area ScanArea { get { return ScriptHelper.Area(EyePosition, EyePosition + new Vector2(180 * Sweeper.GetFaceDirection(), -120)); } }

        private bool CanFire()
        {
            if (Sweeper.GetLinearVelocity().Length() > 5) return false;

            var enemiesInRange = Game.GetObjectsByArea<IPlayer>(ScanArea).Any(x => !x.IsDead && !ScriptHelper.SameTeam(x, Owner));
            if (!enemiesInRange) return false;

            var endPositions = new Vector2[]
            {
                EyePosition + new Vector2(Sweeper.GetFaceDirection() * ScanArea.Width, 0),
                EyePosition + new Vector2(0, -ScanArea.Height / 3),
            };
            foreach (var end in endPositions)
            {
                var results = Game.RayCast(EyePosition, end, new RayCastInput()
                {
                    FilterOnMaskBits = true,
                    MaskBits = CategoryBits.StaticGround,
                    AbsorbProjectile = RayCastFilterMode.True,
                    ClosestHitOnly = true,
                    IncludeOverlap = true,
                }).Where(r => r.HitObject != null);
                if (results.Any()) return false;
            }

            return true;
        }

        private void FireLaser()
        {
            _state = State.Firing;
            _facingDirection = Sweeper.GetFaceDirection();
            Sweeper.SetWeaponType(StreetsweeperWeaponType.None);
            StationaryPosition = EyePosition;

            var startAngle = MathExtension.ToRadians(Sweeper.GetFaceDirection() == 1 ? -SweepAngle : -180 + SweepAngle);
            _laser = new RopeObject("Laser00", EyePosition + ScriptHelper.GetDirection(startAngle) * 6 + Vector2.UnitY * 3);
            _laser.SetAngle(startAngle);
            _laserSplash = Game.CreateObject("LaserSplash00");
        }

        private RopeObject _laser;
        private IObject _laserSplash;
        private void UpdateFiring()
        {
            Sweeper.SetWorldPosition(StationaryPosition);
            Sweeper.SetFaceDirection(_facingDirection);

            var angle = _laser.GetAngle();
            var nextAngle = angle + MathExtension.OneDeg / 2 * Sweeper.GetFaceDirection();
            _rotatedAngle += Math.Abs(nextAngle - angle);
            if (_rotatedAngle >= MathExtension.ToRadians(SweepAngle))
            {
                StopFiring();
                return;
            }
            var start = _laser.StartPosition;
            var nextDir = ScriptHelper.GetDirection(nextAngle);
            var end = start + nextDir * ScriptHelper.GetDistanceToEdge(start, nextDir);
            var results = Game.RayCast(start, end, new RayCastInput()
            {
                FilterOnMaskBits = true,
                MaskBits = CategoryBits.StaticGround + CategoryBits.Player + CategoryBits.Dynamic,
            }).Where(r => r.HitObject != null);

            var groundResult = results.FirstOrDefault(x =>
            {
                var cf = x.HitObject.GetCollisionFilter();
                return cf.CategoryBits == CategoryBits.StaticGround && cf.AbsorbProjectile;
            });
            // laser shoot to the void
            if (groundResult.HitObject == null)
            {
                _laser.SetEndPosition(nextAngle, 1500);
                return;
            }
            var distance = Vector2.Distance(_laser.StartPosition, groundResult.Position);
            _laser.SetEndPosition(nextAngle, distance);

            var splashAngle = ScriptHelper.GetAngle(groundResult.Normal);
            _laserSplash.SetWorldPosition(groundResult.Position + groundResult.Normal * RopeObject.TILE_SIZE);
            _laserSplash.SetAngle(ScriptHelper.GetAngle(groundResult.Normal) - MathExtension.PIOver2);

            foreach (var result in results)
            {
                result.HitObject.DealDamage(1);
                if (RandomHelper.Percentage(.1f)) result.HitObject.SetMaxFire();
            }
        }

        private void StopFiring()
        {
            _rotatedAngle = 0f;
            _state = State.Normal;
            Sweeper.SetWeaponType(Weapon);
            _fireLaserTime = Game.TotalElapsedGameTime;
            _laser.Remove();
            _laserSplash.Remove();
        }

        public override void OnComponentTerminated(IObject component)
        {
            base.OnComponentTerminated(component);
            if (_state == State.Firing) StopFiring();
            MetroCopBot.Sweepers.Remove(this);
            IsDestroyed = true;
        }
    }
    public class ShotgunTrap : Trap
    {
        public static readonly uint TrapTime = 5000;
        public ShotgunTrap(IPlayer owner) : base(owner, "ShotgunTrap00", Vector2.Zero) { }

        protected override bool ShouldTrigger(IPlayer player)
        {
            var pPos = player.GetWorldPosition();
            var distance = Vector2.Distance(pPos, Position);
            var angle = ScriptHelper.GetAngle(player.GetWorldPosition() - Position);
            return player.IsInMidAir && distance > 15 && distance <= 40 && angle >= MathExtension.PIOver4 && angle <= MathExtension.PI - MathExtension.PIOver4;
        }

        private int _tripCount = 0;
        protected override bool OnTrigger(IPlayer player)
        {
            _tripCount++;

            base.OnTrigger(player);
            var angle = ScriptHelper.GetAngle(player.GetWorldPosition() - Position);

            for (var i = 0; i < 6; i++)
            {
                var finalDirection = RandomHelper.Direction(angle - 0.09f, angle + 0.09f, true);
                var proj = Game.SpawnProjectile(ProjectileItem.DARK_SHOTGUN, Position, finalDirection);
                proj.Velocity /= 2;
            }
            Game.PlaySound(ScriptHelper.GetSoundID(Mapper.GetWeaponItem(ProjectileItem.DARK_SHOTGUN)), Position);

            if (_tripCount >= 4)
            {
                Instance.Remove();
                IsDestroyed = true;
            }

            return false;
        }
    }
    public class Trap : Weapon
    {
        private Dictionary<int, float> _trappedTimes = new Dictionary<int, float>();
        public override IEnumerable<IObject> Components { get; set; }
        public bool IsTriggered { get; private set; }
        private bool _ownerLeft = false;
        public Trap(IPlayer owner, string name, Vector2 offset) : base(owner)
        {
            var pos = Owner.GetWorldPosition();
            Instance = Game.CreateObject(name, pos + offset);
            Instance.CustomID = name;
            Components = new List<IObject>() { Instance };
            IsTriggered = false;
            FriendlyTrigger = 0.15f;
            Cooldown = 2000;
        }

        public override void Update(float elapsed)
        {
            if (IsTriggered) OnUpdateAfterTrigger();
            else
            {
                if (!_ownerLeft && !Owner.GetAABB().Intersects(Instance.GetAABB()) || Owner.IsDead)
                    _ownerLeft = true;

                foreach (var p in Game.GetPlayers())
                {
                    if (p.IsDead || p.GetLinearVelocity() == Vector2.Zero) continue;
                    if (p.UniqueID == Owner.UniqueID && !_ownerLeft) continue;

                    if (ShouldTrigger(p))
                    {
                        if (!ScriptHelper.SameTeam(p, Owner) || RandomHelper.Percentage(Game.IsEditorTest ? 1 : FriendlyTrigger))
                        {
                            var trappedTime = -1f;
                            if (_trappedTimes.TryGetValue(p.UniqueID, out trappedTime))
                            {
                                if (ScriptHelper.IsElapsed(trappedTime, Cooldown))
                                {
                                    IsTriggered = OnTrigger(p);
                                    _trappedTimes[p.UniqueID] = Game.TotalElapsedGameTime;
                                }
                            }
                            else
                            {
                                IsTriggered = OnTrigger(p);
                                _trappedTimes.Add(p.UniqueID, Game.TotalElapsedGameTime);
                            }
                        }
                    }
                }
            }
        }

        public float FriendlyTrigger { get; protected set; }
        public float Cooldown { get; protected set; }
        protected virtual void OnUpdateAfterTrigger() { }
        protected virtual bool ShouldTrigger(IPlayer player) { return Instance.GetAABB().Intersects(player.GetAABB()); }
        protected virtual bool OnTrigger(IPlayer player) { return true; }
    }
    public class TripWire : Trap
    {
        public TripWire(IPlayer owner) : base(owner, "Tripwire00", Vector2.Zero)
        {
            Instance.SetBodyType(BodyType.Static);
        }

        private bool _hasGrenade = true;
        private int _tripCount = 0;
        protected override bool OnTrigger(IPlayer player)
        {
            _tripCount++;

            ScriptHelper.Fall(player);
            var vec = player.GetLinearVelocity();
            // move up a bit to remove the friction of the ground and make the enemy 'fly away'
            player.SetLinearVelocity(new Vector2(vec.X, vec.Y + 3));

            if (_hasGrenade)
            {
                var grenade = (IObjectGrenadeThrown)Game.CreateObject("WpnGrenadesThrown", player.GetWorldPosition());
                grenade.SetExplosionTimer(900);
                _hasGrenade = false;
            }

            if (_tripCount >= 3)
            {
                Instance.Remove();
                IsDestroyed = true;
            }

            return false;
        }
    }
    enum TurretDirection
    {
        Left,
        Right,
    }

    enum TurretDamage
    {
        None = 0,
        SensorDamaged = 1, // Shoot everyone
        ControllerDamaged = 2, // Rotate randomly (if rotor is not damaged)
        RotorDamaged = 4, // Cant rotate
        BarrelDamaged = 8, // Cant shoot
    }


    //var area = new Area(-140, 280f, -170, 330f);
    //Events.UpdateCallback.Start((e) => Game.DrawArea(area));
    //var turrentComps = Game.GetObjectsByArea(area);
    //var rotationPointPos = turrentComps.Where(c => c.CustomID == "TurretRotationPoint").Single().GetWorldPosition();
    //foreach (var comp in turrentComps)
    //{
    //    if (comp.CustomID == "") continue;
    //    var pos = comp.GetWorldPosition();
    //    var xDecimal = pos.X - Math.Truncate(pos.X);
    //    var x = xDecimal >= .9 || xDecimal <= .1 ? Math.Round(pos.X) : pos.X;
    //    var yDecimal = pos.Y - Math.Truncate(pos.Y);
    //    var y = yDecimal >= .9 || yDecimal <= .1 ? Math.Round(pos.Y) : pos.Y;

    //    Game.WriteToConsole(string.Format("x:{0:0.0} y:{1:0.0} {2:0.0}",
    //        x - rotationPointPos.X, y - rotationPointPos.Y, comp.CustomID));
    //}

    struct TurretArg
    {
        public Vector2 Position;
        public TurretDirection Direction;
        public IPlayer Owner;
    }

    // TODO: use custom texture to simplify code logic
    class Turret : Weapon
    {
        // TODO: add recoil
        public int UniqueID { get { return m_tip.UniqueID; } }

        // TODO: change to IList<> and get rid of abstract in base class to simplify things
        private Dictionary<string, IObject> m_components = new Dictionary<string, IObject>();
        public override IEnumerable<IObject> Components
        {
            get { return m_components.Values; }
            set { }
        }
        public IPlayer Target { get; private set; }

        public override bool IsDestroyed { get; protected set; }

        private List<Component> m_damageableComponents = new List<Component>();

        private IObject m_tip;
        private Component m_rotor;
        private Component m_controller;
        private Component m_barrel;
        private Component m_sensor;
        private TurretDamage m_damage = TurretDamage.None;
        public bool Broken { get { return m_damage != TurretDamage.None; } }

        public override Vector2 Position { get { return RotationCenter; } }

        private Vector2 RotationCenter { get; set; }
        private IObjectWeldJoint m_bodyJoint;
        private IObjectAlterCollisionTile m_alterCollisionTile;
        private IObject m_ground;

        public static readonly int TotalAmmo = Game.IsEditorTest ? 1000 : 300; // TODO: Remove
        private int m_currentAmmo = TotalAmmo;
        public int CurrentAmmo { get { return m_currentAmmo == -1 ? 0 : m_currentAmmo; } }

        public int Direction { get; private set; }
        public Vector2 AimVector { get { return ScriptHelper.GetDirection(Angle); } }

        private static readonly float _Deg30 = -0.523599f; // -30deg
        public float MinAngle
        {
            get
            {
                return Direction > 0 ?
                    _Deg30
                    :
                    MathHelper.PI - MathHelper.PIOver4;
            }
        }
        public float MaxAngle
        {
            get
            {
                return Direction > 0 ?
                    MathHelper.PIOver4
                    :
                    MathHelper.PI - _Deg30;
            }
        }

        private float[] NormalizeMinMaxAngle(float min, float max)
        {
            // make sure it's in -45deg -> 45deg range instead of 320deg -> 45deg
            if (Math.Abs(max - min) > MathHelper.PI)
            {
                min = (float)MathExtension.NormalizeAngle(min);
                max = (float)MathExtension.NormalizeAngle(max);

                if (Math.Abs(max - min) > MathHelper.PI)
                    return new float[] { max - MathHelper.TwoPI, min };
            }
            return new float[] { min, max };
        }
        private float NormalizeAngle(float angle)
        {
            angle = (float)MathExtension.NormalizeAngle(angle);

            if (angle <= MathHelper.TwoPI && angle >= MathExtension.PI_3Over2)
                angle -= MathHelper.TwoPI;

            return angle;
        }
        public float Angle
        {
            get
            {
                if (Direction > 0)
                    return m_rotor.Object.GetAngle();
                return m_rotor.Object.GetAngle() + MathHelper.PI;
            }
            private set
            {
                var minCompAngle = Direction > 0 ? MinAngle : MinAngle - MathHelper.PI;
                var maxCompAngle = Direction > 0 ? MaxAngle : MaxAngle - MathHelper.PI;
                var minMax = NormalizeMinMaxAngle(minCompAngle, maxCompAngle);
                var angle = NormalizeAngle(Direction > 0 ? value : value - MathHelper.PI);

                //ScriptHelper.LogDebug(
                //    minMax[0] * 180 / Math.PI,
                //    minMax[1] * 180 / Math.PI,
                //    angle * 180 / Math.PI,
                //    m_targetAngle * 180 / Math.PI,
                //    CurrentTarget != null ? CurrentTarget.Name : "None"
                //    );

                angle = MathHelper.Clamp(angle, minMax[0], minMax[1]);
                m_rotor.Object.SetAngle(angle, updateConnectedObjects: true);
                // muzzle effect's angle is m_tip's Angle. I blame Gurt for this
                m_tip.SetAngle(Direction > 0 ? angle : angle - MathHelper.PI);
                // background object's angle must be set manually
                m_components["TurretTeamIndicator"].SetAngle(angle + -Direction * MathHelper.PIOver2);
            }
        }

        private Vector2 FirePosition
        {
            get { return RotationCenter + AimVector * 22; }
        }

        private TurretState m_state = TurretState.Idle;

        enum TurretState
        {
            Idle,
            Firing,
        }

        public static string GetColor(PlayerTeam team)
        {
            switch (team)
            {
                case PlayerTeam.Team1:
                    return "BgBlue";
                case PlayerTeam.Team2:
                    return "BgRed";
                case PlayerTeam.Team3:
                    return "BgGreen";
                case PlayerTeam.Team4:
                    return "BgYellow";
                default:
                    return "BgLightGray";
            }
        }

        public Turret(TurretArg arg) : base(arg.Owner)
        {
            Direction = (arg.Direction == TurretDirection.Left) ? -1 : 1;
            Owner = arg.Owner;
            IsDestroyed = false;

            var ux = Vector2.UnitX * -Direction;
            var uy = Vector2.UnitY;

            // worldPosition works best when get from TurretPlaceholder.Position
            RotationCenter = arg.Position;
            var legLeft1Position = RotationCenter - ux * 4 + uy * 1;
            var legLeft2Position = RotationCenter - ux * 7 - uy * 5;
            var legRight1Position = RotationCenter + ux * 0 - uy * 5;
            var legRight2Position = RotationCenter + ux * 4 - uy * 13;
            var legMiddle1Position = RotationCenter - ux * 2.8f - uy * 3;
            var legMiddle2Position = RotationCenter - ux * 2.8f - uy * 6;
            var ammoPosition = RotationCenter + ux * 2 - uy * 2;
            var comp1Position = RotationCenter - ux * 5 + uy * 2;
            var controllerPosition = RotationCenter + ux * 0 + uy * 1;
            var sensorPosition = RotationCenter + ux * 5 + uy * 2;
            var rotorPosition = RotationCenter + ux * 0 - uy * 1;
            var barrelSolid1Position = RotationCenter - ux * 8 - uy * 2;
            var barrelSolid2Position = RotationCenter - ux * 16 - uy * 2;
            var barrelPosition = RotationCenter - ux * 6 + uy * 2;
            var tipPosition = RotationCenter - ux * 24 + uy * 0;
            var teamIndicatorPosition = RotationCenter - ux * 11f - uy * 1;

            // Object creation order is important. It will determine the z-layer the object will be located to
            var teamIndicator = Game.CreateObject("BgBottle00D", teamIndicatorPosition, -Direction * MathHelper.PIOver2);
            teamIndicator.SetColor1(GetColor(Owner.GetTeam()));

            var legMiddle1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle1Position, -Direction * 0.41f);
            var legMiddle2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle2Position, -Direction * 0.41f);
            var legLeft1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft1Position);
            var legLeft2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft2Position);
            var legRight1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight1Position, MathHelper.PI);
            var legRight2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight2Position, MathHelper.PI);
            var ammo = (IObjectActivateTrigger)Game.CreateObject("AmmoStash00", ammoPosition);

            var comp1 = Game.CreateObject("ItemDebrisDark00", comp1Position);
            m_controller = new Component("ItemDebrisShiny00", controllerPosition);
            m_sensor = new Component("ItemDebrisDark00", sensorPosition);
            m_rotor = new Component("MetalDebris00A", rotorPosition);

            var barrel1 = Game.CreateObject("MetalPlat01A", barrelSolid1Position);
            var barrel2 = Game.CreateObject("MetalPlat01B", barrelSolid2Position);
            m_barrel = new Component("JusticeStatue00Scales", barrelPosition);
            m_tip = Game.CreateObject("LedgeGrab", tipPosition);
            m_ground = GetGround(RotationCenter);

            legMiddle1.SetEnabled(false);
            legMiddle2.SetEnabled(false);
            legLeft1.SetEnabled(false);
            legLeft2.SetEnabled(false);
            legRight1.SetEnabled(false);
            legRight2.SetEnabled(false);
            ammo.SetEnabled(false);

            legLeft1.SetFaceDirection(-Direction);
            legLeft2.SetFaceDirection(-Direction);
            legRight1.SetFaceDirection(Direction);
            legRight2.SetFaceDirection(Direction);
            legMiddle1.SetFaceDirection(-Direction);
            legMiddle2.SetFaceDirection(-Direction);

            ammo.SetFaceDirection(-Direction);
            barrel1.SetFaceDirection(-Direction);
            barrel2.SetFaceDirection(-Direction);
            m_barrel.Object.SetFaceDirection(-Direction);
            m_tip.SetFaceDirection(-Direction);
            comp1.SetFaceDirection(-Direction);
            m_controller.Object.SetFaceDirection(-Direction);
            m_sensor.Object.SetFaceDirection(-Direction);
            m_rotor.Object.SetFaceDirection(-Direction);
            teamIndicator.SetFaceDirection(-Direction);

            m_bodyJoint = (IObjectWeldJoint)Game.CreateObject("WeldJoint");
            m_alterCollisionTile = (IObjectAlterCollisionTile)Game.CreateObject("AlterCollisionTile");

            legMiddle1.CustomID = "TurretLegMiddle1";
            legMiddle2.CustomID = "TurretLegMiddle2";
            legLeft1.CustomID = "TurretLegLeft1";
            legLeft2.CustomID = "TurretLegLeft2";
            legRight1.CustomID = "TurretLegRight1";
            legRight2.CustomID = "TurretLegRight2";
            ammo.CustomID = "TurretAmmo";
            barrel1.CustomID = "TurretBarrel1";
            barrel2.CustomID = "TurretBarrel2";
            m_barrel.CustomID = "TurretBarrel3";
            m_tip.CustomID = "TurretTip";
            teamIndicator.CustomID = "TurretTeamIndicator";
            comp1.CustomID = "TurretComp1";
            m_controller.CustomID = "TurretController";
            m_sensor.CustomID = "TurretSensor";
            m_rotor.CustomID = "TurretRotor";

            m_components.Add(legMiddle1.CustomID, legMiddle1); 
            m_components.Add(legMiddle2.CustomID, legMiddle2);
            m_components.Add(legLeft1.CustomID, legLeft1);
            m_components.Add(legLeft2.CustomID, legLeft2);
            m_components.Add(legRight1.CustomID, legRight1);
            m_components.Add(legRight2.CustomID, legRight2);
            m_components.Add(ammo.CustomID, ammo);
            m_components.Add(barrel1.CustomID, barrel1);
            m_components.Add(barrel2.CustomID, barrel2);
            m_components.Add(m_barrel.CustomID, m_barrel.Object);
            m_components.Add(m_tip.CustomID, m_tip);
            m_components.Add(teamIndicator.CustomID, teamIndicator);
            m_components.Add(comp1.CustomID, comp1);
            m_components.Add(m_controller.CustomID, m_controller.Object);
            m_components.Add(m_sensor.CustomID, m_sensor.Object);
            m_components.Add(m_rotor.CustomID, m_rotor.Object);

            // The reason I randomize health for each part is because bullets will likely shoot
            // through all the parts at once, so part with lowest hp will be destroyed first,
            // which is predictable, which is bad
            var healths = RandomHelper.Shuffle(new List<float>() { 50, 100, 125, 150 });
            m_barrel.MaxHealth = healths[0];
            m_rotor.MaxHealth = healths[1];
            m_sensor.MaxHealth = healths[2];
            m_controller.MaxHealth = healths[3];

            m_damageableComponents.Add(m_barrel);
            m_damageableComponents.Add(m_rotor);
            m_damageableComponents.Add(m_sensor);
            m_damageableComponents.Add(m_controller);

            foreach (var dc in m_damageableComponents)
                dc.RemoveWhenDestroyed = false;

            foreach (var component in m_components.Values)
                RegisterComponent(component);

            m_alterCollisionTile.SetDisableCollisionTargetObjects(true);
            RotateTo(Direction > 0 ? 0 : MathHelper.PI);
        }

        private void RegisterComponent(IObject obj)
        {
            if (!obj.CustomID.StartsWith("TurretLeg"))
            {
                m_bodyJoint.AddTargetObject(obj);
            }

            m_alterCollisionTile.AddTargetObject(obj);
        }

        // TODO: set turret body to dynamic and a very large mass
        public static IObject GetGround(Vector2 position)
        {
            var start = position - Vector2.UnitY * 13;
            var end = position - Vector2.UnitY * 15;
            var rayCastInput = new RayCastInput()
            {
                MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicPlatform,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(start, end, rayCastInput);

            foreach (var result in results)
            {
                var o = result.HitObject;
                if (o.GetBodyType() == BodyType.Static
                    && ScriptHelper.IsIndestructible(o)
                    && !RayCastHelper.ObjectsBulletCanDestroy.Contains(o.Name))
                {
                    return o;
                }
            }
            throw new Exception("I don't have the high ground");
        }

        private float m_fireCooldown = 0;
        public override void Update(float elapsed)
        {
            if (Game.IsEditorTest)
            {
                Game.DrawText(string.Format("{0}/{1}", CurrentAmmo, TotalAmmo), RotationCenter - Vector2.UnitY * 15);
                GetPlayersInRange();
                var los = GetLineOfSight(AimVector);
                Game.DrawLine(los[0], los[1], Color.Green);
                if (Target != null) Game.DrawArea(Target.GetAABB(), Color.Magenta);
            }

            if (m_ground.GetBodyType() == BodyType.Dynamic)
                Destroy();

            UpdateRotation(elapsed);
            UpdateBrokenEffects(elapsed);

            switch (m_state)
            {
                case TurretState.Idle:
                    if (CurrentAmmo > 0)
                        SeekAndDestroy();
                    break;
                case TurretState.Firing:
                    if (CurrentAmmo > 0)
                        SeekAndDestroy();

                    m_fireCooldown += elapsed;
                    if (m_fireCooldown >= 75)
                    {
                        if (m_currentAmmo > 0)
                            Fire();
                        if (m_currentAmmo == 0)
                        {
                            m_currentAmmo--;
                            Game.PlayEffect(EffectName.CustomFloatText, FirePosition, "Out of ammo");
                            Game.PlaySound("OutOfAmmoHeavy", FirePosition);

                            for (uint i = 1; i <= 6; i++)
                            {
                                ScriptHelper.Timeout(() => Game.PlaySound("OutOfAmmoHeavy", FirePosition), 75 * i);
                            }
                            StopFiring();
                        }
                        m_fireCooldown = 0;
                    }
                    break;
            }

        }

        private float m_sparkEffectTime = 0f;
        private float m_smokeEffectTime = 0f;
        private void UpdateBrokenEffects(float elapsed)
        {
            if (HasDamage(TurretDamage.SensorDamaged)
                || HasDamage(TurretDamage.RotorDamaged)
                || HasDamage(TurretDamage.ControllerDamaged))
            {
                var effectTime = 1500;
                if (HasDamage(TurretDamage.SensorDamaged)) effectTime -= 200;
                if (HasDamage(TurretDamage.RotorDamaged)) effectTime -= 200;
                if (HasDamage(TurretDamage.ControllerDamaged)) effectTime -= 200;

                m_sparkEffectTime += elapsed;
                if (m_sparkEffectTime >= effectTime)
                {
                    if (RandomHelper.Boolean()) m_sparkEffectTime -= RandomHelper.Between(0, 1500);
                    else
                    {
                        m_sparkEffectTime = 0f;
                        Game.PlayEffect(EffectName.ItemGleam, m_rotor.Object.GetWorldPosition());
                        Game.PlayEffect(EffectName.DestroyMetal, m_rotor.Object.GetWorldPosition());
                        Game.PlaySound("ElectricSparks", m_rotor.Object.GetWorldPosition());
                    }
                }
            }

            if (HasDamage(TurretDamage.BarrelDamaged))
            {
                m_smokeEffectTime += elapsed;

                if (m_smokeEffectTime >= 500)
                {
                    Game.PlayEffect(EffectName.Dig, m_tip.GetWorldPosition());
                    m_smokeEffectTime = 0f;
                }
            }
        }

        public bool HasDamage(TurretDamage damage) { return (m_damage & damage) == damage; }
        public bool Totaled() { return m_damage ==
                (TurretDamage.BarrelDamaged
                | TurretDamage.ControllerDamaged
                | TurretDamage.RotorDamaged
                | TurretDamage.SensorDamaged); }

        private void OnBodyDamage(TurretDamage damage, string displayText)
        {
            Game.PlayEffect(EffectName.CustomFloatText, RotationCenter + Vector2.UnitY * 5, displayText);
            Game.PlayEffect(EffectName.Electric, RotationCenter);
            Game.PlayEffect(EffectName.Electric, RotationCenter);
            Game.PlaySound("ElectricSparks", RotationCenter);
            m_damage = m_damage | damage;
        }
        public override void OnDamage(IObject obj, ObjectDamageArgs args)
        {
            foreach (var dc in m_damageableComponents)
            {
                if (dc.Object.UniqueID == obj.UniqueID)
                {
                    // barrel component is indestructible and there are 4 dc. A cheap solution is
                    // to randomize to have barrel damage instead when other dc takes damage
                    if (RandomHelper.Between(0, 1) < (1f / 3f) - (1f / 4f))
                        m_damageableComponents.First().OnDamage(args);

                    dc.OnDamage(args);
                    break;
                }
            }

            // https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/
            if (m_barrel.Health == 0 && !HasDamage(TurretDamage.BarrelDamaged))
            {
                Game.PlayEffect(EffectName.CustomFloatText, RotationCenter + Vector2.UnitY * 5, "Barrel Damaged");
                m_damage = m_damage | TurretDamage.BarrelDamaged;
            }
            if (m_rotor.Health == 0 && !HasDamage(TurretDamage.RotorDamaged))
            {
                OnBodyDamage(TurretDamage.RotorDamaged, "Rotor Damaged");
            }
            if (m_sensor.Health == 0 && !HasDamage(TurretDamage.SensorDamaged))
            {
                OnBodyDamage(TurretDamage.SensorDamaged, "Sensor Damaged");
            }
            if (m_controller.Health == 0 && !HasDamage(TurretDamage.ControllerDamaged))
            {
                OnBodyDamage(TurretDamage.ControllerDamaged, "Controller Damaged");
            }

            if (Totaled() && !IsDestroyed)
            {
                Destroy();
            }
        }

        public static readonly float Range = 500;
        private Vector2[] GetLineOfSight(Vector2 direction)
        {
            direction.Normalize();
            return new Vector2[]
            {
                RotationCenter + direction * 22,
                RotationCenter + direction * (Range + 22),
            };
        }

        private List<IPlayer> GetPlayersInRange()
        {
            var scanRange = Range + 22;
            var topPosition = RotationCenter + ScriptHelper.GetDirection(MaxAngle) * scanRange;
            var botPosition = RotationCenter + ScriptHelper.GetDirection(MinAngle) * scanRange;

            var left = Math.Min(RotationCenter.X, RotationCenter.X + scanRange * Direction);
            var right = Math.Max(RotationCenter.X, RotationCenter.X + scanRange * Direction);
            var bottom = Math.Min(topPosition.Y, botPosition.Y);
            var top = Math.Max(topPosition.Y, botPosition.Y);
            var filterArea = new Area(top, left, bottom, right);

            Game.DrawLine(RotationCenter, RotationCenter + ScriptHelper.GetDirection(MinAngle) * scanRange, Color.Cyan);
            Game.DrawLine(RotationCenter, RotationCenter + ScriptHelper.GetDirection(MaxAngle) * scanRange, Color.Cyan);
            Game.DrawArea(filterArea);

            var players = Game.GetObjectsByArea<IPlayer>(filterArea)
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), RotationCenter, scanRange, MinAngle, MaxAngle)
                && !p.IsDead)
                .ToList();

            // nearest player first
            players.Sort((p1, p2) =>
            {
                var p1Distance = Vector2.Distance(p1.GetWorldPosition(), RotationCenter);
                var p2Distance = Vector2.Distance(p2.GetWorldPosition(), RotationCenter);
                if (p1Distance < p2Distance)
                    return -1;
                return 1;
            });

            return players;
        }

        private IEnumerable<IPlayer> RayCast(Vector2 start, Vector2 end)
        {
            if (HasDamage(TurretDamage.SensorDamaged))
            {
                foreach (var result in RayCastHelper.Players(start, end))
                    yield return Game.GetPlayer(result.ObjectID);
            }
            else
            {
                foreach (var result in RayCastHelper.Players(start, end, true, Team, Owner))
                    yield return Game.GetPlayer(result.ObjectID);
            }
        }

        private float m_scanDelay = 0f;
        private void SeekAndDestroy()
        {
            if (HasDamage(TurretDamage.BarrelDamaged)) return;

            if (ScriptHelper.IsElapsed(m_scanDelay, 500))
            {
                m_scanDelay = Game.TotalElapsedGameTime;

                if (!HasDamage(TurretDamage.RotorDamaged))
                {
                    foreach (var player in GetPlayersInRange())
                    {
                        var direction = player.GetWorldPosition() - RotationCenter;
                        var los = GetLineOfSight(direction);
                        var targets = RayCast(los[0], los[1]).Where(r => !r.IsDead);

                        if (targets.Any())
                        {
                            Target = targets.FirstOrDefault(); break;
                        }
                    }
                }
            }

            if (Target != null && !Target.IsDead)
            {
                var direction = Target.GetWorldPosition() - RotationCenter;
                RotateTo(ScriptHelper.GetAngle(direction));
            }

            CheckFire();
        }

        private void CheckFire()
        {
            var los = GetLineOfSight(AimVector);
            var players = RayCast(los[0], los[1]);

            if (players.Any())
                StartFiring();
            else
                StopFiring();
        }

        private float m_targetAngle = 0;
        private void RotateTo(float angle)
        {
            if (HasDamage(TurretDamage.RotorDamaged) || HasDamage(TurretDamage.ControllerDamaged)) return;
            m_targetAngle = NormalizeAngle(angle);
        }

        private float m_rndRotationTime = 0f;
        private float m_rndRotationTimeElapsed = 0f;
        private void UpdateRotation(float elapsed)
        {
            if (HasDamage(TurretDamage.RotorDamaged))
                return;

            if (HasDamage(TurretDamage.ControllerDamaged) && ScriptHelper.IsElapsed(m_rndRotationTimeElapsed, m_rndRotationTime))
            {
                m_rndRotationTimeElapsed = Game.TotalElapsedGameTime;
                m_rndRotationTime = RandomHelper.Between(800, 1500);
                m_targetAngle = NormalizeAngle(RandomHelper.Between(MinAngle, MaxAngle));
            }

            if (MathExtension.Diff(Angle, m_targetAngle) > MathExtension.OneDeg)
                Angle += Math.Sign(m_targetAngle - Angle) * MathExtension.OneDeg * elapsed / 30f;
        }

        private void Fire()
        {
            if (HasDamage(TurretDamage.BarrelDamaged))
                return;

            var aimVector = AimVector;

            aimVector.X += RandomHelper.Between(-MathExtension.OneDeg, MathExtension.OneDeg);
            aimVector.Y += RandomHelper.Between(-MathExtension.OneDeg, MathExtension.OneDeg);

            Game.SpawnProjectile(ProjectileItem.M60, FirePosition, aimVector);
            // More info about muzzle effect
            // https://www.mythologicinteractiveforums.com/viewtopic.php?p=23313#p23313
            Game.PlayEffect("MZLED", Vector2.Zero, m_tip.UniqueID, "MuzzleFlashAssaultRifle");
            Game.PlaySound("Magnum", FirePosition);
            m_currentAmmo--;

            var emittedAngle = (Direction > 0 ? 90 + 45 : 45) + RandomHelper.Between(-.3f, .3f);
            // "ShellBig" "ShellSmall" "ShellShotgun" "ShellGLauncher"
            var casing = Game.CreateObject("ShellBig", RotationCenter, 0,
                ScriptHelper.GetDirection(emittedAngle) * 4, RandomHelper.Between(-5, 5));
        }

        private void StartFiring() { if (m_state != TurretState.Firing) m_state = TurretState.Firing; }
        private void StopFiring() { if (m_state != TurretState.Idle) m_state = TurretState.Idle; }

        public void Destroy()
        {
            if (IsDestroyed) return;

            foreach (var component in Components)
            {
                if (component.CustomID.StartsWith("TurretLeg"))
                {
                    component.Destroy();
                }
                else
                    component.SetBodyType(BodyType.Dynamic);
            }
            m_components.Clear();
            IsDestroyed = true;
        }
    }
    class TurretPlaceholder
    {
        public int UniqueID { get { return m_components.First().UniqueID; } }
        public Vector2 Position { get; private set; }
        public Area GetAABB() { return m_components.First().GetAABB(); }
        public bool IsRemoved { get; private set; }

        public IObject RepresentedObject { get { return m_components.First(); } }

        private List<IObject> m_components = new List<IObject>();
        public TurretDirection Direction { get; private set; }
        private IObject m_ground;

        private Vector2 m_placeholderBgPosition;
        private List<IObject> m_progressIndicators = new List<IObject>();

        public PlayerTeam Team { get; private set; }
        public IPlayer OriginalBuilder { get; private set; }

        private float m_buildProgress = 0f;
        // 0-1, 1 is finished
        public float BuildProgress
        {
            get { return m_buildProgress; }
            set
            {
                if (m_buildProgress == value) return;
                var progress = -1;

                if (value >= .8 && m_buildProgress < .8)
                    progress = 4;
                else if (value >= .6 && m_buildProgress < .6)
                    progress = 3;
                else if (value >= .4 && m_buildProgress < .4)
                    progress = 2;
                else if (value >= .2 && m_buildProgress < .2)
                    progress = 1;
                else if (m_buildProgress == 0)
                    progress = 0;

                if (progress > -1)
                {
                    foreach(var indicator in m_progressIndicators)
                        indicator.Remove();
                    m_progressIndicators.Clear();

                    var rows = (int)Math.Ceiling(progress / 2.0);

                    for (var r = 0; r < rows; r++)
                    {
                        var indicator = Game.CreateObject("BgFrame00B", m_placeholderBgPosition - Vector2.UnitY * 8 * r);
                        int c;

                        if (r == rows - 1) c = progress % 2 == 1 ? 1 : 2;
                        else c = 2;

                        indicator.SetColor1("BgGray");
                        indicator.SetSizeFactor(new Point(c, 1));
                        m_progressIndicators.Add(indicator);
                    }
                }

                m_buildProgress = value;
            }
        }

        public TurretPlaceholder(Vector2 worldPosition, TurretDirection direction, IPlayer builder)
        {
            OriginalBuilder = builder;
            Team = builder.GetTeam();
            Direction = direction;
            IsRemoved = false;

            var dir = (direction == TurretDirection.Left) ? -1 : 1;

            var ux = Vector2.UnitX * -dir;
            var uy = Vector2.UnitY;

            // worldPosition works best when get from player.GetWorldPosition()
            Position = worldPosition - ux * 10 + uy * 9;
            m_placeholderBgPosition = Position - Vector2.UnitX * (Direction > 0 ? 5 : 3) - uy * 1;
            var legLeft1Position = Position - ux * 3 + uy * 1;
            var legLeft2Position = Position - ux * 6 - uy * 5;
            var legRight1Position = Position + ux * 1 - uy * 5;
            var legRight2Position = Position + ux * 5 - uy * 13;
            var legMiddle1Position = Position - ux * 1.8f - uy * 3;
            var legMiddle2Position = Position - ux * 1.8f - uy * 6;

            var placeholderBg = Game.CreateObject("BgFrame00B", m_placeholderBgPosition);
            var legMiddle1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle1Position, -dir * 0.41f);
            var legMiddle2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle2Position, -dir * 0.41f);
            var legLeft1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft1Position);
            var legLeft2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft2Position);
            var legRight1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight1Position, MathHelper.PI);
            var legRight2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight2Position, MathHelper.PI);
            m_ground = Turret.GetGround(Position);

            legMiddle1.SetEnabled(false);
            legMiddle2.SetEnabled(false);
            legLeft1.SetEnabled(false);
            legLeft2.SetEnabled(false);
            legRight1.SetEnabled(false);
            legRight2.SetEnabled(false);

            legLeft1.SetFaceDirection(-dir);
            legLeft2.SetFaceDirection(-dir);
            legRight1.SetFaceDirection(dir);
            legRight2.SetFaceDirection(dir);
            legMiddle1.SetFaceDirection(-dir);
            legMiddle2.SetFaceDirection(-dir);

            placeholderBg.SetSizeFactor(new Point(2, 2));

            m_components.Add(placeholderBg); legMiddle1.CustomID = "PlaceholderBg";
            m_components.Add(legMiddle1); legMiddle1.CustomID = "LegMiddle1";
            m_components.Add(legMiddle2); legMiddle2.CustomID = "LegMiddle2";
            m_components.Add(legLeft1); legLeft1.CustomID = "LegLeft1";
            m_components.Add(legLeft2); legLeft2.CustomID = "LegLeft2";
            m_components.Add(legRight1); legRight1.CustomID = "LegRight1";
            m_components.Add(legRight2); legRight2.CustomID = "LegRight2";
        }

        public void Update(float elapsed)
        {
            if (m_ground.GetBodyType() == BodyType.Dynamic)
                Remove();
        }

        public void Remove()
        {
            if (IsRemoved) return;
            IsRemoved = true;

            foreach (var component in m_components)
            {
                component.Remove();
            }
            foreach (var indicator in m_progressIndicators)
            {
                indicator.Remove();
            }
            WeaponManager.RemoveTurretPlaceholder(UniqueID);
        }
    }
    public abstract class Weapon
    {
        public virtual bool IsDestroyed { get; protected set; }

        public IPlayer Owner { get; protected set; }
        public PlayerTeam Team { get; private set; }

        public Weapon(IPlayer owner)
        {
            Owner = owner;
            Team = owner == null ? PlayerTeam.Independent : owner.GetTeam();
        }

        public virtual Vector2 Position { get { return Instance.GetWorldPosition(); } }
        public abstract IEnumerable<IObject> Components { get; set; }
        // if the Components only have one item, then you can also reference it in an Instance
        public IObject Instance { get; protected set; }

        public abstract void Update(float elapsed);
        public virtual void OnDamage(IObject component, ObjectDamageArgs args) { }
        public virtual void OnComponentTerminated(IObject component) { }
    }
    class WeaponFactory
    {
        public static Weapon Create(BeWeapon weapon, object arg)
        {
            switch (weapon)
            {
                case BeWeapon.Camp:
                    return new Camp((GangsterBot)arg);
                case BeWeapon.Chicken:
                    return new Chicken((FarmerBot)arg);
                case BeWeapon.FireTrap:
                    return new FireTrap((IPlayer)arg);
                case BeWeapon.LaserSweeper:
                    return new LaserSweeper((MetroCopBot)arg);
                case BeWeapon.ShotgunTrap:
                    return new ShotgunTrap((IPlayer)arg);
                case BeWeapon.Tripwire:
                    return new TripWire((IPlayer)arg);
                case BeWeapon.Turret:
                    return new Turret((TurretArg)arg);
                default:
                    throw new NotImplementedException();
            }
        }
    }
    class TurretPlaceholderInfo
    {
        public TurretPlaceholder Placeholder;
        public IPlayer Builder;
    }

    static class WeaponManager
    {
        private static List<Weapon> m_weapons = new List<Weapon>();
        private static Dictionary<int, TurretPlaceholderInfo> m_turretPlaceholders = new Dictionary<int, TurretPlaceholderInfo>();

        public static void Initialize()
        {
            Events.UpdateCallback.Start(OnUpdate);
            Events.ObjectDamageCallback.Start(OnObjectDamage);
            Events.ObjectTerminatedCallback.Start(OnObjectTerminated);
        }

        public static IEnumerable<T> GetWeapons<T>() where T : Weapon
        {
            foreach (var weapon in m_weapons)
            {
                var w = weapon as T;
                if (w != null) yield return w;
            }
        }

        public static Weapon SpawnWeapon(BeWeapon weapon, object arg)
        {
            var wpn = WeaponFactory.Create(weapon, arg);
            m_weapons.Add(wpn);
            return wpn;
        }

        private static float m_lastUpdateTime = 0f;
        private static void OnUpdate(float elapsed)
        {
            foreach (var weapon in m_weapons.ToList())
            {
                weapon.Update(Game.TotalElapsedGameTime - m_lastUpdateTime);

                if (weapon.IsDestroyed)
                    m_weapons.Remove(weapon);
            }

            foreach (var placeholderInfo in m_turretPlaceholders.Values.ToList())
            {
                var placeholder = placeholderInfo.Placeholder;

                placeholder.Update(Game.TotalElapsedGameTime - m_lastUpdateTime);

                if (placeholder.IsRemoved)
                    placeholder.Remove();
            }

            m_lastUpdateTime = Game.TotalElapsedGameTime;
        }

        private static void OnObjectDamage(IObject obj, ObjectDamageArgs arg)
        {
            if (string.IsNullOrEmpty(obj.CustomID)) return;

            foreach (var weapon in m_weapons)
            {
                foreach (var component in weapon.Components.ToList())
                {
                    if (obj.UniqueID == component.UniqueID)
                    {
                        weapon.OnDamage(obj, arg);
                    }
                }
            }
        }

        private static void OnObjectTerminated(IObject[] objects)
        {
            foreach (var o in objects)
            {
                // improve performance
                if (string.IsNullOrEmpty(o.CustomID)) continue;

                foreach (var weapon in m_weapons.ToList())
                {
                    foreach (var component in weapon.Components.ToList())
                    {
                        if (o.UniqueID == component.UniqueID)
                        {
                            weapon.OnComponentTerminated(o);
                        }
                    }
                }
            }
        }

        public static TurretPlaceholder CreateTurretPlaceholder(IPlayer player, TurretDirection direction)
        {
            var placeholder = new TurretPlaceholder(player.GetWorldPosition(), direction, player);

            m_turretPlaceholders.Add(placeholder.UniqueID, new TurretPlaceholderInfo()
            {
                Builder = player,
                Placeholder = placeholder,
            });
            return placeholder;
        }

        public static IEnumerable<KeyValuePair<int, TurretPlaceholderInfo>> GetUntouchedTurretPlaceholders()
        {
            return m_turretPlaceholders.Where((p) => p.Value.Builder == null);
        }
        public static void RemoveBuilderFromTurretPlaceholder(int uniqueID)
        {
            if (m_turretPlaceholders.ContainsKey(uniqueID))
                m_turretPlaceholders[uniqueID].Builder = null;
        }
        public static void AddBuilderToTurretPlaceholder(int uniqueID, IPlayer builder) { m_turretPlaceholders[uniqueID].Builder = builder; }
        public static void RemoveTurretPlaceholder(int uniqueID) { m_turretPlaceholders.Remove(uniqueID); }
    }
    class BreakingPowerup : MeleeWpn
    {
        public BreakingPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Breaking) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three) return;

            foreach (var arg in args)
            {
                if (!arg.IsPlayer) continue;
             
                var enemy = BotManager.GetBot(arg.ObjectID);
                if (enemy.Info.IsBoss || ScriptHelper.SameTeam(enemy.Player, Owner)) continue;

                foreach (var weapon in Constants.WeaponItemTypes)
                {
                    var weaponObj = enemy.Player.Disarm(weapon);
                    if (weaponObj != null)
                    {
                        weaponObj.Destroy();
                        break;
                    }
                }
            }
        }
    }
    class EarthquakePowerup : MeleeWpn
    {
        public override bool IsValidPowerup()
        {
            return IsHitTheFloorWeapon(Name);
        }

        public EarthquakePowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Earthquake) { }

        protected override void OnMeleeActionChanged(MeleeAction meleeAction, Vector2 hitPosition)
        {
            base.OnMeleeActionChanged(meleeAction, hitPosition);

            if (Owner.IsDead || meleeAction != MeleeAction.Three) return;

            var area = ScriptHelper.GrowFromCenter(hitPosition, 140, 50);
            ScriptHelper.CreateEarthquake(area, Owner);
        }
    }
    class FireTrailPowerup : MeleeWpn
    {
        public override bool IsValidPowerup()
        {
            return IsHitTheFloorWeapon(Name);
        }

        public FireTrailPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.FireTrail) { }

        private float _cooldownTime = 0f;

        protected override void OnMeleeActionChanged(MeleeAction meleeAction, Vector2 hitPosition)
        {
            base.OnMeleeActionChanged(meleeAction, hitPosition);

            if (Owner.IsDead || meleeAction != MeleeAction.Three || !ScriptHelper.IsElapsed(_cooldownTime, Game.IsEditorTest ? 0 : 7000)) return;

            _cooldownTime = Game.TotalElapsedGameTime;

            var timeStarted = 0f;
            var dir = Owner.GetFaceDirection();
            var shouldStop = false;
            var nextPos = hitPosition;

            var velocity = ScriptHelper.GetDirection(dir == 1 ? MathExtension.PIOver4 : MathExtension.PI - MathExtension.PIOver4) * 5;
            Game.SpawnFireNode(hitPosition, velocity, FireNodeType.Flamethrower);

            ScriptHelper.RunUntil(() =>
            {
                if (ScriptHelper.IsElapsed(timeStarted, 40))
                {
                    timeStarted = Game.TotalElapsedGameTime;
                    nextPos += Vector2.UnitX * dir * 10;

                    // handle uneven terrain
                    var start = nextPos + Vector2.UnitY * 10;
                    var end = nextPos - Vector2.UnitY * 10;
                    var rcResults = Game.RayCast(start, end, new RayCastInput
                    {
                        FilterOnMaskBits = true,
                        IncludeOverlap = true,
                        MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicG1 + CategoryBits.DynamicG2 + CategoryBits.Player,
                    }).Where(r => r.HitObject != null);

                    var groundResult = rcResults.FirstOrDefault(x => x.HitObject.GetCollisionFilter().CategoryBits == CategoryBits.StaticGround);

                    // at the edge or something
                    if (groundResult.HitObject == null || groundResult.Fraction == 0 /* deep in static object */)
                    {
                        shouldStop = true; return;
                    }

                    foreach (var result in rcResults)
                    {
                        if (ScriptHelper.IsInteractiveObject(result.HitObject))
                        {
                            result.HitObject.DealDamage(1);
                            result.HitObject.SetMaxFire();
                            Game.SpawnFireNode(result.Position, RandomHelper.Direction(15, 180 - 15) * 3, FireNodeType.Flamethrower);
                        }
                        var player = ScriptHelper.AsPlayer(result.HitObject);
                        if (player != null)
                        {
                            ScriptHelper.Timeout(() =>
                            {
                                ScriptHelper.Fall(player);
                                result.HitObject.SetLinearVelocity(Vector2.UnitY * 6);
                            }, 150);
                        }
                    }

                    nextPos = groundResult.Position;
                    Game.PlaySound("Flamethrower", nextPos);

                    var pos = nextPos;
                    Events.UpdateCallback.Start((e) => Game.PlayEffect(EffectName.PlayerBurned, pos), 200, 10);
                }
            }, () => Vector2.Distance(hitPosition, nextPos) > 350 || shouldStop);
        }
    }
    class GibPowerup : MeleeWpn
    {
        public GibPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Gib) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three) return;

            foreach (var arg in args)
            {
                if (!arg.IsPlayer) continue;
             
                var enemy = BotManager.GetBot(arg.ObjectID);
                if (enemy.Info.IsBoss || ScriptHelper.SameTeam(enemy.Player, Owner)) continue;

                if (RandomHelper.Percentage(Game.IsEditorTest ? 1 : .1f) || enemy.Player.IsDead)
                {
                    var ownerDir = Owner.GetFaceDirection();
                    var pBox = enemy.Player.GetAABB();

                    Owner.SetHealth(Owner.GetHealth() + 10);
                    // If you kill here, this callback will be invoked again and can cause unexpected result.
                    ScriptHelper.Timeout(() =>
                    {
                        enemy.Player.Gib();
                        ScriptHelper.Timeout(() =>
                        {
                            foreach (var o in Game.GetObjectsByArea(pBox))
                            {
                                if (o.Name.StartsWith("Giblet"))
                                {
                                    var dir = RandomHelper.Direction(10, 180 - 10);
                                    o.SetLinearVelocity(dir * RandomHelper.Between(10, 20));
                                    o.SetAngularVelocity(RandomHelper.Between(-20, 20));
                                }
                            }
                        }, 17);
                    }, 0);
                    break;
                }
            }
        }
    }
    class GroundBreakerPowerup : MeleeWpn
    {
        public override bool IsValidPowerup()
        {
            return IsHitTheFloorWeapon(Name);
        }

        public GroundBreakerPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.GroundBreaker) { }

        protected override void OnMeleeActionChanged(MeleeAction meleeAction, Vector2 hitPosition)
        {
            base.OnMeleeActionChanged(meleeAction, hitPosition);

            if (Owner.IsDead || CurrentMeleeAction != MeleeAction.Three) return;

            var groundObject = ScriptHelper.GetGroundObject(Owner);
            if (groundObject == null) return;

            var dir = Owner.GetFaceDirection();
            var groundSizeFactor = groundObject.GetSizeFactor();
            var os = ScriptHelper.SplitTileObject(groundObject, hitPosition);
            if (os.Length != 2) return;

            var oLeft = os[0];
            var oRight = os[1];
            var oLifted = dir == -1 ? oLeft : oRight;


            Game.PlayEffect(EffectName.CameraShaker, hitPosition, 10f, 400f, false);
            Game.PlaySound("Explosion", hitPosition);
            Game.PlayEffect(EffectName.Explosion, hitPosition);
            Game.PlayEffect(EffectName.BulletHit, hitPosition);
            Game.PlayEffect(EffectName.BulletHit, hitPosition);
            Game.PlayEffect(EffectName.BulletHit, hitPosition);

            if (oLifted.GetSizeFactor().X < 6) return; // only lift large ground object, small ground object will just crush everything.
            var oldMass = oLifted.GetMass();

            var iLeft = Game.CreateObject("InvisibleBlockNoCollision", oLeft.GetAABB().TopLeft);
            var iRight = Game.CreateObject("InvisibleBlockNoCollision", oRight.GetAABB().TopRight);
            var weldLeft = ScriptHelper.Weld(oLeft, iLeft);
            var weldRight = ScriptHelper.Weld(oRight, iRight);

            iLeft.SetBodyType(BodyType.Dynamic);
            iRight.SetBodyType(BodyType.Dynamic);

            var distanceJoint = (IObjectDistanceJoint)Game.CreateObject("DistanceJoint", oLeft.GetAABB().TopRight);
            var distanceTarget = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint", oRight.GetAABB().TopLeft);
            var invisiblePlatform = Game.CreateObject("InvisiblePlatform", oLeft.GetAABB().BottomLeft);

            invisiblePlatform.SetSizeFactor(new Point(groundSizeFactor.X, 1));
            distanceJoint.SetLengthType(DistanceJointLengthType.Elastic);
            distanceJoint.SetTargetObject(oLeft);
            distanceJoint.SetTargetObjectJoint(distanceTarget);
            distanceTarget.SetTargetObject(oRight);

            var iLifted = dir == -1 ? iLeft : iRight;
            var eqArea = ScriptHelper.Area(
                dir == -1 ? iLeft.GetAABB().TopLeft : iRight.GetAABB().TopRight + Vector2.UnitY * 20,
                dir == -1 ? iLeft.GetAABB().BottomLeft + Vector2.UnitX * 60 : iRight.GetAABB().BottomRight - Vector2.UnitX * 60
                );
            ScriptHelper.CreateEarthquake(eqArea);

            oLifted.SetMass(.01f);
            var force = Math.Min((float)Math.Pow(oLifted.GetSizeFactor().X, 3) * .06f, 300);
            Events.UpdateCallback.Start(e =>
            {
                iLifted.SetLinearVelocity(Vector2.UnitY * force);
            }, 0, 5);

            //ScriptHelper.RunIn(() => Game.DrawText(force.ToString(), iLifted.GetWorldPosition()), 3000);

            ScriptHelper.Timeout(() =>
            {
                oLifted.SetMass(oldMass);
                invisiblePlatform.Destroy();
                distanceJoint.Destroy();
                distanceTarget.Destroy();
                iLeft.Destroy();
                iRight.Destroy();
                weldLeft.Destroy();
                weldRight.Destroy();
            }, 2000);
        }
    }
    class GroundSlamPowerup : MeleeWpn
    {
        enum State { Normal, PunchingUp, Launching, Jumping, PunchingDown, WaitDown, }

        public override bool IsValidPowerup()
        {
            return Name == WeaponItem.NONE;
        }

        public GroundSlamPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.GroundSlam) { }

        private State _state = State.Normal;

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three || _state != State.Normal) return;

            var arg = args.FirstOrDefault(x => x.IsPlayer && !ScriptHelper.SameTeam(Game.GetPlayer(x.ObjectID), Owner) && x.HitObject.GetHealth() < 15);
            if (arg.HitObject == null) return;

            _target = Game.GetPlayer(arg.ObjectID);
            _target.SetLinearVelocity(Vector2.UnitY * 11);
            _target.SetInputEnabled(false);
            _target.SetNametagVisible(false);
            _target.SetStatusBarsVisible(false);
            _target.Kill();
            _target.SetCorpseHealth(Constants.CORPSE_MAX_HEALTH);
            _targetInitialPosition = _target.GetWorldPosition();
            var tMod = _target.GetModifiers();
            tMod.ImpactDamageTakenModifier = .0001f; // can never be gibbed when slammed, but still allow to register damage
            _target.SetModifiers(tMod);
            var mod = Owner.GetModifiers();
            mod.MeleeStunImmunity = 1;
            Owner.SetModifiers(mod);
            Owner.SetInputEnabled(false);
            ChangeState(State.PunchingUp);
        }

        private IPlayer _target;
        private Vector2 _targetInitialPosition;
        private Vector2 _targetHoverPosition;
        private Vector2 _ownerHoverPosition;
        private bool _executeLaunch = false;
        private bool _executeAttack = false;
        private static readonly uint FullJumpAttackMeleeTime = 500;

        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            //Game.DrawText(_state.ToString(), Owner.GetWorldPosition());

            if (Owner.IsDead && _state != State.Normal)
            {
                ChangeState(State.Normal); return;
            }

            switch (_state)
            {
                case State.PunchingUp:
                    var pos = _target.GetWorldPosition();
                    if (pos.X != _targetInitialPosition.X)
                    {
                        pos.X = _targetInitialPosition.X;
                        _target.SetWorldPosition(pos); // don't reflect horizontally
                    }
                    if (_target.GetLinearVelocity().Length() <= 1)
                    {
                        _targetHoverPosition = _target.GetWorldPosition();
                        Owner.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch, 0, 200));
                        Game.RunCommand("/settime .4");
                        ScriptHelper.Timeout(() => _executeLaunch = true, 220);
                        ChangeState(State.Launching);
                    }
                    break;
                case State.Launching:
                    _target.SetLinearVelocity(Vector2.Zero);
                    _target.SetWorldPosition(_targetHoverPosition);
                    if (_executeLaunch)
                    {
                        _executeLaunch = false;
                        Owner.SetLinearVelocity(Vector2.UnitY * 12.5f);
                        Owner.AddCommand(new PlayerCommand(PlayerCommandType.Jump));
                        ChangeState(State.Jumping);
                    }
                    break;
                case State.Jumping:
                    _target.SetLinearVelocity(Vector2.Zero);
                    _target.SetWorldPosition(_targetHoverPosition);
                    Owner.SetLinearVelocity(Vector2.UnitY * 10);
                    if (Owner.IsInMidAir && Owner.GetWorldPosition().Y + 11 >= _target.GetWorldPosition().Y)
                    {
                        _ownerHoverPosition = Owner.GetWorldPosition();
                        Owner.ClearCommandQueue(); // without this line AttackOnce doesn't work
                        Owner.AddCommand(new PlayerCommand(PlayerCommandType.AttackOnce));
                        Game.RunCommand("/settime .1");
                        ChangeState(State.PunchingDown);
                        ScriptHelper.Timeout(() => _executeAttack = true, FullJumpAttackMeleeTime + 30);
                    }
                    break;
                case State.PunchingDown:
                {
                    Owner.SetLinearVelocity(Vector2.Zero);
                    Owner.SetWorldPosition(_ownerHoverPosition);
                    if (_executeAttack)
                    {
                        Game.RunCommand("/settime 1");
                        Owner.AddCommand(new PlayerCommand(PlayerCommandType.WaitLand));
                        ChangeState(State.WaitDown);
                        _target.SetLinearVelocity(-Vector2.UnitY * 40);
                        _executeAttack = false;

                        var cb = (Events.PlayerDamageCallback)null;
                        Action Finish = () => { cb.Stop(); ChangeState(State.Normal); };
                        cb = Events.PlayerDamageCallback.Start((player, args) =>
                        {
                            if (_target.IsRemoved || args.DamageType == PlayerDamageEventType.Explosion)
                            {
                                Finish(); return;
                            }
                            if (player.UniqueID != _target.UniqueID) return;
                            if (args.DamageType == PlayerDamageEventType.Fall)
                            {
                                if (BreakObjects()) Finish();
                            }
                        });
                    }
                    break;
                }
                case State.WaitDown:
                    if (_target.IsRemoved)
                    {
                        ChangeState(State.Normal);
                    }
                    // if you hit static or indestructible objects, the damage callback is not invoked
                    if (_target.GetLinearVelocity().Y >= 0)
                    {
                        BreakObjects();
                        ChangeState(State.Normal);
                    }
                    Owner.SetLinearVelocity(Vector2.Zero);
                    Owner.SetWorldPosition(_ownerHoverPosition);
                    break;
            }
        }

        private bool BreakObjects()
        {
            var pBox = _target.GetAABB();
            var hitObjects = Game.GetObjectsByArea(ScriptHelper.Grow(pBox, 3, 3));
            var pos = _target.GetWorldPosition();

            Game.PlayEffect(EffectName.CameraShaker, pBox.Center, 9f, 400f, false);
            foreach (var hitObject in hitObjects)
            {
                var cbits = hitObject.GetCollisionFilter().CategoryBits;
                if (hitObject.UniqueID == Owner.UniqueID || cbits != CategoryBits.DynamicG1 && cbits != CategoryBits.StaticGround) continue;
                if (cbits == CategoryBits.DynamicG1) hitObject.Destroy();
                if (cbits == CategoryBits.StaticGround)
                {
                    hitObject.SetBodyType(BodyType.Dynamic);
                    hitObject.SetLinearVelocity(Vector2.UnitY * 12);
                    Game.PlaySound("Explosion", pos);
                    ScriptHelper.SplitTileObject(hitObject, pos);
                    ScriptHelper.CreateEarthquake(ScriptHelper.GrowFromCenter(pos, 100, 50));
                    return true;
                }
            }
            return false;
        }

        private void ChangeState(State state)
        {
            if (state == State.Normal)
            {
                _target.SetInputEnabled(true);
                Owner.SetInputEnabled(true);
                BotManager.GetBot(_target).ResetModifiers();
                BotManager.GetBot(Owner).ResetModifiers();
                Game.RunCommand("/settime 1");
            }
            _state = state;
        }
    }
    class HurlingPowerup : MeleeWpn
    {
        public HurlingPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Hurling) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0) return;

            var criticalAttack = CurrentMeleeAction == MeleeAction.Three
            || CurrentMeleeAction == MeleeAction.Two && RandomHelper.Percentage(.4f)
            || CurrentMeleeAction == MeleeAction.One && RandomHelper.Percentage(.2f);

            if (!criticalAttack) return;

            var dir = Owner.GetFaceDirection();
            var min = dir == 1 ? Owner.GetAABB().TopRight : Owner.GetAABB().TopLeft;
            var max = dir == 1 ? Owner.GetAABB().BottomRight : Owner.GetAABB().BottomLeft;
            min += Vector2.UnitY * 5;
            max += dir * Vector2.UnitX * 45;
            var playersInRange = Game.GetObjectsByArea<IPlayer>(ScriptHelper.Area(min, max));

            foreach (var p in playersInRange)
            {
                if (p.UniqueID == Owner.UniqueID) continue;
                Game.PlayEffect(EffectName.Smack, p.GetWorldPosition());
                p.SetLinearVelocity(new Vector2(5 * dir, RandomHelper.Between(4, 9)));
                ScriptHelper.Command(p, PlayerCommandType.Stagger);
            }

            foreach (var arg in args)
            {
                if (!arg.IsPlayer) continue;

                var enemy = BotManager.GetBot(arg.ObjectID);
                if (enemy.Info.IsBoss) continue;

                foreach (var weapon in Constants.WeaponItemTypes)
                {
                    var weaponObj = enemy.Player.Disarm(weapon);
                    if (weaponObj != null)
                    {
                        Owner.GiveWeaponItem(weaponObj.RangedWeapon.WeaponItem);
                        weaponObj.Remove();
                        break;
                    }
                }
            }
        }
    }
    class MegatonPowerup : MeleeWpn
    {
        public MegatonPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Megaton) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three) return;

            foreach (var arg in args)
            {
                if (!arg.IsPlayer) continue;

                var enemy = Game.GetPlayer(arg.ObjectID);
                if (enemy.IsRemoved || ScriptHelper.SameTeam(enemy, Owner) || enemy.GetHealth() > 25) continue;

                Kill(enemy);
                break;
            }
        }

        private void Kill(IPlayer enemy)
        {
            var mod = enemy.GetModifiers();
            mod.ImpactDamageTakenModifier = 0.0001f;
            enemy.Kill();
            enemy.SetModifiers(mod);
            enemy.SetNametagVisible(false);
            enemy.SetStatusBarsVisible(false);

            var deflectCount = 0;
            // TODO: explosive sound effect

            enemy.SetLinearVelocity(new Vector2(25 * Owner.GetFaceDirection(), 25));
            Game.RunCommand("/settime 0.1");
            ScriptHelper.Timeout(() => Game.RunCommand("/settime 1"), 1000);

            var cb = (Events.PlayerDamageCallback)null;
            cb = Events.PlayerDamageCallback.Start((player, dArgs) =>
            {
                if (player.UniqueID != enemy.UniqueID) return;
                if (enemy.GetCorpseHealth() < enemy.GetCorpseMaxHealth()) enemy.SetCorpseHealth(enemy.GetCorpseMaxHealth());
                if (dArgs.DamageType == PlayerDamageEventType.Fall)
                {
                    var accuracyDeflection = 0.2f / 2;
                    var angle = ScriptHelper.GetAngle(Vector2.Normalize(player.GetLinearVelocity()));
                    var finalDirection = RandomHelper.Direction(angle - accuracyDeflection, angle + accuracyDeflection, true);
                    player.SetLinearVelocity(finalDirection * RandomHelper.Between(30, 40));
                    deflectCount++;
                }
            });

            ScriptHelper.RunUntil(() =>
            {
                if (enemy.IsLayingOnGround)
                    enemy.SetLinearVelocity(RandomHelper.Direction(180 - 25, 25) * 30);
                if (enemy.GetLinearVelocity().Length() < 25)
                    enemy.SetLinearVelocity(Vector2.Normalize(enemy.GetLinearVelocity()) * 35);
            }, () => deflectCount > 30 || enemy.IsRemoved, () => cb.Stop());
        }
    }
    class PushbackPowerup : MeleeWpn
    {
        public PushbackPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Pushback) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three) return;

            var arg = args.FirstOrDefault(x => x.IsPlayer);
            if (arg.HitObject == null) return;
            
            var dir = Owner.GetFaceDirection();
            var enemy = BotManager.GetBot(arg.ObjectID);
            if (enemy.Player.IsRemoved) return;
            var enemyPlayer = enemy.Player;
            var oldHealth = enemy.Player.GetHealth();

            enemy.Player.DealDamage(arg.HitDamage); // damage x2
            enemy.Player.SetLinearVelocity(new Vector2(25 * dir, 4));
            Game.PlayEffect(EffectName.CameraShaker, enemy.Position, 4f, 300f, false);
            ScriptHelper.Fall(enemyPlayer);

            var cb = (Events.PlayerDamageCallback)null;
            var hitByObject = false;

            ScriptHelper.RunUntil(() =>
            {
                var pBox = enemyPlayer.GetAABB();
                Game.PlayEffect(EffectName.Steam, RandomHelper.WithinArea(pBox));
                Game.PlayEffect(EffectName.Steam, RandomHelper.WithinArea(pBox));
            }, () => enemyPlayer.IsRemoved || enemyPlayer.IsOnGround || hitByObject, () => cb.Stop());

            cb = Events.PlayerDamageCallback.Start((player, dArgs) =>
            {
                if (player.UniqueID != enemyPlayer.UniqueID) return;
                if (dArgs.DamageType == PlayerDamageEventType.Fall)
                {
                    var pBox = player.GetAABB();
                    var hitObjects = Game.GetObjectsByArea(ScriptHelper.Grow(pBox, 1));
                    
                    player.SetHealth(Math.Min(oldHealth, player.GetHealth() + dArgs.Damage)); // undo impact damage
                    foreach (var hitObject in hitObjects)
                    {
                        var cbits = hitObject.GetCollisionFilter().CategoryBits;
                        if (hitObject.UniqueID == Owner.UniqueID || cbits != CategoryBits.DynamicG1 && cbits != CategoryBits.StaticGround) continue;
                        if (cbits == CategoryBits.DynamicG1) hitObject.Destroy();
                        if (cbits == CategoryBits.StaticGround) hitObject.SetBodyType(BodyType.Dynamic);
                        if (Game.IsEditorTest)
                        {
                            ScriptHelper.RunIn(() => Game.DrawArea(hitObject.GetAABB(), Color.Blue), 3000);
                        }
                    }
                    hitByObject = true;
                }
            });
        }
    }
    class SeriousPowerup : MeleeWpn
    {
        public SeriousPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Serious) { }

        private float _cooldownTime = 0f;

        protected override void OnMeleeActionChanged(MeleeAction meleeAction, Vector2 hitPosition)
        {
            base.OnMeleeActionChanged(meleeAction, hitPosition);

            if (Owner.IsDead || meleeAction != MeleeAction.Three || !ScriptHelper.IsElapsed(_cooldownTime, Game.IsEditorTest ? 0 : 12000)) return;

            _cooldownTime = Game.TotalElapsedGameTime;

            var dir = Owner.GetFaceDirection();
            var pos = Owner.GetWorldPosition();
            var area = ScriptHelper.Area(pos, pos + new Vector2(dir * 110, 60));
            var objects = Game.GetObjectsByArea(area)
                .Where(x => x.UniqueID != Owner.UniqueID && !x.Name.Contains("Debris") && ScriptHelper.IsInteractiveObject(x)).ToList();

            if (objects.Count <= 1) return;

            Game.RunCommand("/settime 0.1");
            ScriptHelper.Timeout(() => Game.RunCommand("/settime 1"), 800);

            var thrownObjects = new List<IObject>();
            foreach (var o in objects)
            {
                if (ScriptHelper.IsDynamicObject(o))
                    o.Destroy();

                var player = ScriptHelper.AsPlayer(o);
                if (player != null)
                {
                    var direction = dir == -1 ? RandomHelper.Direction(100, 170) : RandomHelper.Direction(10, 80);
                    var profile = player.GetProfile();
                    var stripeableClothingTypes = ScriptHelper.StrippeableClothingTypes(profile);

                    thrownObjects.Add(player);
                    player.SetLinearVelocity(direction * RandomHelper.Between(10, 25));
                    BotManager.GetBot(player).DisarmAll();
                    ScriptHelper.Fall(player);

                    if (!stripeableClothingTypes.Any() && !ScriptHelper.HaveUnderwear(profile)) continue;

                    if (!stripeableClothingTypes.Any())
                    {
                        var strippedProfile = ScriptHelper.StripUnderwear(profile);
                        player.SetProfile(strippedProfile);
                    }
                    else
                    {
                        var clothingTypes = RandomHelper.Boolean() ?
                            stripeableClothingTypes :
                            stripeableClothingTypes.Take((int)Math.Ceiling(stripeableClothingTypes.Count / 2d));
                        foreach (var ct in clothingTypes)  profile = ScriptHelper.Strip(profile, ct);
                        player.SetProfile(profile);
                    }
                }
            }

            ScriptHelper.Timeout(() =>
            {
                var debrisObjects = Game.GetObjectsByArea(area)
                .Where(x => x.GetLinearVelocity().Length() <= 30 && (x.Name.Contains("Debris") || x.Name.StartsWith("Wpn"))).ToList();

                foreach (var o in debrisObjects)
                {
                    thrownObjects.Add(o);
                    var direction = dir == -1 ? RandomHelper.Direction(100, 170) : RandomHelper.Direction(10, 80);
                    o.SetLinearVelocity(direction * RandomHelper.Between(10, 25));
                    o.SetAngularVelocity(RandomHelper.Between(-20, 20));
                }
            }, 0);

            var isElapsedPlayEffect = ScriptHelper.WithIsElapsed(75);
            ScriptHelper.RunUntil(() =>
            {
                if (!isElapsedPlayEffect()) return;
                
                foreach (var o in thrownObjects.ToList())
                {
                    if (o.IsRemoved || o.GetLinearVelocity() == Vector2.Zero) thrownObjects.Remove(o);
                    else
                        Game.PlayEffect(EffectName.ChainsawSmoke, o.GetWorldPosition());
                }
            }, () => thrownObjects.Count == 0);
        }
    }
    class SlidePowerup : MeleeWpn
    {
        public SlidePowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Slide) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three) return;

            var arg = args.FirstOrDefault(x => x.IsPlayer);
            if (arg.HitObject == null) return;
            var enemy = Game.GetPlayer(arg.ObjectID);
            var hitDir = Owner.GetFaceDirection();

            // fall to the ground immediately, dont fly around, it feels slow compared to the slide
            enemy.SetLinearVelocity(Vector2.UnitY * -10);
            enemy.DealDamage(arg.HitDamage); // x2 damage
            var mod = enemy.GetModifiers();
            mod.ImpactDamageTakenModifier = 0.0001f;
            enemy.SetModifiers(mod);

            ScriptHelper.RunIf(() =>
            {
                var startPos = enemy.GetWorldPosition();
                var shouldStop = false;
                var maxSlideDistance = 110;
                var isElapsedPlayEffect = ScriptHelper.WithIsElapsed(1);
                Game.RunCommand("/settime 0.1");
                Action Stop = () =>
                {
                    Game.RunCommand("/settime 1");
                    BotManager.GetBot(enemy).ResetModifiers();
                    shouldStop = true;
                };

                ScriptHelper.RunUntil(() =>
                {
                    var position = enemy.GetWorldPosition();
                    var slideDistance = Vector2.Distance(startPos, position);
                    var velocity = MathHelper.Lerp(4, 2, Math.Max(0, slideDistance - maxSlideDistance) / 40);

                    if (enemy.IsRemoved || slideDistance > maxSlideDistance && velocity < 0.02f)
                    {
                        Stop(); return;
                    }

                    enemy.SetWorldPosition(position + Vector2.UnitX * hitDir * velocity);
                    enemy.SetLinearVelocity(Vector2.UnitX * hitDir * 15);
                    
                    if (!enemy.IsInMidAir && isElapsedPlayEffect())
                    {
                        Game.PlaySound("BulletHitFlesh", position);
                        Game.PlayEffect(EffectName.MeleeHitBlunt, position);
                    }

                    var enemyBox = enemy.GetAABB();
                    foreach (var o in Game.GetObjectsByArea(enemyBox))
                    {
                        if (ScriptHelper.IsStaticGround(o))
                        {
                            var hitStatic = hitDir == 1
                            ? MathExtension.Diff(enemyBox.Right, o.GetAABB().Left) < 1 : MathExtension.Diff(enemyBox.Left, o.GetAABB().Right) < 1;
                            if (hitStatic) { Stop(); return; }
                        }

                        if (!ScriptHelper.IsInteractiveObject(o) || Math.Sign(o.GetAABB().Center.X - enemyBox.Center.X) != hitDir) continue;
                        var direction = hitDir == -1 ? RandomHelper.Direction(135, 180) : RandomHelper.Direction(45, 90);

                        o.SetLinearVelocity(direction * RandomHelper.Between(10, 15));
                        o.SetAngularVelocity(RandomHelper.Between(-20, 20));
                    }
                }, () => shouldStop);
            }, () => enemy.IsLayingOnGround, 300);
        }
    }
    class SplittingPowerup : MeleeWpn
    {
        public override bool IsValidPowerup()
        {
            return IsSharpWeapon(Name);
        }

        public SplittingPowerup(IPlayer owner, WeaponItem name) : base(owner, name, MeleeWeaponPowerup.Splitting) { }

        public override void OnMeleeAction(PlayerMeleeHitArg[] args)
        {
            base.OnMeleeAction(args);

            if (Owner.IsDead || args.Length == 0 || CurrentMeleeAction != MeleeAction.Three) return;

            var arg = args.FirstOrDefault(x => x.IsPlayer);
            if (arg.HitObject == null) return;
            
            var twin1 = BotManager.GetBot(arg.ObjectID);
            if (twin1.Player.IsDead) return;

            var mod = twin1.Player.GetModifiers();
            if (mod.SizeModifier <= Size.Tiny) return;

            twin1.DisarmAll();
            var twin2 = BotManager.SpawnBot(twin1.Type, faction: twin1.Faction, team: twin1.Player.GetTeam(), ignoreFullSpawner: true, equipWeapon: false);

            twin2.Player.SetWorldPosition(twin1.Position);
            twin1.Decorate(twin2.Player);
            
            mod.SizeModifier = Size.Tiny;
            mod.MaxHealth /= 2;
            twin1.SetModifiers(mod, true);
            twin2.SetModifiers(mod, true);

            var profiles = MutantBot.SplitProfile(twin1.Player);
            twin1.Player.SetProfile(profiles[0]);
            twin2.Player.SetProfile(profiles[1]);

            twin1.Player.SetLinearVelocity(RandomVelocity(Owner));
            twin2.Player.SetLinearVelocity(RandomVelocity(Owner));
            twin1.Player.SetBotName("Mini " + twin1.Player.Name);
            twin2.Player.SetBotName("Mini " + twin2.Player.Name);

            ScriptHelper.Fall(twin1.Player);
            ScriptHelper.Fall(twin2.Player);

            Game.PlayEffect(EffectName.Gib, twin1.Position);
        }

        private Vector2 RandomVelocity(IPlayer p) { return new Vector2(RandomHelper.Between(6, 10) * p.GetFaceDirection(), RandomHelper.Between(4, 7)); }
    }
    enum BlackholeSize { Small, Big }

    class BlackholeProjectile : HoveringProjectile
    {
        private class PulledObjectInfo
        {
            public IObject Object;
            public IObjectPullJoint PullJoint;
            public float OriginalMass;
            public bool UnScrewed = false;
            public bool BlockedByWall = false;
        }

        private static List<Vector2> BlackholeLocations = new List<Vector2>();

        private float ActiveTime = 4000;
        public const float SuckRadius = 150;
        public const float PullRadius = 100;
        public const float EventHorizon = 50;
        public const float DestroyRadius = 25;

        private IObject m_blackhole;
        private IObjectRevoluteJoint m_blackholeRotor;

        private IObjectTargetObjectJoint m_magnetJoint;
        private Dictionary<int, PulledObjectInfo> m_pulledObjects = new Dictionary<int, PulledObjectInfo>();
        private enum Range { Center, EventHorizon, Level2, Level1, Outside, }

        private BlackholeSize m_size;
        public BlackholeSize Size
        {
            get { return m_size; }
            private set
            {
                m_size = value;
                if (value == BlackholeSize.Big)
                {
                    ExplodeRange = 50;
                    ExplodeRange2 = .5f;
                    ActiveTime = Game.IsEditorTest ? 10000 : 4000;
                }
                else
                {
                    ExplodeRange = 0;
                    ExplodeRange2 = 0;
                    ActiveTime = 2000;
                }
            }
        }

        public BlackholeProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Blackhole)
        {
            UpdateDelay = 0;
        }

        protected override bool OnProjectileCreated()
        {
            if (Instance.ProjectileItem == ProjectileItem.BAZOOKA
                || Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || Instance.ProjectileItem == ProjectileItem.SNIPER
                || Instance.ProjectileItem == ProjectileItem.BOW
                || Instance.ProjectileItem == ProjectileItem.FLAREGUN
                || Instance.ProjectileItem == ProjectileItem.MAGNUM)
            {
                Size = BlackholeSize.Big;
            }
            else
                Size = BlackholeSize.Small;
            return true;
        }

        protected override void OnHover()
        {
            base.OnHover();
            Instance.FlagForRemoval();

            // no blackhole too close with other blackholes
            foreach (var hole in BlackholeLocations)
            {
                if (ScriptHelper.GrowFromCenter(hole, DestroyRadius * 2).Contains(HoverPosition))
                {
                    Destroy();
                    return;
                }
            }
            BlackholeLocations.Add(HoverPosition);

            var noCollision = Constants.NoCollision;

            if (Size == BlackholeSize.Big)
            {
                Game.RunCommand("/settime .1");
                ScriptHelper.Timeout(() => Game.RunCommand("/settime 1"), 2000);
            }

            m_blackhole = Game.CreateObject("Blackhole00A", HoverPosition);
            m_blackhole.SetBodyType(BodyType.Dynamic);
            m_blackhole.SetCollisionFilter(noCollision);

            m_blackholeRotor = (IObjectRevoluteJoint)Game.CreateObject("RevoluteJoint", HoverPosition);
            m_blackholeRotor.SetTargetObjectA(m_blackhole);
            m_blackholeRotor.SetMotorEnabled(true);
            m_blackholeRotor.SetMotorSpeed(20);
            m_blackholeRotor.SetMaxMotorTorque(20);

            ScriptHelper.RunIn(() => Game.DrawCircle(HoverPosition, .5f, Color.Green), 10000);

            m_magnetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint", HoverPosition);
            m_magnetJoint.SetTargetObject(m_blackhole);
        }

        private Range GetPositionToCenter(IObject o)
        {
            if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, DestroyRadius))
            {
                return Range.Center;
            }
            else if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, EventHorizon))
            {
                return Range.EventHorizon;
            }
            else if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, PullRadius))
            {
                return Range.Level2;
            }
            else if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, SuckRadius))
            {
                return Range.Level1;
            }
            return Range.Outside;
        }

        private float m_updateDelay = 0f;
        private float m_update2Delay = 0f;
        protected override void UpdateHovering(float elapsed)
        {
            base.UpdateHovering(elapsed);
            DrawDebugging();

            if (HoverTime >= ActiveTime)
            {
                Destroy(); return;
            }

            if (ScriptHelper.IsElapsed(m_updateDelay, 30) && Size == BlackholeSize.Big)
            {
                m_updateDelay = Game.TotalElapsedGameTime;
                UpdateObjectsStatus();
            }

            if (ScriptHelper.IsElapsed(m_update2Delay, 15))
            {
                m_update2Delay = Game.TotalElapsedGameTime;
                UpdateEntities();
            }

            if (Size == BlackholeSize.Big)
                UpdatePulledObjects();
        }

        private void UpdateEntities()
        {
            var projectiles = Game.GetProjectiles()
                .Where(p => ScriptHelper.IntersectCircle(p.Position, HoverPosition, SuckRadius));
            foreach (var projectile in projectiles)
            {
                if (ScriptHelper.IntersectCircle(projectile.Position, HoverPosition, 10))
                {
                    projectile.FlagForRemoval();
                    continue;
                }
                var pf = Vector2.Normalize(HoverPosition - projectile.Position) * GetPullForce(projectile.Position);
                projectile.Direction = projectile.Direction + pf;
            }

            if (Size == BlackholeSize.Small) return;

            var filterArea = ScriptHelper.GrowFromCenter(HoverPosition, SuckRadius * 2);
            var fireNodes = Game.GetFireNodes(filterArea)
                .Where(p => ScriptHelper.IntersectCircle(p.Position, HoverPosition, SuckRadius));
            foreach (var fireNode in fireNodes)
            {
                if (fireNode.AttachedToObjectID != 0 && Game.GetObject(fireNode.AttachedToObjectID).Name == "ItemDebrisFlamethrower01")
                    continue;

                // cannot move fireNode, create object with fireNode and move it instead
                var position = fireNode.Position;
                var objectIgnited = Game.CreateObject("ItemDebrisFlamethrower01", position);

                objectIgnited.SetLinearVelocity(fireNode.Velocity);
                objectIgnited.SetMaxFire();

                Game.EndFireNode(fireNode.InstanceID);
            }
        }

        private void UpdateObjectsStatus()
        {
            var filterArea = ScriptHelper.GrowFromCenter(HoverPosition, SuckRadius * 2);
            var objectsInArea = Game.GetObjectsByArea(filterArea)
                .Where(ScriptHelper.IsInteractiveObject);

            var objectInSuckRadius = objectsInArea
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), HoverPosition, SuckRadius)).ToList();

            // closest objects to HoverPosition first
            objectInSuckRadius
                .Sort((a, b) => (int)Vector2.Distance(a.GetWorldPosition(), HoverPosition) - (int)Vector2.Distance(b.GetWorldPosition(), HoverPosition));

            foreach (var o in objectInSuckRadius)
            {
                if (m_pulledObjects.Count >= 20) break; // lag :(
                if (!m_pulledObjects.ContainsKey(o.UniqueID))
                {
                    var objsBlockedByWall = m_pulledObjects.Values.Where(x => x.BlockedByWall).Count();
                    var isBlockedByWall = Game.RayCast(HoverPosition, o.GetWorldPosition(), new RayCastInput()
                    {
                        BlockExplosions = RayCastFilterMode.True,
                        ClosestHitOnly = true,
                    }).Where(x => x.HitObject != null).Any();

                    if (isBlockedByWall && objsBlockedByWall <= 10)
                        Pull(o, isBlockedByWall);
                    if (!isBlockedByWall && m_pulledObjects.Count - objsBlockedByWall <= 10)
                        Pull(o, isBlockedByWall);
                }
            }

            var objectsInDestroyedRadius = objectsInArea
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), HoverPosition, DestroyRadius));

            foreach (var o in objectsInDestroyedRadius)
            {
                PulledObjectInfo info;
                if (m_pulledObjects.TryGetValue(o.UniqueID, out info))
                {
                    var smallObject = o.GetAABB().Width * o.GetAABB().Height <= 100;

                    o.DealDamage(1f);
                    if (smallObject || o.GetHealth() == 0)
                        o.Destroy();
                }
            }
        }

        private void UpdatePulledObjects()
        {
            foreach (var kv in m_pulledObjects.ToList())
            {
                var objectInfo = kv.Value;
                var o = objectInfo.Object;
                var pos = GetPositionToCenter(o);

                objectInfo.PullJoint.SetForce(GetPullForce(o));

                // TODO: fix this bug where the lamp doesn't get removed at 0 health
                // https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&p=24809#p24809
                if (o.GetHealth() == 0 && o.Name == "Lamp00")
                {
                    o.Destroy();
                    o.Remove();
                }

                if (pos == Range.Outside || o.IsRemoved)
                {
                    m_pulledObjects.Remove(kv.Key);
                    StopPulling(objectInfo);
                }

                var player = ScriptHelper.AsPlayer(o);
                if (player != null)
                {
                    if (pos <= Range.EventHorizon)
                    {
                        Game.DrawArea(player.GetAABB(), Color.Red);
                        if (!player.IsFalling) ScriptHelper.Fall(player);
                    }
                    else if (pos == Range.Level2)
                    {
                        Game.DrawArea(player.GetAABB(), Color.Yellow);
                        if (!player.IsStaggering)
                            ScriptHelper.Command(player, PlayerCommandType.Stagger, GetStaggerDirection(player));
                    }

                    if (pos <= Range.Level1)
                    {
                        if (player.IsOnGround || player.IsLayingOnGround)
                        {
                            var playerPos = player.GetWorldPosition();
                            var newPos = playerPos + Vector2.UnitX * 1 * -Math.Sign(playerPos.X - HoverPosition.X);
                            player.SetWorldPosition(newPos);
                        }
                    }
                }
                else
                {
                    if (pos <= Range.EventHorizon)
                    {
                        if (!objectInfo.UnScrewed)
                        {
                            ScriptHelper.Unscrew(o);
                            objectInfo.UnScrewed = true;
                        }
                    }
                    else if (pos == Range.Level2)
                    {
                        if (!objectInfo.UnScrewed && RandomHelper.Percentage(0.01f))
                        {
                            ScriptHelper.Unscrew(o);
                            objectInfo.UnScrewed = true;
                        }
                    }
                }
            }
        }

        private void DrawDebugging()
        {
            if (Game.IsEditorTest)
            {
                Game.DrawCircle(HoverPosition, SuckRadius, Color.Cyan);
                Game.DrawCircle(HoverPosition, PullRadius, Color.Red);
                Game.DrawCircle(HoverPosition, EventHorizon, Color.Red);
                Game.DrawCircle(HoverPosition, DestroyRadius, Color.Red);
                Game.DrawArea(m_blackhole.GetAABB(), Color.Blue);
                Game.DrawArea(m_magnetJoint.GetAABB(), Color.Magenta);
                foreach (var o in m_pulledObjects.Values) Game.DrawArea(o.Object.GetAABB(), Color.Yellow);
            }
        }

        private float GetPullForce(Vector2 position)
        {
            return .05f * 1 / (float)Math.Pow(Vector2.Distance(position, HoverPosition) / SuckRadius, 1.5);
        }

        private float GetPullForce(IObject o)
        {
            var pullForce = ScriptHelper.IsPlayer(o) ? .1f : .05f;
            return pullForce * 1 /
                (float)Math.Pow(Vector2.Distance(o.GetWorldPosition(), HoverPosition) / SuckRadius, 1.5);
        }

        private FaceDirection GetStaggerDirection(IPlayer player)
        {
            return player.GetWorldPosition().X > HoverPosition.X ? FaceDirection.Right : FaceDirection.Left;
        }

        private void Pull(IObject o, bool isBlockedByWall)
        {
            var player = ScriptHelper.AsPlayer(o);

            if (player != null)
                ScriptHelper.Command(player, PlayerCommandType.Stagger, GetStaggerDirection(player), 20);

            var pullJoint = (IObjectPullJoint)Game.CreateObject("PullJoint");
            var originalMass = o.GetMass();

            if (o.GetBodyType() == BodyType.Static) o.SetBodyType(BodyType.Dynamic);
            o.SetMass(.004f);

            pullJoint.SetWorldPosition(o.GetWorldPosition());
            pullJoint.SetForce(GetPullForce(o));
            pullJoint.SetForcePerDistance(0);
            //if (Game.IsEditorTest) pullJoint.SetLineVisual(LineVisual.DJRope);

            pullJoint.SetTargetObject(o);
            pullJoint.SetTargetObjectJoint(m_magnetJoint);

            m_pulledObjects.Add(o.UniqueID, new PulledObjectInfo()
            {
                Object = o,
                OriginalMass = originalMass,
                PullJoint = pullJoint,
                BlockedByWall = isBlockedByWall,
            });
        }

        protected override void Destroy()
        {
            base.Destroy();
            BlackholeLocations.Remove(HoverPosition);

            if (m_blackhole != null) m_blackhole.Remove();
            if (m_blackholeRotor != null) m_blackholeRotor.Remove();
            if (m_magnetJoint != null) m_magnetJoint.Remove();

            foreach (var objectInfo in m_pulledObjects.Values)
            {
                StopPulling(objectInfo);
            }
        }

        private void StopPulling(PulledObjectInfo objectInfo)
        {
            objectInfo.Object.SetMass(objectInfo.OriginalMass);
            objectInfo.PullJoint.Remove();

            var player = ScriptHelper.AsPlayer(objectInfo.Object);
            if (player != null)
            {
                player.SetInputEnabled(true);
            }
        }
    }
    class BlastBullet : Projectile
    {
        public BlastBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Blast) { }

        protected override bool OnProjectileCreated()
        {
            if (IsExplosiveProjectile)
                return false;

            Instance.DamageDealtModifier = IsShotgunShell ? .35f : .5f;
            return true;
        }

        private IObject GetObject(ProjectileHitArgs args)
        {
            var player = Game.GetPlayer(args.HitObjectID);
            if (player != null)
            {
                if (!player.IsFalling) ScriptHelper.Fall(player);
                return player;
            }
            else
            {
                return Game.GetObject(args.HitObjectID);
            }
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            var hitObject = GetObject(args);

            if (!args.IsPlayer && hitObject.GetBodyType() == BodyType.Static) return;

            var angles = new float[] { MathExtension.ToRadians(35), MathExtension.ToRadians(70) };
            var angle = MathExtension.NormalizeAngle(ScriptHelper.GetAngle(Instance.Direction));
            if (angle > MathHelper.PIOver2 && angle <= MathExtension.PI_3Over2)
                angles = ScriptHelper.Flip(angles, FlipDirection.Horizontal);

            var position = Instance.Position;
            var pushDirection = Instance.Direction;
            var blastDirection = RandomHelper.Direction(angles[0], angles[1], true);
            var modifiers = GetForceModifier();
            var velocity = hitObject.GetLinearVelocity();

            if (args.IsPlayer)
            {
                velocity += Instance.Direction * 4 + blastDirection * 14 * modifiers;
                hitObject.SetLinearVelocity(MathExtension.ClampMagnitude(velocity, 15));
            }
            else
            {
                var mass = hitObject.GetMass();
                var magnitude = MathHelper.Clamp(1f / mass / 7f, 3, 30) * modifiers;
                velocity += Instance.Direction * magnitude + blastDirection * magnitude / 10;
                hitObject.SetLinearVelocity(velocity);
                //ScriptHelper.LogDebug(hitObject.Name, mass, magnitude);
            }

            //if (Game.IsEditorTest)
            //{
            //    ScriptHelper.RunIn(() =>
            //    {
            //        if (args.IsPlayer)
            //            Game.DrawText(modifiers.ToString(), position);
            //        Game.DrawLine(position, position + pushDirection * 3);
            //        Game.DrawLine(position, position + upDirection * 3, Color.Yellow);
            //        Game.DrawLine(position, position + velocity, Color.Green);
            //    }, 2000);
            //}
        }

        private float GetForceModifier()
        {
            // (0,1.25) (70,1) (140, 0.75)
            var ammoModifier = IsShotgunShell ? .3f : 1f;
            var modifier = ammoModifier * (1.25f - 0.00357143f * Instance.TotalDistanceTraveled);
            return Math.Max(modifier, ammoModifier * .5f);
        }
    }
    class Bow : Projectile
    {
        public Bow(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Bow) { }

        protected override bool OnProjectileCreated()
        {
            return Instance.ProjectileItem == ProjectileItem.BOW;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (!args.RemoveFlag) return;

            var arrow = Game.CreateObject("BowArrow", Instance.Position, ScriptHelper.GetAngle(Instance.Direction));
            var hitObject = Game.GetObject(args.HitObjectID);
            if (hitObject == null) return;

            var arrows = Game.GetObjectsByArea(arrow.GetAABB())
                .Where(o => ScriptHelper.IsDynamicG2(o) && o.UniqueID != arrow.UniqueID && o.Name == "BowArrow");
            foreach (var a in arrows)
            {
                a.Remove();
                var debris = RandomHelper.Boolean();
                Game.CreateObject(debris ? "BowArrowDebris1" : "BowArrowDebris3", a.GetWorldPosition(), a.GetAngle());
                Game.CreateObject(debris ? "BowArrowDebris2" : "BowArrowDebris4", a.GetWorldPosition(), a.GetAngle());
            }

            var player = ScriptHelper.AsPlayer(hitObject);
            if (player == null)
            {
                var cf = arrow.GetCollisionFilter();
                cf.CategoryBits = CategoryBits.DynamicG1;
                arrow.SetCollisionFilter(cf);
                ScriptHelper.Weld(hitObject, arrow);
                return;
            }
            else
                ScriptHelper.WeldPlayer(player, arrow);

            var bot = BotManager.GetBot(player);
            if (bot != Bot.None && !bot.Player.IsDead)
            {
                var mod = bot.Player.GetModifiers();
                mod.EnergyConsumptionModifier += mod.EnergyConsumptionModifier * 0.2f;
                bot.SetModifiers(mod, true);
            }
        }
    }
    class DelayGun : RangeWpn
    {
        public List<IObject> _slowmoProjectiles = new List<IObject>();

        public override bool IsValidPowerup()
        {
            return !Projectile.IsSlowProjectile(Mapper.GetProjectile(Name));
        }

        public DelayGun(IPlayer owner, WeaponItem name) : base(owner, name, RangedWeaponPowerup.Delay) { }

        private bool _isManualAiming = false;
        private bool _isHipFiring = false;
        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (_isManualAiming && !Owner.IsManualAiming || !IsEquipping || _isHipFiring && !Owner.IsHipFiring)
                AccelerateProjectiles();

            _isManualAiming = Owner.IsManualAiming;
            _isHipFiring = Owner.IsHipFiring;

            foreach (var p in _slowmoProjectiles.ToList())
            {
                p.SetLinearVelocity(Vector2.Zero);
                p.SetWorldPosition(p.GetWorldPosition() + ScriptHelper.GetDirection(p.GetAngle()) * .1f);
                if (p.IsRemoved) _slowmoProjectiles.Remove(p);
            }
        }

        private void AccelerateProjectiles()
        {
            if (_slowmoProjectiles.Count == 0) return;
            foreach (var proj in _slowmoProjectiles)
            {
                proj.Remove();
                var proj2 = Game.SpawnProjectile(Mapper.GetProjectile(Name), proj.GetWorldPosition(), ScriptHelper.GetDirection(proj.GetAngle()));
                proj2.Velocity /= 1.5f;
            }
            _slowmoProjectiles.Clear();
        }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            base.OnProjectileCreated(projectile);

            projectile.FlagForRemoval();
            var bullet = Game.CreateObject("BulletCommonSlowmo", projectile.Position);
            bullet.SetAngle(ScriptHelper.GetAngle(projectile.Direction));
            bullet.SetMass(0);
            _slowmoProjectiles.Add(bullet);
        }
    }
    class DormantProjectile : CustomProjectile
    {
        protected float ExplodeRange = 60;
        protected float ExplodeRange2 = 10;
        protected float MinDistanceBeforeHover = 100;

        public DormantProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Dormant) { }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            if (projectile.ProjectileItem != ProjectileItem.GRENADE_LAUNCHER)
                return null;

            var owner = Game.GetPlayer(InitialOwnerPlayerID);
            return CreateCustomProjectile(projectile, "BazookaRocket", projectile.Velocity / 20, owner.GetFaceDirection() * RandomHelper.Between(-50, -70));
        }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (IsDormant() && !Instance.IsRemoved)
            {
                var direction = ScriptHelper.GetDirection(Instance.GetAngle());
                var proj = Game.SpawnProjectile(ProjectileItem.BAZOOKA, Instance.GetWorldPosition(), direction);
                var bounceCount = 0;
                proj.PowerupBounceActive = true;

                ScriptHelper.RunUntil(() =>
                {
                    if (proj.BounceCount > 0)
                    {
                        proj.BounceCount = 0;
                        bounceCount++;
                    }
                    if (bounceCount == 2)
                    {
                        Game.TriggerExplosion(proj.Position);
                        proj.FlagForRemoval();
                    }
                }, () => proj.IsRemoved);

                Instance.Remove();
            }
        }

        private bool IsDormant()
        {
            return Instance.GetLinearVelocity() == Vector2.Zero;
        }
    }
    class DoublePenetrationProjectile : DoubleTroubleProjectile
    {
        public DoublePenetrationProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.DoublePenetration) { }

        public override bool IsRemoved { get { return Instance.IsRemoved && Instance2.IsRemoved; } }

        private IProjectile Instance2 { get; set; }
        protected override bool OnProjectileCreated()
        {
            var owner = Game.GetPlayer(InitialOwnerPlayerID);
            Instance2 = SpawnOppositeProjectile(owner, Instance) ?? Instance;
            Instance.PowerupBounceActive = true;
            Instance2.PowerupBounceActive = true;
            _initialDir1 = Instance.Direction;
            _initialDir2 = Instance2.Direction;
            return true;
        }

        private Vector2 _initialDir1;
        private Vector2 _initialDir2;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);
            if (Instance.BounceCount > 0)
                Instance.BounceCount = 0;
            if (Instance2.BounceCount > 0)
                Instance2.BounceCount = 0;
            // TODO: improve perf, hitting static tiles and play multiple effects seem to lag the game
            if (Instance.Direction != _initialDir1)
                Instance.Direction = _initialDir1;
            if (Instance2.Direction != _initialDir2)
                Instance2.Direction = _initialDir2;
        }
    }
    class DoubleTroubleProjectile : Projectile
    {
        public DoubleTroubleProjectile(IProjectile projectile) : this(projectile, RangedWeaponPowerup.DoubleTrouble) { }
        public DoubleTroubleProjectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup) { }

        public override bool IsRemoved { get { return true; } }

        protected override bool OnProjectileCreated()
        {
            var owner = Game.GetPlayer(InitialOwnerPlayerID);
            SpawnOppositeProjectile(owner, Instance);

            return true;
        }

        public static IProjectile SpawnOppositeProjectile(IPlayer owner, IProjectile projectile)
        {
            Vector2 position, direction;

            if (!owner.GetWeaponMuzzleInfo(out position, out direction))
                return null;

            var oppositeDir = Vector2.Negate(projectile.Direction);
            var oBox = owner.GetAABB();
            var offset = Vector2.Distance(oBox.Center, position) / 2f;
            var start = position + oppositeDir * offset;
            var end = start + oppositeDir * (oBox.Height + 3);
            var result = Game.RayCast(end, start, new RayCastInput()
            {
                FilterOnMaskBits = true,
                MaskBits = CategoryBits.Player,
                ClosestHitOnly = true,
                IncludeOverlap = true,
            }).FirstOrDefault(r => r.HitObject.UniqueID == owner.UniqueID);

            if (result.HitObject == null) return null;

            var spawnPosition = result.Position + oppositeDir * 3;
            var projectileItem = projectile.ProjectileItem;

            return Game.SpawnProjectile(projectileItem, spawnPosition, oppositeDir, ProjectilePowerup.Bouncing);
        }
    }
    class FatigueProjectile : Projectile
    {
        class FatigueInfo
        {
            public IPlayer Player;
            public int ProjectileCount;
            public bool IsExhausted;
        }

        private static Dictionary<int, FatigueInfo> FatigueInfos = new Dictionary<int, FatigueInfo>();
        static FatigueProjectile()
        {
            Events.PlayerDeathCallback.Start((p, _) => FatigueInfos.Remove(p.UniqueID));
            Events.UpdateCallback.Start(_ =>
            {
                foreach (var kv in FatigueInfos)
                {
                    var fatigueInfo = kv.Value;
                    if (fatigueInfo.IsExhausted)
                    {
                        var player = fatigueInfo.Player;
                        if (player.IsInMidAir && !player.IsFalling)
                        {
                            var velocity = player.GetLinearVelocity();
                            if (velocity.Y > 0)
                                player.SetWorldPosition(player.GetWorldPosition() - Vector2.UnitY * .75f);
                        }
                    }
                }

                if (Game.IsEditorTest)
                {
                    foreach (var p in Game.GetPlayers())
                    {
                        if (!FatigueInfos.ContainsKey(p.UniqueID)) continue;
                        var debugText = ScriptHelper.ToDisplayString(
                            FatigueInfos[p.UniqueID].ProjectileCount,
                            FatigueInfos[p.UniqueID].IsExhausted,
                            p.GetModifiers().RunSpeedModifier);
                        Game.DrawText(debugText, p.GetWorldPosition());
                    }
                }
            });
        }

        public override bool IsRemoved { get; protected set; }
        public float FatigueCritChance { get; private set; }
        public float FatigueModifier { get; private set; }

        public FatigueProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Fatigue)
        {
        }

        protected override bool OnProjectileCreated()
        {
            FatigueCritChance = Math.Max(Instance.GetProperties().CritChance, .1f);
            FatigueModifier = 1;

            if (IsExplosiveProjectile)
            {
                FatigueCritChance = .5f;
                FatigueModifier = 3;
            }
            else if (IsShotgunShell)
            {
                FatigueModifier /= ProjectilesPerShell;
                FatigueCritChance /= ProjectilesPerShell;
            }

            return true;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            IsRemoved = true;
            base.OnProjectileHit(args);

            if (!args.IsPlayer || IsExplosiveProjectile) return;

            Fatigue(args.HitObjectID);
        }

        protected override void OnProjectileExploded(IEnumerable<IPlayer> playersInRadius)
        {
            base.OnProjectileExploded(playersInRadius);
            foreach (var player in playersInRadius)
                Fatigue(player.UniqueID);
        }

        private void Fatigue(int playerID)
        {
            var player = Game.GetPlayer(playerID);
            IsRemoved = player == null || player.IsDead;
            if (IsRemoved) return;

            if (!FatigueInfos.ContainsKey(playerID))
            {
                FatigueInfos[playerID] = new FatigueInfo()
                {
                    Player = player,
                    ProjectileCount = 0,
                    IsExhausted = false,
                };
            }
            var fatigueInfo = FatigueInfos[playerID];
            var bot = BotManager.GetBot(player);
            var modifiers = player.GetModifiers();
            var isCrit = RandomHelper.Percentage(FatigueCritChance);

            if (isCrit)
            {
                fatigueInfo.IsExhausted = true;
                modifiers.EnergyRechargeModifier = 0f;
                Game.PlayEffect(EffectName.CustomFloatText, bot.Position, "exhausted");
                FatigueModifier *= 10;
            }

            modifiers.RunSpeedModifier -= .05f * FatigueModifier;
            modifiers.SprintSpeedModifier -= .05f * FatigueModifier;
            modifiers.EnergyConsumptionModifier += .2f * FatigueModifier;
            modifiers.MeleeForceModifier -= .1f * FatigueModifier;
            modifiers.MeleeDamageDealtModifier -= .1f * FatigueModifier;

            bot.SetModifiers(modifiers);
            fatigueInfo.ProjectileCount++;

            ScriptHelper.Timeout(() =>
            {
                fatigueInfo.ProjectileCount--;
                IsRemoved = true;

                if (fatigueInfo.ProjectileCount == 0)
                {
                    fatigueInfo.IsExhausted = false;
                    bot.ResetModifiers();
                    bot.ResetBotBehaviorSet();
                }
            }, 6000);
        }
    }
    class FireProjectile : Projectile
    {
        public FireProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Fire)
        {
            Instance.PowerupFireActive = true;
            Instance.DamageDealtModifier = 0.01f;
        }
    }
    class GaussGun : RangeWpn
    {
        public float ChargeModifier { get; private set; }

        public override float MaxRange { get { return Projectile.IsShotgun(Mapper.GetProjectile(Name)) ? 300 : float.MaxValue; } }
        public override bool IsValidPowerup()
        {
            return !Projectile.IsSlowProjectile(Mapper.GetProjectile(Name));
        }

        public GaussGun(IPlayer owner, WeaponItem name) : base(owner, name, RangedWeaponPowerup.Gauss) { }

        private bool m_prevManualAiming = false;
        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (!IsEquipping) return;

            if (Owner.IsManualAiming && !m_prevManualAiming)
            {
                m_prevManualAiming = true;
            }
            if (!Owner.IsManualAiming && m_prevManualAiming)
            {
                ChargeModifier = 0f;
                m_prevManualAiming = false;
            }

            if (Owner.IsManualAiming)
            {
                if (ChargeModifier <= 5000)
                    ChargeModifier += 1 * elapsed;
                Game.DrawText(ChargeModifier.ToString(), Owner.GetWorldPosition());
            }
        }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            base.OnProjectileCreated(projectile);

            var start = projectile.Position;
            var end = start + projectile.Direction * Math.Min(MaxRange, ScriptHelper.GetDistanceToEdge(start, projectile.Direction));
            var maxHitCount = Game.IsEditorTest ? 5000 : (int)(ChargeModifier / 1000 + 1);
            var results = Game.RayCast(start, end, new RayCastInput()
            {
                ProjectileHit = RayCastFilterMode.True,
                IncludeOverlap = true,
                ClosestHitOnly = maxHitCount == 1,
            }).Where(r => r.HitObject != null);
            var props = projectile.GetProperties();

            end = results.Count() == 0 ? end : results.Last().Position;

            var hitCount = 0;
            foreach (var result in results)
            {
                var hitObject = result.HitObject;
                var projectileItem = projectile.ProjectileItem;
                var direction = projectile.Direction;
                var powerup = ScriptHelper.GetPowerup(projectile);
                var cf = hitObject.GetCollisionFilter();

                Game.PlayEffect(EffectName.Electric, result.Position);
                Game.PlaySound("ElectricSparks", result.Position);

                if (cf.AbsorbProjectile)
                {
                    hitCount++;
                    if (cf.CategoryBits == CategoryBits.StaticGround) { end = result.Position; break; }
                }
                hitObject.DealDamage(result.IsPlayer ? props.PlayerDamage : props.ObjectDamage);
                if (hitCount >= maxHitCount) break;
            }

            var distance = Vector2.Distance(start, end);
            for (var i = 0f; i <= distance; i += 1.5f)
                Game.PlayEffect(EffectName.ItemGleam, start + projectile.Direction * i);

            projectile.FlagForRemoval();
        }
    }
    class GrapeshotProjectile : HoveringProjectile
    {
        public GrapeshotProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Grapeshot)
        {
            if (projectile.ProjectileItem == ProjectileItem.BAZOOKA
                || projectile.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || projectile.ProjectileItem == ProjectileItem.FLAREGUN
                || projectile.ProjectileItem == ProjectileItem.BOW
                || projectile.ProjectileItem == ProjectileItem.SNIPER)
                UpdateDelay = 0;
            else
                UpdateDelay = 4;

            _isElapsedEffect = ScriptHelper.WithIsElapsed(100, 300);
        }

        private Func<bool> _isElapsedEffect;

        private static List<IProjectile> _bouncyProjectiles = new List<IProjectile>();
        static GrapeshotProjectile()
        {
            Events.UpdateCallback.Start((e) =>
            {
                foreach (var projectile in _bouncyProjectiles.ToList())
                {
                    if (projectile.BounceCount >= 2) projectile.FlagForRemoval();
                    else
                    {
                        projectile.Velocity = new Vector2(projectile.Velocity.X, projectile.Velocity.Y - 15);
                    }
                }
            }, 10);
        }

        protected override void OnHover()
        {
            base.OnHover();
            
            Game.PlayEffect(EffectName.Smack, HoverPosition);
            
            if (Instance.ProjectileItem != ProjectileItem.GRENADE_LAUNCHER)
                Instance.FlagForRemoval();
        }

        protected override void UpdateHovering(float elapsed)
        {
            base.UpdateHovering(elapsed);

            if (HoverTime > 1500)
            {
                Destroy();
            }
            else
            {
                if (_isElapsedEffect()) Game.PlayEffect(EffectName.Electric, HoverPosition);
            }
        }

        protected override void Destroy()
        {
            base.Destroy();
            if (Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || Instance.ProjectileItem == ProjectileItem.BAZOOKA)
                Game.TriggerExplosion(HoverPosition);

            Game.PlaySound("Pistol", HoverPosition);

            var bouncyAmmos = IsShotgunShell ? RandomHelper.Percentage(.5f) ? 1 : 0 : 5;
            for (var i = 0; i < bouncyAmmos; i++)
            {
                var projectile = Game.SpawnProjectile(ProjectileItem.PISTOL, HoverPosition, RandomHelper.Direction(0, 360), ProjectilePowerup.Bouncing);
                projectile.Velocity /= 4;
                projectile.DamageDealtModifier = .3f;
                _bouncyProjectiles.Add(projectile);
            }
        }
    }
    class GravityGun : RangeWpn
    {
        public GravityGun(IPlayer owner, WeaponItem name, RangedWeaponPowerup powerup) : base(owner, name, powerup)
        {
            if (powerup == RangedWeaponPowerup.GravityDE)
                IsSupercharged = true;
            else if (powerup == RangedWeaponPowerup.Gravity)
                IsSupercharged = false;
            else
                throw new Exception("Unknown powerup for gravity gun: " + powerup);

            m_pullJoint = CreatePullJointObject();
        }

        public override float MaxRange { get { return 160; } }

        public bool IsSupercharged { get; private set; }
        public Area GetStabilizedZone()
        {
            return GetStabilizedZone(GetHoldPosition(true));
        }
        private Area GetStabilizedZone(Vector2 holdPosition)
        {
            return ScriptHelper.GrowFromCenter(holdPosition, 20);
        }

        private IObject m_invisibleMagnet;
        private IObjectTargetObjectJoint m_magnetJoint;

        private IObjectPullJoint m_pullJoint;

        private IObject m_distanceJointObject;
        private IObjectDistanceJoint m_distanceJoint;
        private IObjectTargetObjectJoint m_targetedObjectJoint;

        public IObject TargetedObject { get; private set; }

        public bool IsTargetedObjectStabilized { get; private set; }

        public Vector2 GetHoldPosition(bool useOffset)
        {
            var offset = 0f;

            if (TargetedObject != null && useOffset)
            {
                var hitbox = TargetedObject.GetAABB();
                var length = Math.Max(hitbox.Width, hitbox.Height);
                offset = length / 2f;
            }

            var muzzleInfo = GetMuzleInfo();

            return muzzleInfo.Position + muzzleInfo.Direction * (6 + offset);
        }

        private Vector2[] GetScanLine()
        {
            var holdPosition = GetHoldPosition(false);
            var end = holdPosition + Owner.AimVector * MaxRange;

            return new Vector2[] { holdPosition, end };
        }

        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (!Owner.IsManualAiming || !IsEquipping) return;

            var holdPosition = GetHoldPosition(true);
            m_invisibleMagnet.SetWorldPosition(holdPosition);
            // m_invisibleMagnet is a static object so the corresponding TargetObjectJoint need to be moved manually too
            m_magnetJoint.SetWorldPosition(holdPosition);

            TryStabilizeTargetedObject(holdPosition);

            if (Game.IsEditorTest)
            {
                var scanLine = GetScanLine();
                
                Game.DrawLine(scanLine[0], scanLine[1]);
                Game.DrawCircle(holdPosition, .5f, Color.Red);

                Game.DrawArea(m_pullJoint.GetAABB(), Color.Cyan);
                //Game.DrawCircle(m_magnetJoint.GetWorldPosition(), 5, Color.Magenta);
                //Game.DrawCircle(m_invisibleMagnet.GetWorldPosition(), 6, Color.Red);

                if (TargetedObject != null)
                    Game.DrawArea(TargetedObject.GetAABB(), Color.Blue);

                //if (m_distanceJointObject != null)
                //    Game.DrawArea(m_distanceJointObject.GetAABB(), Color.Green);

                var to = m_pullJoint.GetTargetObject();
                if (to != null)
                    Game.DrawArea(ScriptHelper.GrowFromCenter(to.GetAABB().Center, 30), Color.Yellow);
            }
        }

        protected override void OnStopManualAim()
        {
            StopStabilizingTargetedObject();
        }

        private void TryStabilizeTargetedObject(Vector2 holdPosition)
        {
            if (TargetedObject == null) return;

            var results = RayCastTargetedObject(false);
            var stabilizedZone = GetStabilizedZone(holdPosition);

            Game.DrawArea(stabilizedZone, Color.Green);

            var targetedObjectFound = false;
            var targetHitbox = TargetedObject.GetAABB();

            if (stabilizedZone.Intersects(targetHitbox))
                targetedObjectFound = true;

            foreach (var result in results)
            {
                if (result.HitObject == null) continue;

                if (result.HitObject.UniqueID == TargetedObject.UniqueID)
                {
                    targetedObjectFound = true;

                    if (stabilizedZone.Intersects(targetHitbox) && !IsTargetedObjectStabilized)
                        StabilizeTargetedObject();
                    break;
                }
            }

            if (!targetedObjectFound)
            {
                StopStabilizingTargetedObject();
            }
            else
            {
                var player = ScriptHelper.AsPlayer(TargetedObject);
                if (player != null && !player.IsFalling) ScriptHelper.Fall(player);
            }
        }

        private void StopStabilizingTargetedObject()
        {
            if (m_distanceJointObject != null)
            {
                // Markers to make target object hovered
                m_distanceJointObject.Remove();
                m_distanceJoint.Remove();
                m_targetedObjectJoint.Remove();
            }
            // Markers to pull the target object
            if (m_magnetJoint != null)
            {
                m_magnetJoint.Remove();
                m_invisibleMagnet.Remove();
            }

            var player = ScriptHelper.AsPlayer(TargetedObject);
            if (player != null)
                player.SetInputEnabled(true);

            m_pullJoint.SetTargetObject(null);

            if (TargetedObject != null)
            {
                if (Owner.IsBot)
                    TargetedObject.SetCollisionFilter(m_oldCollisionFilter);
                if (TargetedObject.GetCollisionFilter().CategoryBits == CategoryBits.DynamicG2)
                    TargetedObject.TrackAsMissile(true); // must be called after updating CollisionFilter
                TargetedObject.SetMass(m_oldMass);
                TargetedObject = null;
            }
            IsTargetedObjectStabilized = false;
        }

        private void StabilizeTargetedObject()
        {
            TargetedObject.SetLinearVelocity(Vector2.Zero);

            m_distanceJointObject = Game.CreateObject("InvisibleBlockSmall");
            m_distanceJointObject.SetBodyType(BodyType.Dynamic);

            m_distanceJoint = (IObjectDistanceJoint)Game.CreateObject("DistanceJoint");
            m_distanceJoint.SetLineVisual(LineVisual.None);
            m_distanceJoint.SetLengthType(DistanceJointLengthType.Fixed);

            m_targetedObjectJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint");

            var targetedObjPosition = TargetedObject.GetAABB().Center;
            m_distanceJointObject.SetWorldPosition(targetedObjPosition);
            TargetedObject.SetWorldPosition(targetedObjPosition);
            m_pullJoint.SetWorldPosition(targetedObjPosition);
            m_distanceJoint.SetWorldPosition(targetedObjPosition);
            // if DistanceJoint and TargetObjectJoint is at the same position, weird things may happen
            // uncomment the part below to stop it
            m_targetedObjectJoint.SetWorldPosition(m_distanceJointObject.GetWorldPosition()/* - Vector2.UnitY*/);

            m_pullJoint.SetTargetObject(m_distanceJointObject);
            m_distanceJoint.SetTargetObject(m_distanceJointObject);
            m_distanceJoint.SetTargetObjectJoint(m_targetedObjectJoint);
            m_targetedObjectJoint.SetTargetObject(TargetedObject);
            m_pullJoint.SetForce(15);

            IsTargetedObjectStabilized = true;
        }

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            if (!Owner.IsManualAiming)
                return;

            foreach (var keyInfo in keyInfos)
            {
                if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT)
                {
                    PickupObject();
                }
            }
        }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            // Remove projectile completely since gravity gun only use objects laying around the map as ammunation
            projectile.FlagForRemoval();

            // Cannot use ia 1 because we only want this particular gun to have indefinite ammo
            if (BotManager.GetBot(Owner).CurrentTotalAmmo == 0)
            {
                if (Type == WeaponItemType.Rifle)
                    Owner.SetCurrentPrimaryWeaponAmmo(Owner.CurrentPrimaryWeapon.MaxTotalAmmo - 1);
                if (Type == WeaponItemType.Handgun)
                    Owner.SetCurrentSecondaryWeaponAmmo(Owner.CurrentSecondaryWeapon.MaxTotalAmmo - 1);
            }

            Release();
        }

        // List of objects that are in dynamic collision group but not really interact with other dynamic objects (try for yourself)
        public static readonly HashSet<string> Blacklist = new HashSet<string>()
        {
            "Lamp00",
        };
        private IEnumerable<RayCastResult> RayCastTargetedObject(bool isSearching)
        {
            var scanLine = GetScanLine();
            var rcInput = new RayCastInput()
            {
                FilterOnMaskBits = true,
                MaskBits = (ushort)(IsSupercharged ? CategoryBits.Dynamic + CategoryBits.Player : CategoryBits.Dynamic),
                ClosestHitOnly = isSearching,
            };
            var results = Game.RayCast(scanLine[0], scanLine[1], rcInput);

            foreach (var result in results)
            {
                if (result.HitObject == null || Blacklist.Contains(result.HitObject.Name))
                    continue;

                yield return result;

                if (isSearching) break;
            }
        }

        private IObjectPullJoint CreatePullJointObject()
        {
            var holdPosition = GetHoldPosition(true);

            m_invisibleMagnet = Game.CreateObject("InvisibleBlockSmall", holdPosition);
            m_invisibleMagnet.SetBodyType(BodyType.Static);
            m_invisibleMagnet.SetCollisionFilter(Constants.NoCollision);

            m_magnetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint", holdPosition);
            m_magnetJoint.SetTargetObject(m_invisibleMagnet);

            var pullJoint = (IObjectPullJoint)Game.CreateObject("PullJoint");

            if (TargetedObject != null)
            {
                TargetedObject.SetMass(.004f);
                pullJoint.SetWorldPosition(TargetedObject.GetWorldPosition());
                pullJoint.SetForce(ScriptHelper.IsPlayer(TargetedObject) ? 15 : 4); // IPlayer doesn't have mass, maybe a bit heavier than normal
                pullJoint.SetForcePerDistance(0);
            }

            pullJoint.SetTargetObject(TargetedObject);
            pullJoint.SetTargetObjectJoint(m_magnetJoint);

            return pullJoint;
        }

        private void Command(IPlayer player, PlayerCommandType CommandType)
        {
            if (player == null) return;
            player.SetInputEnabled(false);
            player.AddCommand(new PlayerCommand(CommandType));
        }

        private CollisionFilter m_oldCollisionFilter;
        private float m_oldMass;
        public bool PickupObject()
        {
            if (TargetedObject == null)
            {
                var results = RayCastTargetedObject(true);

                if (results.Count() > 0)
                {
                    var result = results.First();
                    TargetedObject = result.HitObject;
                    m_oldMass = TargetedObject.GetMass();

                    // if is player, make them staggering
                    if (result.IsPlayer)
                    {
                        Command(ScriptHelper.AsPlayer(TargetedObject), PlayerCommandType.StaggerInfinite);
                    }

                    // destroy Joints so hanging stuff can be pulled
                    ScriptHelper.Unscrew(TargetedObject);

                    // some objects that are in dynamic collision group but is static (SurveillanceCamera)
                    if (TargetedObject.GetBodyType() == BodyType.Static)
                        TargetedObject.SetBodyType(BodyType.Dynamic);

                    m_pullJoint.Remove();
                    m_pullJoint = CreatePullJointObject();

                    // The AI when using GravityGun is not very good so I give the bots a little edge advantage
                    if (Owner.IsBot)
                    {
                        m_oldCollisionFilter = TargetedObject.GetCollisionFilter();
                        var noStaticCollision = TargetedObject.GetCollisionFilter();
                        // https://www.mythologicinteractiveforums.com/viewtopic.php?t=1012
                        noStaticCollision.CategoryBits = 0x1010; // marker or something
                        noStaticCollision.MaskBits = (ushort)(noStaticCollision.MaskBits & 0x11);
                        TargetedObject.SetCollisionFilter(noStaticCollision);
                    }
                    return true;
                }
            }
            return false;
        }

        public override void Remove()
        {
            base.Remove();
            StopStabilizingTargetedObject();
        }

        private void Release()
        {
            if (TargetedObject == null)
            {
                var results = RayCastTargetedObject(true);
                if (results.Count() > 0)
                {
                    var result = results.First();
                    TargetedObject = result.HitObject;
                    if (result.IsPlayer) ScriptHelper.Fall(ScriptHelper.AsPlayer(result.HitObject));
                }
            }

            if (TargetedObject != null)
            {
                var velocity = Owner.AimVector * 40;

                TargetedObject.SetLinearVelocity(velocity);
                StopStabilizingTargetedObject();
            }
        }
    }
    class HeliumProjectile : Projectile
    {
        private class Info
        {
            public Info(IPlayer player)
            {
                Player = player;
                var magnetPosition = GetMagnetPosition();

                PullJoint = (IObjectPullJoint)Game.CreateObject("PullJoint");
                Magnet = Game.CreateObject("InvisibleBlockSmall");
                MagnetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint");

                Magnet.SetCollisionFilter(Constants.NoCollision);
                Magnet.SetWorldPosition(magnetPosition);
                MagnetJoint.SetWorldPosition(magnetPosition);
                MagnetJoint.SetTargetObject(Magnet);

                PullJoint.SetWorldPosition(Player.GetWorldPosition());
                PullJoint.SetTargetObject(Player);
                PullJoint.SetTargetObjectJoint(MagnetJoint);
                PullJoint.SetForce(0);
            }

            private Vector2 GetMagnetPosition() { return Player.GetWorldPosition() + Vector2.UnitY * 50; }

            private List<KeyValuePair<float, float>> m_deflateTimes = new List<KeyValuePair<float, float>>();
            private float m_updateDelay = 0f;
            private bool _isFalling = false;
            private Vector2 m_oldLinearVelocity = Vector2.Zero;
            public void Update()
            {
                if (ScriptHelper.IsElapsed(m_updateDelay, 250))
                {
                    m_updateDelay = Game.TotalElapsedGameTime;
                    var magnetPosition = GetMagnetPosition();
                    Magnet.SetWorldPosition(magnetPosition);
                    MagnetJoint.SetWorldPosition(magnetPosition);
                    PullJoint.SetForce(InflatedModifier);
                    if (!Player.IsFalling && RandomHelper.Percentage(InflatedModifier))
                        ScriptHelper.Fall(Player);

                    if (m_deflateTimes.Any())
                    {
                        var deflateInfo = m_deflateTimes.First();
                        if (Game.TotalElapsedGameTime >= deflateInfo.Key)
                        {
                            Deflate(deflateInfo.Value);
                            m_deflateTimes.RemoveAt(0);
                        }
                    }
                }

                var velocity = Player.GetLinearVelocity();

                if (!_isFalling && Player.IsFalling)
                {
                    var velocityDiff = MathExtension.Diff(velocity.Length(), m_oldLinearVelocity.Length());

                    //ScriptHelper.RunIn(() => Game.DrawText(velocityDiff.ToString(),
                        //Player.GetWorldPosition() + Vector2.UnitY * 15), 1000);
                    if (velocityDiff >= 4)
                        Player.SetLinearVelocity(velocity + Vector2.Normalize(velocity) * InflatedModifier * 70);
                }

                _isFalling = Player.IsFalling;
                m_oldLinearVelocity = velocity;
            }

            public void Inflate(float modifier)
            {
                var prevDeflateTime = m_deflateTimes.Any() ? m_deflateTimes.Last().Key : Game.TotalElapsedGameTime;
                prevDeflateTime = Math.Max(prevDeflateTime, Game.TotalElapsedGameTime);
                m_deflateTimes.Add(new KeyValuePair<float, float>(prevDeflateTime + 10000, modifier));
                ScriptHelper.LogDebug(modifier);
                InflatedModifier += .0125f * modifier; // .2f is no-return value (~16 shots)

                var mod = Player.GetModifiers();
                mod.SizeModifier += 0.015f * modifier;
                mod.ImpactDamageTakenModifier -= .1f * modifier;
                Player.SetModifiers(mod);
            }

            public void Deflate(float modifier)
            {
                InflatedModifier -= .0125f * modifier;

                var mod = Player.GetModifiers();
                mod.SizeModifier -= 0.015f * modifier;
                mod.ImpactDamageTakenModifier += .1f * modifier;
                Player.SetModifiers(mod);
            }

            public void Remove()
            {
                PullJoint.Remove();
                MagnetJoint.Remove();
                Magnet.Remove();
            }

            public IPlayer Player;
            public IObjectPullJoint PullJoint;
            public IObjectTargetObjectJoint MagnetJoint;
            public IObject Magnet;
            public float InflatedModifier = 0f;
        }

        private static Dictionary<int, Info> HeliumInfos = new Dictionary<int, Info>();
        private static Info GetInfo(IPlayer player)
        {
            Info info;

            if (!HeliumInfos.TryGetValue(player.UniqueID, out info))
            {
                info = new Info(player);
                HeliumInfos.Add(player.UniqueID, info);
            }
            return info;
        }

        static HeliumProjectile()
        {
            Events.PlayerDeathCallback.Start((p, a) =>
            {
                if (a.Removed)
                {
                    GetInfo(p).Remove();
                    HeliumInfos.Remove(p.UniqueID);
                }
            });
            Events.PlayerDamageCallback.Start((IPlayer p, PlayerDamageArgs a) =>
            {
                var info = GetInfo(p);
                var dmgTypeModifier = 1f;

                if (a.DamageType == PlayerDamageEventType.Missile) dmgTypeModifier = 1.5f;
                if (a.DamageType == PlayerDamageEventType.Projectile) dmgTypeModifier = 2f;
                if (a.DamageType == PlayerDamageEventType.Explosion) dmgTypeModifier = 4f;

                var popChance = info.InflatedModifier * 0.05f * a.Damage * dmgTypeModifier;
                if (info.InflatedModifier >= .15f && RandomHelper.Percentage(popChance))
                    Game.TriggerExplosion(info.Player.GetWorldPosition());
            });
            Events.UpdateCallback.Start(e =>
            {
                if (Game.IsEditorTest)
                {
                    foreach (var info in HeliumInfos.Values)
                        Game.DrawText(ScriptHelper.ToDisplayString(info.InflatedModifier, info.Player.GetModifiers().SizeModifier),
                            info.Player.GetWorldPosition());
                }
                foreach (var info in HeliumInfos.Values) info.Update();
            });
        }

        public HeliumProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Helium) { }

        protected override bool OnProjectileCreated()
        {
            Instance.DamageDealtModifier *= .25f;
            return base.OnProjectileCreated();
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (!args.IsPlayer) return;
            var bot = BotManager.GetBot(args.HitObjectID);
            if (bot == Bot.None) return;

            var info = GetInfo(bot.Player);
            var modifier = Instance.GetProperties().PlayerDamage / 6; // SMG projectile deals 6hp
            info.Inflate(modifier);
        }
    }
    /// <summary>
    /// Credit to DangerRoss for the original idea and most of the code here
    /// </summary>
    class HomingProjectile : Projectile
    {
        public IPlayer Target { get; private set; }

        public HomingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Homing)
        {
            //if (Game.IsEditorTest) Instance.Velocity /= 20;
        }

        private float m_updateDelay = 0f;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (ScriptHelper.IsElapsed(m_updateDelay, 75))
            {
                m_updateDelay = Game.TotalElapsedGameTime;
                SearchTarget();
            }
            if (Target != null) Game.DrawArea(Target.GetAABB());

            Guide(elapsed);
        }

        private void Guide(float elapsed)
        {
            if (Target == null) return;

            var targetDir = Target.GetWorldPosition() - Instance.Position;
            var steerAngle = Math.Sign(MathExtension.AngleBetween(Instance.Direction, targetDir))
                * MathExtension.OneDeg * elapsed * 2/3;

            Instance.Direction = ScriptHelper.GetDirection(ScriptHelper.GetAngle(Instance.Direction) + steerAngle);
        }

        private void SearchTarget()
        {
            var minDistanceToPlayer = float.MaxValue;

            foreach (var player in Game.GetPlayers())
            {
                if (SameTeam(player) || player.IsDead) continue;

                var distanceToPlayer = Vector2.Distance(Instance.Position, player.GetWorldPosition());
                if (minDistanceToPlayer > distanceToPlayer)
                {
                    minDistanceToPlayer = distanceToPlayer;
                    Target = player;
                }
            }
        }
    }
    class HoveringProjectile : Projectile
    {
        protected Vector2 HoverPosition;
        protected float ExplodeRange = 60;
        protected float ExplodeRange2 = 10;
        protected float MinDistanceBeforeHover = 100;

        protected enum State
        {
            Normal,
            Hovering,
            Destroyed,
        }
        protected State CurrentState { get; private set; }

        public override bool IsRemoved { get { return CurrentState == State.Destroyed; } }

        public HoveringProjectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup)
        {
            CurrentState = State.Normal;
        }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            switch (CurrentState)
            {
                case State.Normal:
                {
                    if (CanHover()) Hover();
                    break;
                }
                case State.Hovering:
                {
                    Instance.Position = HoverPosition;
                    Instance.Velocity = new Vector2(0, 100);
                    Instance.Direction = Vector2.Zero;
                    UpdateHovering(elapsed);
                    break;
                }
                case State.Destroyed:
                    break;
            }
        }

        protected float HoverTime { get; private set; }
        protected virtual void UpdateHovering(float elapsed) { HoverTime += elapsed; }

        protected void Hover()
        {
            if (Instance.IsRemoved) return;

            CurrentState = State.Hovering;
            HoverPosition = Instance.Position;
            Instance.Velocity = new Vector2(0, 100);
            Instance.Direction = Vector2.Zero;
            
            if (!IsSlowProjectile(Instance.ProjectileItem)) Instance.FlagForRemoval();

            HoverTime = 0f;
            OnHover();
        }

        protected virtual void OnHover() { }

        protected virtual void Destroy()
        {
            CurrentState = State.Destroyed;
            Instance.FlagForRemoval();
        }

        private bool CanHover()
        {
            var headingDirection = ScriptHelper.GetDir(ScriptHelper.GetAngle(Instance.Direction));
            var explodeRange = ScriptHelper.GrowFromCenter(Instance.Position,
                headingDirection == Direction.Left ? ExplodeRange : ExplodeRange2,
                headingDirection == Direction.Top ? ExplodeRange : ExplodeRange2,
                headingDirection == Direction.Right ? ExplodeRange : ExplodeRange2,
                headingDirection == Direction.Bottom ? ExplodeRange : ExplodeRange2);
            var os = Game.GetObjectsByArea(explodeRange);

            foreach (var o in os)
            {
                var collisionFilter = o.GetCollisionFilter();
                if ((collisionFilter.BlockExplosions || collisionFilter.CategoryBits == CategoryBits.Player)
                    && Instance.TotalDistanceTraveled >= MinDistanceBeforeHover)
                {
                    if (Game.IsEditorTest)
                    {
                        var position = Instance.Position;
                        ScriptHelper.RunIn(() =>
                        {
                            Game.DrawCircle(position, .5f, Color.Red);
                            Game.DrawLine(position, o.GetWorldPosition(), Color.Yellow);
                            Game.DrawArea(o.GetAABB(), Color.Yellow);
                            Game.DrawText(o.Name + " " + headingDirection, position);
                            Game.DrawArea(explodeRange);
                        }, 2000);
                    }
                    return true;
                }
            }

            return false;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            // in case bouncing ammo hit multiple times
            if (CurrentState == State.Normal && args.RemoveFlag)
                Hover();
        }
    }
    class HuntingProjectile : Projectile
    {
        private IObjectDistanceJoint DistanceJoint { get; set; }
        private IObjectTargetObjectJoint TargetJoint { get; set; }
        private IObject InvisibleBlock { get; set; }
        public IPlayer Target { get; private set; }
     
        public HuntingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Hunting)
        {
            Instance.DamageDealtModifier = .5f;
            Instance.Velocity /= 2;
        }

        private static readonly float MinRange = 60;
        private static readonly float MaxRange = 120;

        private float _updateDelay = 0f;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (Instance.IsRemoved) return;

            if (DistanceJoint != null)
                InvisibleBlock.SetWorldPosition(Instance.Position);

            if (Target == null && ScriptHelper.IsElapsed(_updateDelay, 35))
            {
                _updateDelay = Game.TotalElapsedGameTime;
                SearchTarget();
            }
        }

        private void SearchTarget()
        {
            foreach (var player in Game.GetPlayers())
            {
                if (player == null || player.IsDead || player.UniqueID == InitialOwnerPlayerID
                    || ScriptHelper.SameTeam(Game.GetPlayer(InitialOwnerPlayerID), player))
                    continue;

                var distanceToPlayer = Vector2.Distance(Instance.Position, player.GetWorldPosition());
                if (distanceToPlayer >= MinRange && distanceToPlayer <= MaxRange && IsMovingAwayFrom(player))
                {
                    Target = player;
                    DistanceJoint = (IObjectDistanceJoint)Game.CreateObject("DistanceJoint", Instance.Position);
                    TargetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint", player.GetWorldPosition());
                    InvisibleBlock = Game.CreateObject("InvisibleBlockNoCollision", Instance.Position);

                    DistanceJoint.SetTargetObject(InvisibleBlock);
                    DistanceJoint.SetTargetObjectJoint(TargetJoint);
                    DistanceJoint.SetLineVisual(LineVisual.DJRope);
                    DistanceJoint.SetLengthType(DistanceJointLengthType.Elastic);
                    TargetJoint.SetTargetObject(player);

                    ScriptHelper.RunIn(() =>
                    {
                        if (player != null && player.IsInMidAir && !player.IsFalling) ScriptHelper.Fall(player);
                    }, 5000, CleanUp);
                }
            }
        }

        private void CleanUp()
        {
            DistanceJoint.Remove(); TargetJoint.Remove(); InvisibleBlock.Remove();
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (InvisibleBlock != null)
                InvisibleBlock.SetWorldPosition(args.HitPosition);
        }

        private bool IsMovingAwayFrom(IObject o)
        {
            var oPos = o.GetWorldPosition();
            return Vector2.Distance(oPos, Instance.Position) < Vector2.Distance(oPos, Instance.Position + Instance.Direction);
        }
    }
    class InfiniteBouncingProjectile : Projectile
    {
        public InfiniteBouncingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.InfiniteBouncing)
        {
            _isElapsedUpdate = ScriptHelper.WithIsElapsed(36);
            Instance.PowerupBounceActive = true;
        }

        private Func<bool> _isElapsedUpdate;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);
            if (_isElapsedUpdate() && Instance.BounceCount > 0)
                Instance.BounceCount = 0;
        }
    }
    class LightningProjectile : Projectile
    {
        public const float ElectrocuteRadius = 35f;
        public float LightningDamage { get; private set; }

        public override bool IsRemoved { get; protected set; }

        public LightningProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Lightning)
        {
            LightningDamage = 7f;

            var start = projectile.Position + projectile.Direction * 10;
            var end = start + projectile.Direction * ScriptHelper.GetDistanceToEdge(start, projectile.Direction);
            var results = Game.RayCast(start, end, new RayCastInput()
            {
                ProjectileHit = RayCastFilterMode.True,
                AbsorbProjectile = RayCastFilterMode.True,
                IncludeOverlap = false,
                ClosestHitOnly = true,
            }).Where(r => r.HitObject != null);

            end = results.Count() == 0 ? end : results.First().Position;
            var distance = Vector2.Distance(start, end);

            DrawElectricTrace(start, end);

            foreach (var result in results)
            {
                if (result.HitObject != null)
                {
                    Electrocute(result.HitObject); break;
                }
            }

            projectile.FlagForRemoval();
        }

        private HashSet<int> _electrocutedObjects = new HashSet<int>();

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (!m_pendingUpdate.Any()) return;
            if (Game.TotalElapsedGameTime >= m_pendingUpdate.First().HitTime)
            {
                var i = m_pendingUpdate.First();
                i.Action.Invoke();
                m_pendingUpdate.RemoveAt(0);
            }
        }

        private class Info
        {
            public Action Action;
            public float HitTime;
        }
        private List<Info> m_pendingUpdate = new List<Info>();
        private void Electrocute(IObject obj, int depth = 1)
        {
            //Game.WriteToConsole(depth, obj.Name);
            if (depth > 3 || _electrocutedObjects.Contains(obj.UniqueID) || obj.IsRemoved)
            {
                IsRemoved = true;
                return;
            }

            var position = obj.GetWorldPosition();
            if (!ScriptHelper.IsIndestructible(obj))
            {
                obj.DealDamage(LightningDamage);
                Game.PlayEffect(EffectName.Electric, position);

                if (ScriptHelper.IsPlayer(obj) && obj.GetHealth() == 0) obj.SetMaxFire();
                if (RandomHelper.Percentage(.02f))
                {
                    Game.SpawnFireNode(position, Vector2.Zero);
                    Game.PlayEffect(EffectName.FireTrail, position);
                }
            }
            _electrocutedObjects.Add(obj.UniqueID);

            foreach (var p in GetPlayersInRange(obj))
            {
                DrawElectricTrace(position, p.GetWorldPosition());
                m_pendingUpdate.Add(new Info()
                {
                    HitTime = m_pendingUpdate.Any() ? m_pendingUpdate.Last().HitTime + 23 : Game.TotalElapsedGameTime,
                    Action = () => Electrocute(p, ++depth),
                });
            }
        }

        private IEnumerable<IPlayer> GetPlayersInRange(IObject electrocutedObject)
        {
            var position = electrocutedObject.GetWorldPosition();
            var filterArea = ScriptHelper.GrowFromCenter(position, ElectrocuteRadius * 2);
            return Game.GetObjectsByArea<IPlayer>(filterArea)
                .Where(o => !_electrocutedObjects.Contains(o.UniqueID)
                && ScriptHelper.IntersectCircle(o.GetAABB(), position, ElectrocuteRadius));
        }

        private void DrawElectricTrace(Vector2 p1, Vector2 p2)
        {
            var distance = Vector2.Distance(p1, p2);
            var direction = Vector2.Normalize(p2 - p1);

            for (var i = 0; i <= distance; i += 16)
            {
                var position = p1 + direction * i;
                var perpendicular = Vector2.Normalize(new Vector2(position.Y, -position.X));

                Game.PlayEffect(EffectName.Electric, position + perpendicular * RandomHelper.Between(-5, 5));
            }
        }
    }
    class MiniGun: RangeWpn
    {
        public override bool IsValidPowerup()
        {
            // Automatic guns only
            return Name == WeaponItem.M60
                || Name == WeaponItem.MACHINE_PISTOL
                || Name == WeaponItem.ASSAULT
                || Name == WeaponItem.UZI
                || Name == WeaponItem.MP50
                || Name == WeaponItem.TOMMYGUN;
        }
        public int GetCooldownTime()
        {
            switch (Name)
            {
                // From SFD 1.3.4 Source code (Cooldown property in Wpn___ file)
                case WeaponItem.M60: return 100;
                case WeaponItem.MACHINE_PISTOL: return 105;
                case WeaponItem.ASSAULT: return 95;
                case WeaponItem.UZI: return 75;
                case WeaponItem.MP50: return 105;
                case WeaponItem.TOMMYGUN: return 105;
                default: return 100;
            }
        }

        public MiniGun(IPlayer owner, WeaponItem name) : base(owner, name, RangedWeaponPowerup.Minigun) { }

        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (_fireTime == -1 || !IsEquipping) return;

            var cooldown = GetCooldownTime();
            if (_exraShots == 0 && Game.TotalElapsedGameTime >= _fireTime + cooldown / 3) Fire();
            if (_exraShots == 1 && Game.TotalElapsedGameTime >= _fireTime + cooldown * 2 / 3) Fire();
        }

        private void Fire()
        {
            var muzzle = GetMuzleInfo();
            if (!muzzle.IsSussess) return;

            var accuracyDeflection = 0.13f / 2;
            var angle = ScriptHelper.GetAngle(muzzle.Direction);
            var finalDirection = RandomHelper.Direction(angle - accuracyDeflection, angle + accuracyDeflection, true);
            var projectile = Game.SpawnProjectile(ProjectileItem, muzzle.Position, finalDirection, ProjectilePowerup);

            projectile.DamageDealtModifier = DamageModifier;
            Game.PlaySound(ScriptHelper.GetSoundID(Name), muzzle.Position);
            if (_exraShots == 0 && RandomHelper.Percentage(.4f)) Game.PlayEffect(EffectName.Dig, muzzle.Position);
            _exraShots++;

            // recoil
            var pos = Owner.GetWorldPosition();
            pos.X -= Owner.GetFaceDirection() * .2f;
            Owner.SetWorldPosition(pos);
        }

        static public readonly float DamageModifier = .5f;
        private int _exraShots = 0;
        private float _fireTime = -1;
        private ProjectileItem ProjectileItem;
        private ProjectilePowerup ProjectilePowerup;

        public override void OnProjectileCreated(IProjectile projectile)
        {
            base.OnProjectileCreated(projectile);

            projectile.DamageDealtModifier = DamageModifier;

            ProjectileItem = projectile.ProjectileItem;
            ProjectilePowerup = ScriptHelper.GetPowerup(projectile);

            _fireTime = Game.TotalElapsedGameTime;
            _exraShots = 0;
        }
    }
    class MolotovProjectile : CustomProjectile
    {
        public MolotovProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Molotov) { }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            if (!Projectile.IsSlowProjectile(projectile.ProjectileItem)) return null;
            
            var molotov = CreateCustomProjectile(projectile, "WpnMolotovsThrown", projectile.Velocity / 20);
            var facingDirection = Game.GetPlayer(InitialOwnerPlayerID).FacingDirection;
            molotov.SetAngularVelocity(-facingDirection * 20f);
            
            return molotov;
        }
    }
    class ObjectGun : RangeWpn
    {
        private string _loadedObject;
        private IObject _bullet;

        public override bool IsValidPowerup()
        {
            return Projectile.IsSlowProjectile(Mapper.GetProjectile(Name));
        }

        public ObjectGun(IPlayer owner, WeaponItem name) : base(owner, name, RangedWeaponPowerup.Object)
        {
            DisableRangeCheck = true;
            BotManager.GetBot(Owner).UseRangeWeapon(false);
        }

        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            //Game.DrawText(_loadedObject + " " + Owner.GetBotBehaviorSet().RangedWeaponUsage, Owner.GetWorldPosition());

            var bot = BotManager.GetBot(Owner);
            if (Owner.IsDead) return;

            if (_loadedObject == null)
            {
                foreach (var o in Game.GetObjectsByArea(ScriptHelper.Grow(Owner.GetAABB(), 1, 1)))
                {
                    if (!IsBullet(o)) continue;
                    
                    _loadedObject = o.Name;
                    bot.UseRangeWeapon(true);
                    o.Remove();
                    break;
                }
            }
        }

        private bool IsBullet(IObject o) { return (_bullet == null || o.UniqueID != _bullet.UniqueID) && ScriptHelper.IsDynamicObject(o); }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            base.OnProjectileCreated(projectile);
            projectile.FlagForRemoval();

            // there is a bug when you create new objects here
            try
            {
                BotManager.GetBot(Owner).UseRangeWeapon(false);
                _bullet = Game.CreateObject(_loadedObject);
                _bullet.TrackAsMissile(true);
                _bullet.SetWorldPosition(projectile.Position + projectile.Direction * _bullet.GetAABB().Width / 2);
                _bullet.SetLinearVelocity(projectile.Velocity / 10);

                ScriptHelper.Timeout(() => _bullet = null, 2500);
                _loadedObject = null;
            }
            catch { }
        }
    }
    class PenetrationProjectile : Projectile
    {
        public PenetrationProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Penetration) { }

        protected override bool OnProjectileCreated()
        {
            Instance.PowerupBounceActive = true;
            _initialDir = Instance.Direction;
            return base.OnProjectileCreated();
        }

        private Vector2 _initialDir;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);
            if (Instance.BounceCount > 0)
                Instance.BounceCount = 0;
            // TODO: improve perf, hitting static tiles and play multiple effects seem to lag the game
            if (Instance.Direction != _initialDir)
                Instance.Direction = _initialDir;
        }
    }
    class PoisonProjectile : Projectile
    {
        class PoisonPlayer
        {
            public IPlayer Player;
            public float HitTime = 0f;
            public float LastPoisonTime = 0f;
            public float LastStaggerTime = 0f;
            public float StaggerTime = 0f;
        }

        private static List<PoisonPlayer> _poisonedPlayers = new List<PoisonPlayer>();
        public static readonly float PoisonTime = 30000;

        static PoisonProjectile()
        {
            Events.UpdateCallback.Start((e) =>
            {
                foreach (var item in _poisonedPlayers.ToList())
                {
                    var player = item.Player;
                    if (player.IsDead || player.IsRemoved || ScriptHelper.IsElapsed(item.HitTime, PoisonTime))
                    {
                        _poisonedPlayers.Remove(item);
                        continue;
                    }

                    if (ScriptHelper.IsElapsed(item.LastPoisonTime, 1000))
                    {
                        // TODO: add custom poison effect?
                        player.DealDamage(2);
                        item.LastPoisonTime = Game.TotalElapsedGameTime;
                    }

                    if (ScriptHelper.IsElapsed(item.LastStaggerTime, item.StaggerTime))
                    {
                        if (RandomHelper.Boolean()) ScriptHelper.Fall(player);
                        else ScriptHelper.KneelFall(player);
                        item.LastStaggerTime = Game.TotalElapsedGameTime;
                        item.StaggerTime = RandomHelper.Between(2000, 4000);
                    }
                }
            });
        }

        public PoisonProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Poison)
        {
            projectile.DamageDealtModifier = 0.1f; // mainly poison damage over time
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            var player = Game.GetPlayer(args.HitObjectID);
            if (player == null || player.IsDead) return;
            
            // prolong poison time instead of stacking damage
            var item = _poisonedPlayers.FirstOrDefault(i => i.Player.UniqueID == player.UniqueID);
            if (item != null)
            {
                item.HitTime = Game.TotalElapsedGameTime;
                return;
            }

            Game.PlayEffect(EffectName.CustomFloatText, player.GetWorldPosition(), "poisoned");
            _poisonedPlayers.Add(new PoisonPlayer
            {
                Player = player,
                HitTime = Game.TotalElapsedGameTime,
            });
        }
    }
    class PresentBullet : CustomProjectile
    {
        private static readonly List<string> m_oofs = new List<string>()
        {
            "WpnGrenadesThrown",
            "WpnMolotovsThrown",
            "WpnMineThrown",
        };

        public PresentBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Present) { }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            switch (projectile.ProjectileItem)
            {
                case ProjectileItem.BAZOOKA:
                case ProjectileItem.GRENADE_LAUNCHER:
                    return null;
                default:
                    return CreateCustomProjectile(projectile, "XmasPresent00");
            }
        }

        public override void OnProjectileTerminated()
        {
            var position = Instance.GetWorldPosition();

            // normally, the present spawn some random shits upon destroyed. make the present disappeared
            // and spawn something else as a workaround
            Instance.SetWorldPosition(ScriptHelper.GetFarAwayPosition());
            Game.PlayEffect(EffectName.DestroyCloth, position);

            var rndNum = RandomHelper.Between(0, 100);
            if (rndNum < 1) // big oof
            {
                var player = Game.CreatePlayer(position);
                var owner = Game.GetPlayer(InitialOwnerPlayerID);
                var bot = BotManager.SpawnBot(BotType.Santa, player: player,
                    team: owner != null ? owner.GetTeam() : PlayerTeam.Independent,
                    triggerOnSpawn: false);

                bot.Info.SpawnLine = "Surprise motherfucker!";
                BotManager.TriggerOnSpawn(bot);
            }
            if (1 <= rndNum && rndNum < 5)
                Game.CreateObject(RandomHelper.GetItem(m_oofs), position);
            if (5 <= rndNum && rndNum < 30)
                Game.CreateObject(RandomHelper.GetItem(Constants.WeaponNames), position);
        }
    }
    class RidingProjectile : Projectile
    {
        public RidingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Riding) { }

        private Vector2 _direction;

        protected override bool OnProjectileCreated()
        {
            Instance.FlagForRemoval();
            Instance = Game.SpawnProjectile(ProjectileItem.BAZOOKA, Instance.Position, Instance.Direction, ProjectilePowerup.Bouncing);
            Instance.Velocity *= 100; // slowest possible

            _direction = Instance.Direction;
            return Instance.ProjectileItem == ProjectileItem.BAZOOKA;
        }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (Instance.BounceCount > 0) Instance.BounceCount = 0;
            //Instance.Direction = _direction;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

           
        }
    }
    class Shotgun: RangeWpn
    {
        public Shotgun(IPlayer owner, WeaponItem name) : base(owner, name, RangedWeaponPowerup.Shotgun) { }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            base.OnProjectileCreated(projectile);
            TripleFire(projectile);
        }

        private void TripleFire(IProjectile projectile1)
        {
            var muzzle = GetMuzleInfo();
            if (!muzzle.IsSussess) return;

            var powerup = ScriptHelper.GetPowerup(projectile1);
            var accuracyDeflection = 0.75f / 2;
            var angle = ScriptHelper.GetAngle(muzzle.Direction);
            var dir1 = RandomHelper.Direction(angle - accuracyDeflection, angle + accuracyDeflection, true);
            var dir2 = RandomHelper.Direction(angle - accuracyDeflection, angle + accuracyDeflection, true);
            var dir3 = RandomHelper.Direction(angle - accuracyDeflection, angle + accuracyDeflection, true);

            projectile1.Direction = dir1;
            var projectile2 = Game.SpawnProjectile(projectile1.ProjectileItem, muzzle.Position, dir2, powerup);
            var projectile3 = Game.SpawnProjectile(projectile1.ProjectileItem, muzzle.Position, dir3, powerup);

            projectile1.DamageDealtModifier /= 2;
            projectile2.DamageDealtModifier /= 2;
            projectile3.DamageDealtModifier /= 2;
        }
    }
    class ShrinkingProjectile : HoveringProjectile
    {
        public ShrinkingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Shrinking)
        {
            ExplodeRange = 10;
            ExplodeRange2 = 5;
            MinDistanceBeforeHover = 15;
        }

        protected override bool OnProjectileCreated()
        {
            return IsExplosiveProjectile;
        }

        private static readonly float Radius = 60;
        protected override void OnHover()
        {
            base.OnHover();
            
            Instance.FlagForRemoval();

            var effectAngle = 0f;
            var totalEffects = 18;
            var angleInBetween = 360 / totalEffects;

            for (var i = 0; i < totalEffects; i++)
            {
                var direction = ScriptHelper.GetDirection(MathExtension.ToRadians(effectAngle));
                var position = HoverPosition + direction * Radius;
                
                Game.PlayEffect(EffectName.Electric, position);
                Game.PlaySound("ElectricSparks", position);
                effectAngle += angleInBetween;
            }

            foreach (var bot in BotManager.GetBots())
            {
                if (ScriptHelper.IntersectCircle(bot.Player.GetAABB(), HoverPosition, Radius))
                {
                    _shrinkedPlayers.Add(bot.Player);

                    var mod = bot.Player.GetModifiers();

                    mod.ExplosionDamageTakenModifier += 1; // +100% damage taken
                    mod.MeleeDamageTakenModifier += 1;
                    mod.ProjectileDamageTakenModifier += 1;
                    mod.ProjectileCritChanceTakenModifier += 1;
                    mod.ImpactDamageTakenModifier /= 2; // half damage taken
                    mod.SizeModifier -= 0.25f; // 0.5 / 0.25 = 2 times until tiny
                    bot.SetModifiers(mod, permanent: true);
                }
            }
        }

        private List<IPlayer> _shrinkedPlayers = new List<IPlayer>();
        private float _effectTime = 0f;
        protected override void UpdateHovering(float elapsed)
        {
            base.UpdateHovering(elapsed);

            if (HoverTime > 1000)
                Destroy();

            if (ScriptHelper.IsElapsed(_effectTime, 200))
            {
                _effectTime = Game.TotalElapsedGameTime;
                foreach (var p in _shrinkedPlayers)
                {
                    Game.PlayEffect(EffectName.PlayerLandFull, p.GetWorldPosition());
                }
            }
        }
    }
    class SmokeProjectile : CustomProjectile
    {
        public const float SmokeRadius = 50f;
        public const float SmokeTime = 22000f;
        public override bool IsRemoved
        {
            get { return m_explodeTime != 0f && ScriptHelper.IsElapsed(m_explodeTime, SmokeTime); }
        }
        private float m_explodeTime = 0f;
        private Vector2 m_explodePosition;
        public float CurrentSmokeRadius { get; private set; }

        public SmokeProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Smoke)
        {
            CurrentSmokeRadius = 0f;
            _isElapsedSmokeTrailing = ScriptHelper.WithIsElapsed(40);
        }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            if (!Projectile.IsSlowProjectile(projectile.ProjectileItem))
                return null;

            return CreateCustomProjectile(projectile, "WpnC4Detonator", projectile.Velocity / 20);
        }

        private class Info
        {
            public bool IsNametagVisible = false;
            public bool IsStatusBarsVisible = false;
            public IPlayer Player;
        }

        private static HashSet<int> AllPlayersAffected = new HashSet<int>();
        private Dictionary<int, Info> m_playersAffected = new Dictionary<int, Info>();
        private float m_smokeEffectDelay = 0f;
        private float m_smokeEffectBottomDelay = 0f;
        private float m_updateDelay = 0f;
        private float m_groundPositionY;
        private float m_smokeRadiusExpandDelay = 0f;
        private Func<bool> _isElapsedSmokeTrailing;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            // update projectile
            if (m_explodeTime == 0f)
            {
                if (_isElapsedSmokeTrailing()) Game.PlayEffect(EffectName.Dig, Instance.GetWorldPosition());
                if (Instance.GetLinearVelocity().Length() < 3f)
                {
                    var groundObject = ScriptHelper.GetGroundObject(Instance);
                    if (groundObject != null)
                    {
                        m_explodePosition = Instance.GetWorldPosition();
                        m_explodeTime = Game.TotalElapsedGameTime;
                        m_groundPositionY = Instance.GetWorldPosition().Y;
                        Instance.Destroy();
                    }
                }
                return;
            }

            // update smoke effect after contact
            if (ScriptHelper.IsElapsed(m_smokeRadiusExpandDelay, 400))
            {
                m_smokeRadiusExpandDelay = Game.TotalElapsedGameTime;
                CurrentSmokeRadius = Math.Min(CurrentSmokeRadius + 6, SmokeRadius);
            }

            Game.DrawCircle(m_explodePosition, CurrentSmokeRadius, Color.Cyan);
            var playSmokeEffect = false;
            var playSmokeEffectBottom = false;

            if (ScriptHelper.IsElapsed(m_smokeEffectDelay, 460))
            {
                m_smokeEffectDelay = Game.TotalElapsedGameTime;
                playSmokeEffect = true;
            }
            if (ScriptHelper.IsElapsed(m_smokeEffectBottomDelay, 300))
            {
                m_smokeEffectBottomDelay = Game.TotalElapsedGameTime;
                playSmokeEffectBottom = true;
            }

            var isBottom = false;
            var startY = Math.Max(m_groundPositionY, m_explodePosition.Y - CurrentSmokeRadius);
            for (var i = -CurrentSmokeRadius; i < CurrentSmokeRadius; i += 6)
            {
                for (var j = -CurrentSmokeRadius; j < CurrentSmokeRadius; j += 6)
                {
                    var p = m_explodePosition + new Vector2(i, j);
                    if (!IsInside(p) || p.Y < startY)
                    {
                        isBottom = true;
                        continue;
                    }
                    else
                        isBottom = isBottom || j == -CurrentSmokeRadius;

                    if (isBottom && playSmokeEffectBottom || playSmokeEffect)
                    {
                        Game.PlayEffect(EffectName.Dig, p);
                        Game.DrawCircle(p, .5f, isBottom ? Color.Green : Color.Red);
                    }
                    isBottom = false;
                }
            }

            // update affected players
            if (ScriptHelper.IsElapsed(m_updateDelay, 150))
            {
                m_updateDelay = Game.TotalElapsedGameTime;

                foreach (var player in Game.GetPlayers())
                {
                    if (player != null && !player.IsDead && !m_playersAffected.ContainsKey(player.UniqueID) && IsInside(player)
                        && !AllPlayersAffected.Contains(player.UniqueID))
                    {
                        m_playersAffected.Add(player.UniqueID, new Info()
                        {
                            IsNametagVisible = player.GetNametagVisible(),
                            IsStatusBarsVisible = player.GetStatusBarsVisible(),
                            Player = player,
                        });
                        AllPlayersAffected.Add(player.UniqueID);

                        var bot = BotManager.GetBot(player);
                        var mod = player.GetModifiers();

                        mod.RunSpeedModifier = .6f;
                        mod.SprintSpeedModifier = .6f;
                        mod.MeleeDamageTakenModifier = .5f;
                        mod.MeleeForceModifier = 2f;
                        mod.ProjectileDamageTakenModifier = 2f;
                        mod.FireDamageTakenModifier = 2f;
                        mod.ExplosionDamageTakenModifier = 2f;
                        bot.SetModifiers(mod);

                        var bs = player.GetBotBehaviorSet();
                        bs.RangedWeaponAccuracy = 0f;
                        bs.RangedWeaponPrecisionAccuracy = .1f;
                        bot.SetBotBehaviorSet(bs);

                        player.SetNametagVisible(false);
                        player.SetStatusBarsVisible(false);
                    }
                }
                foreach (var kv in m_playersAffected.ToList())
                {
                    if (kv.Value.Player.IsDead || !IsInside(kv.Value.Player)) RemoveSmokeEffect(kv.Key);
                }
            }
        }

        public override void OnRemove()
        {
            base.OnRemove();
            foreach (var kv in m_playersAffected.ToList()) RemoveSmokeEffect(kv.Key);
        }

        private void RemoveSmokeEffect(int playerID)
        {
            var info = m_playersAffected[playerID];
            var bot = BotManager.GetBot(playerID);

            bot.ResetModifiers();
            bot.ResetBotBehaviorSet();
            bot.Player.SetNametagVisible(info.IsNametagVisible);
            bot.Player.SetStatusBarsVisible(info.IsStatusBarsVisible);

            m_playersAffected.Remove(playerID);
            AllPlayersAffected.Remove(playerID);
        }

        private bool IsInside(Vector2 position) { return ScriptHelper.IntersectCircle(position, m_explodePosition, CurrentSmokeRadius); }
        private bool IsInside(IPlayer player)
        {
            var hitBox = player.GetAABB();
            return ScriptHelper.IntersectCircle(hitBox, m_explodePosition, CurrentSmokeRadius) && hitBox.Top >= m_groundPositionY;
        }
    }
    class SpinnerBullet : HoveringProjectile
    {
        public SpinnerBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Spinner)
        {
            if (projectile.ProjectileItem == ProjectileItem.BAZOOKA
                || projectile.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || projectile.ProjectileItem == ProjectileItem.FLAREGUN
                || projectile.ProjectileItem == ProjectileItem.BOW
                || projectile.ProjectileItem == ProjectileItem.SNIPER)
                UpdateDelay = 0;
            else
                UpdateDelay = 4;

            _isElapsedFire = ScriptHelper.WithIsElapsed(30);
        }

        protected override void OnHover()
        {
            base.OnHover();
            if (Instance.ProjectileItem != ProjectileItem.GRENADE_LAUNCHER)
                Instance.FlagForRemoval();
        }

        private Func<bool> _isElapsedFire;
        private float m_fireAngle = 0f;
        protected override void UpdateHovering(float elapsed)
        {
            if (_isElapsedFire())
            {
                var totalBullets = 20;
                var angleInBetween = 360 / totalBullets;
                var powerup = ScriptHelper.GetPowerup(Instance);
                var direction = ScriptHelper.GetDirection(MathExtension.ToRadians(m_fireAngle));

                Game.PlaySound("SilencedUzi", HoverPosition);
                Game.SpawnProjectile(ProjectileItem.MAGNUM, HoverPosition, direction, powerup);

                if (m_fireAngle == 360 - angleInBetween)
                    Destroy();

                m_fireAngle += angleInBetween;
            }
        }

        protected override void Destroy()
        {
            base.Destroy();
            if (Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || Instance.ProjectileItem == ProjectileItem.BAZOOKA)
                Game.TriggerExplosion(HoverPosition);
            else
                Game.PlayEffect(EffectName.Block, HoverPosition);
        }
    }
    class SteakProjectile : CustomProjectile
    {
        private static List<Bot> Zombies = new List<Bot>();

        public SteakProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Steak)
        {
            _isElapsedCheckFood = ScriptHelper.WithIsElapsed(110);
        }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            if (!Projectile.IsSlowProjectile(projectile.ProjectileItem)) return null;

            return CreateCustomProjectile(projectile, RandomHelper.GetItem(Constants.Giblets), projectile.Direction * 20);
        }

        private bool _spawnZombie;
        private Func<bool> _isElapsedCheckFood;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (Instance.IsRemoved) return;

            if (ScriptHelper.IsElapsed(CreatedTime, 10000))
                Instance.Destroy();

            var vec = Instance.GetLinearVelocity();
            if (!_spawnZombie && vec == Vector2.Zero)
            {
                var owner = Game.GetPlayer(InitialOwnerPlayerID);
                SpawnZombieNearFood(owner);
                Zombies.ForEach(z =>
                {
                    ChaseFood(z.Player);
                    z.Player.SetTeam(owner.GetTeam());
                });
                _spawnZombie = true;
            }
            if (vec == Vector2.Zero && _isElapsedCheckFood())
            {
                foreach (var z in Zombies)
                {
                    if (z.Player.IsDead) continue;
                    if (z.Player.GetAABB().Intersects(ScriptHelper.Grow(Instance.GetAABB(), 5, 5)))
                    {
                        Game.PlaySound("GetHealthSmall", z.Position);
                        Instance.Destroy();
                        z.ResetModifiers();
                        z.ResetBotBehaviorSet();
                        z.SetHealth(z.Player.GetHealth() + 15, true);
                        break;
                    }
                }
            }
        }

        private void SpawnZombieNearFood(IPlayer owner)
        {
            var foodPosition = Instance.GetWorldPosition();
            var groundPathNodes = Game.GetObjects<IObjectPathNode>()
                .Where(x => x.GetPathNodeType() == PathNodeType.Ground && MathExtension.InRange(Vector2.Distance(x.GetWorldPosition(), foodPosition), 15, 80))
                .ToList();
            if (groundPathNodes.Count == 0) return;
            var node = RandomHelper.GetItem(groundPathNodes);
            var position = node.GetWorldPosition() - Vector2.UnitY * 2;
            var bot = SpawnZombie(owner, position, foodPosition.X - position.X > 0 ? 1 : -1);

            if (bot == null) return;
            bot.Player.SetNametagVisible(false);
            bot.Player.SetStatusBarsVisible(false);
        }

        private void ChaseFood(IPlayer zombie)
        {
            var mod = zombie.GetModifiers();
            mod.RunSpeedModifier = Speed.VeryFast;
            mod.SprintSpeedModifier = Speed.VeryFast;
            zombie.SetModifiers(mod);
            var bs = zombie.GetBotBehaviorSet();
            bs.GuardRange = 5;
            bs.ChaseRange = 7;
            bs.OffensiveSprintLevel = 0.9f;
            zombie.SetBotBehaviorSet(bs);
            zombie.SetGuardTarget(Instance);
        }

        private static IObjectPlayerSpawnTrigger _playerSpawnTrigger;
        private static IObjectPlayerSpawnTrigger PlayerSpawnTrigger
        {
            get
            {
                if (_playerSpawnTrigger == null)
                {
                    _playerSpawnTrigger = (IObjectPlayerSpawnTrigger)Game.CreateObject("PlayerSpawnTrigger");
                    _playerSpawnTrigger.SetPredefinedAI(PredefinedAIType.ZombieB); // set zombie spawn animation
                }
                return _playerSpawnTrigger;
            }
        }
        public static Bot SpawnZombie(IPlayer owner, Vector2 position, int direction = -1)
        {
            Zombies = Zombies.Where(x => !x.Player.IsDead).ToList();
            if (Zombies.Count >= 6) return null;

            var player = PlayerSpawnTrigger.CreatePlayer(position);
            player.SetFaceDirection(direction);

            var rndNum = RandomHelper.Between(0, 100);
            var botType = BotType.None;
            var health = 50;
            if (rndNum < 1) // big oof
                botType = BotType.ZombieFighter;
            if (rndNum >= 1 && rndNum < 2)
                botType = BotType.ZombieEater;
            if (rndNum >= 2 && rndNum < 10)
            {
                botType = RandomHelper.GetItem(GameScript.MutatedZombieTypes);
                health = 20;
            }
            if (rndNum >= 10)
            {
                botType = RandomHelper.GetItem(GameScript.CommonZombieTypes);
                health = 10;
            }

            var bot = BotManager.SpawnBot(botType, BotManager.GetBot(owner).Faction, player, owner.GetTeam(), ignoreFullSpawner: true);
            if (bot.Player.IsBurning) bot.Player.ClearFire();
            if (health > 0) bot.SetHealth(health, true);
            Zombies.Add(bot);

            return bot;
        }
    }
    class StickyBombProjectile : CustomProjectile
    {
        private float _hitTime = 0f;
        public IObject TargetedObject { get; private set; }

        public IObjectWeldJoint _weldJoint;

        public StickyBombProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.StickyBomb) { }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            Vector2 velocity;

            switch (projectile.ProjectileItem)
            {
                case ProjectileItem.FLAREGUN:
                case ProjectileItem.BOW:
                case ProjectileItem.GRENADE_LAUNCHER:
                    velocity = projectile.Velocity / 30 + Vector2.UnitY * 3;
                    break;
                default:
                    velocity = projectile.Velocity / 35;
                    break;
            }

            return CreateCustomProjectile(projectile, "WpnC4Thrown", velocity);
        }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (TargetedObject == null)
                CheckIfCollide();

            if (TargetedObject != null)
                Game.DrawArea(TargetedObject.GetAABB(), Color.Red);

            if (_hitTime != 0 && ScriptHelper.IsElapsed(_hitTime, 2000))
            {
                if (_weldJoint != null) _weldJoint.Remove();
                DealExplosionDamage();
            }
        }

        private void DealExplosionDamage()
        {
            var center = Instance.GetWorldPosition();
            var filterArea = ScriptHelper.GrowFromCenter(center, Constants.ExplosionRadius * 2);
            var objectsInRadius = Game.GetObjectsByArea(filterArea)
                .Where(o => filterArea.Contains(o.GetAABB())
                && ScriptHelper.IsActiveObject(o)
                && ScriptHelper.IntersectCircle(o.GetAABB(), center, Constants.ExplosionRadius));

            foreach (var o in objectsInRadius)
            {
                if (!o.Destructable && o.GetBodyType() == BodyType.Static) o.SetBodyType(BodyType.Dynamic);
            }

            Instance.Destroy();
        }

        private Vector2 m_lastVelocity;
        private float m_lastAngle;
        private void CheckIfCollide()
        {
            var currentVec = Instance.GetLinearVelocity();

            if (currentVec.Length() - m_lastVelocity.Length() <= -6
                || MathExtension.Diff(Instance.GetAngle(), m_lastAngle) >= MathExtension.OneDeg * 3
                || TotalDistanceTraveled >= 15 && currentVec.Length() <= 1)
            {
                TargetedObject = Game.GetObjectsByArea(Instance.GetAABB())
                    .Where(o => o.UniqueID != Instance.UniqueID && ScriptHelper.IsActiveObject(o))
                    .FirstOrDefault();

                if (TargetedObject != null)
                {
                    _hitTime = Game.TotalElapsedGameTime;
                    var player = ScriptHelper.AsPlayer(TargetedObject);

                    if (player != null)
                        ScriptHelper.WeldPlayer(player, Instance);
                    else
                        _weldJoint = ScriptHelper.Weld(Instance, TargetedObject);
                }
            }

            m_lastVelocity = currentVec;
            m_lastAngle = Instance.GetAngle();
        }
    }
    class StunBullet : Projectile
    {
        private static readonly uint StunnedTime = 1500;
        private static readonly float EMPBlastRadius = 15f;

        public StunBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Stun) { }

        public float StunChance { get; private set; }
        public float StunRangeChance { get; private set; }

        protected override bool OnProjectileCreated()
        {
            if (IsExplosiveProjectile)
            {
                StunChance = 0f;
                StunRangeChance = 1f;
            }
            else
            {
                StunChance = .19f;
                StunRangeChance = .01f;

                if (IsShotgunShell) // shotguns have double chance to stun
                {
                    StunChance = StunChance / ProjectilesPerShell * 2;
                    StunRangeChance = StunRangeChance / ProjectilesPerShell * 2;
                }
            }

            return true;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            var rndNum = RandomHelper.Between(0, 1);
            if (rndNum < StunRangeChance)
            {
                ElectrocuteRange(args.HitPosition);
            }
            if (StunRangeChance <= rndNum && rndNum < StunChance)
            {
                Electrocute(args);
            }
        }

        private void PlayStunEffects(Vector2 position, bool isStunningPlayer)
        {
            Game.PlayEffect(EffectName.Electric, position);
            Game.PlaySound("ElectricSparks", position);
        }

        private void StunBot(Bot bot) { StunBot(bot, bot.Position); }
        private void StunBot(Bot bot, Vector2 hitPosition)
        {
            if (!CanBeStunned(bot)) return;

            PlayStunEffects(hitPosition, true);

            bot.Stun(StunnedTime);
        }

        private void ElectrocuteRange(Vector2 position)
        {
            foreach (var bot in BotManager.GetBots())
            {
                var player = bot.Player;
                if (ScriptHelper.IntersectCircle(player.GetAABB(), position, EMPBlastRadius))
                {
                    StunBot(bot);
                }
            }

            for (var i = 0; i < 360; i += 72) // Play electric effect 5 times in circle (360 / 5 = 72)
            {
                var direction = ScriptHelper.GetDirection(MathExtension.ToRadians(i));

                Game.PlayEffect(EffectName.Electric, position + direction * EMPBlastRadius);
                Game.PlaySound("ElectricSparks", position);
            }

            if (Game.IsEditorTest)
            {
                Events.UpdateCallback.Start((e) => Game.DrawCircle(position, EMPBlastRadius, Color.Cyan),
                    0, 60 * 2);
            }
        }

        private void Electrocute(ProjectileHitArgs args)
        {
            var position = args.HitPosition;

            if (args.IsPlayer)
            {
                var player = Game.GetPlayer(args.HitObjectID);
                var bot = BotManager.GetBot(player);

                if (bot != Bot.None)
                {
                    StunBot(bot, position);
                }
            }
            else
                PlayStunEffects(position, false);
        }

        private bool CanBeStunned(Bot bot)
        {
            var player = bot.Player;
            return !player.IsRemoved && !player.IsDead && !bot.IsStunned;
        }
    }
    class SuicideDoveProjectile : CustomProjectile
    {
        public IPlayer Target { get; private set; }

        public SuicideDoveProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.SuicideDove) { }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            _isElapsedUpdate = ScriptHelper.WithIsElapsed(105);
            return CreateCustomProjectile(projectile, "Dove00", projectile.Velocity / 20);
        }

        private Func<bool> _isElapsedUpdate;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (_isElapsedUpdate() && TotalDistanceTraveled > 20)
                SearchTarget();

            Guide();

            if (Target != null)
            {
                Game.DrawLine(Instance.GetWorldPosition(), Target.GetWorldPosition());

                if (Instance.GetAABB().Intersects(Target.GetAABB()))
                    Instance.Destroy(); // trigger explosion
            }
        }

        private void SearchTarget()
        {
            var minDistanceToPlayer = float.MaxValue;

            foreach (var player in Game.GetPlayers())
            {
                if (SameTeam(player) || player.IsDead) continue;

                var distanceToPlayer = Vector2.Distance(Instance.GetWorldPosition(), player.GetWorldPosition());
                if (minDistanceToPlayer > distanceToPlayer)
                {
                    minDistanceToPlayer = distanceToPlayer;
                    Target = player;
                }
            }
        }

        private float m_guideDelay = 0f;
        private float m_guideDelayTime = 1000f;
        private void Guide()
        {
            if (ScriptHelper.IsElapsed(m_guideDelay, m_guideDelayTime))
            {
                m_guideDelay = Game.TotalElapsedGameTime;
                m_guideDelayTime = RandomHelper.Between(1000, 3000);

                if (Target == null) return;
                if (Vector2.Distance(Target.GetWorldPosition(), Instance.GetWorldPosition()) >= 60)
                    m_guideDelayTime = 500;

                var targetDirection = Vector2.Normalize(Target.GetWorldPosition() - Instance.GetWorldPosition());
                var angle = MathExtension.NormalizeAngle(ScriptHelper.GetAngle(targetDirection));
                var isFacingLeft = angle >= MathHelper.PIOver2 && angle <= MathExtension.PI_3Over2;

                Instance.SetFaceDirection(isFacingLeft ? -1 : 1);
                Instance.SetLinearVelocity(targetDirection * RandomHelper.Between(2, 8));
            }
        }

        public override void OnProjectileTerminated()
        {
            base.OnProjectileTerminated();
            Game.TriggerExplosion(Instance.GetWorldPosition());
        }
    }
    class SuicideFighterProjectile : CustomProjectile
    {
        public SuicideFighterProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.SuicideFighter) { }

        private static List<int> _bombers = new List<int>();
        static SuicideFighterProjectile()
        {
            Events.PlayerDeathCallback.Start((player, args) =>
            {
                var index = _bombers.FindIndex(x => x == player.UniqueID);
                if (index == -1) return;
                _bombers.Remove(player.UniqueID);
                Game.TriggerExplosion(player.GetWorldPosition());
            });
        }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            if (!Projectile.IsSlowProjectile(projectile.ProjectileItem)) return null;

            var bot = BotManager.SpawnBot(BotType.SuicideDwarf,
                team: Game.GetPlayer(InitialOwnerPlayerID).GetTeam(),
                ignoreFullSpawner: true,
                triggerOnSpawn: false);
            var fighter = bot.Player;
            var length = Math.Max(fighter.GetAABB().Width, fighter.GetAABB().Height);
            var position = projectile.Position + projectile.Direction * (length + 1);
            var dir = Math.Sign(position.X - Game.GetPlayer(InitialOwnerPlayerID).GetWorldPosition().X);

            fighter.SetNametagVisible(false);
            fighter.SetStatusBarsVisible(false);
            fighter.SetWorldPosition(position);
            fighter.SetLinearVelocity(projectile.Velocity / 20);
            fighter.SetFaceDirection(dir);

            ScriptHelper.Fall(fighter);
            _bombers.Add(fighter.UniqueID);
            projectile.FlagForRemoval();

            // player is invincible while being a projectile
            bot.SetHealth(5000);
            ScriptHelper.RunIf(() =>
            {
                bot.ResetModifiers();
                // must include interval time or the player modifiers will be reset immediately
            }, () => fighter.IsDead || fighter.IsRemoved || fighter.IsIdle && fighter.IsOnGround, interval: 25);

            return fighter;
        }
    }
    class TaserGun : RangeWpn
    {
        public TaserGun(IPlayer owner, WeaponItem name) : base(owner, name, RangedWeaponPowerup.Taser) { }

        public override float MaxRange { get { return 100; } }
        public override bool IsValidPowerup()
        {
            return Name == WeaponItem.PISTOL
                || Name == WeaponItem.PISTOL45
                || Name == WeaponItem.REVOLVER;
        }

        private IObject _head;
        private IObject _tail;
        private IObjectDistanceJoint _distanceJoint;
        private IObjectTargetObjectJoint _targetObject;
        private IObjectWeldJoint _weldJoint;
        private IPlayer _targetPlayer;

        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (!IsEquipping) return;

            var muzzleInfo = GetMuzleInfo();

            if (!Owner.IsHipFiring && !Owner.IsManualAiming || !muzzleInfo.IsSussess) RemoveObjects();
            if (!muzzleInfo.IsSussess) return;
            
            if (_tail != null) _tail.SetWorldPosition(muzzleInfo.Position);

            if (_targetPlayer == null && _head != null)
            {
                foreach (var bot in BotManager.GetBots())
                {
                    if (_head.GetAABB().Intersects(bot.Player.GetAABB()) && bot.Player.UniqueID != Owner.UniqueID)
                    {
                        Stun(bot);
                        break;
                    }
                }
            }
        }

        private void Stun(Bot bot)
        {
            if (bot.IsStunned) return;

            _targetPlayer = bot.Player;
            _targetPlayer.SetValidBotEliminateTarget(false);
            _weldJoint = ScriptHelper.Weld(_head, _targetPlayer);

            bot.Stun(6000).ContinueWith((r) =>
            {
                _targetPlayer.SetValidBotEliminateTarget(true);
                _targetPlayer = null;
                RemoveObjects();
            });
        }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            base.OnProjectileCreated(projectile);

            projectile.FlagForRemoval();

            if (_head != null) RemoveObjects();

            var muzzleInfo = GetMuzleInfo();
            if (!muzzleInfo.IsSussess) return;

            var velocity = projectile.Direction * 24;
            _head = Game.CreateObject("ItemDebrisFlamethrower01", projectile.Position);
            _head.SetLinearVelocity(velocity);
            var result = ScriptHelper.CreateRope(projectile.Position, _head, MaxRange, LineVisual.DJSteelWire);

            _tail = result.DistanceJointObject;
            _targetObject = result.TargetObjectJoint;
            _distanceJoint = result.DistanceJoint;
        }

        private void RemoveObjects()
        {
            if (_distanceJoint == null) return;
            _distanceJoint.Remove();
            _targetObject.Remove();
            _head.Remove();
            _tail.Remove();

            if (_weldJoint == null) return;
            _weldJoint.Remove();
        }
    }
    class TearingProjectile : Projectile
    {
        public TearingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Tearing)
        {
        }

        public float TearingChance { get; private set; }
        public float Tearing2Chance { get; private set; }

        protected override bool OnProjectileCreated()
        {
            if (IsExplosiveProjectile)
            {
                TearingChance = .9f;
                Tearing2Chance = .33f;
            }
            else
            {
                TearingChance = .25f;
                Tearing2Chance = 0f;

                if (IsShotgunShell)
                {
                    TearingChance = TearingChance / ProjectilesPerShell * 1.5f;
                    Tearing2Chance = TearingChance;
                }
            }

            TearingChance = MathHelper.Clamp(TearingChance * Instance.DamageDealtModifier, 0, 1);
            Tearing2Chance = MathHelper.Clamp(Tearing2Chance * Instance.DamageDealtModifier, 0, 1);

            return base.OnProjectileCreated();
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (!IsExplosiveProjectile)
            {
                if (!args.IsPlayer)
                    return;

                var player = Game.GetPlayer(args.HitObjectID);
                Strip(player);
            }
        }

        protected override void OnProjectileExploded(IEnumerable<IPlayer> playersInRadius)
        {
            base.OnProjectileExploded(playersInRadius);
            foreach (var player in playersInRadius)
                Strip(player);
        }

        private void Strip(IPlayer player)
        {
            if (player.IsBurnedCorpse || player.IsRemoved) return;

            var profile = player.GetProfile();
            var stripeableClothingTypes = ScriptHelper.StrippeableClothingTypes(profile);

            if (RandomHelper.Percentage(TearingChance))
            {
                StripPlayerClothingItem(player, stripeableClothingTypes);
            }
            if (RandomHelper.Percentage(Tearing2Chance))
            {
                StripPlayerClothingItem(player, stripeableClothingTypes);
            }

            var clothingTypes = 9f;
            var clothingTypesLeft = (float)stripeableClothingTypes.Count + (ScriptHelper.HaveUnderwear(profile) ? 1 : 0);
            var extraDamage = MathHelper.Lerp(0, 12, 1f - clothingTypesLeft / clothingTypes);
            player.DealDamage(extraDamage);
        }

        private void StripPlayerClothingItem(IPlayer player, List<ClothingType> clothingTypes)
        {
            var profile = player.GetProfile();
            if (!clothingTypes.Any() && !ScriptHelper.HaveUnderwear(profile)) return;

            if (!clothingTypes.Any())
            {
                var strippedProfile = ScriptHelper.StripUnderwear(profile);
                player.SetProfile(strippedProfile);
                player.SetBotName("Naked " + player.Name);
            }
            else
            {
                var clothingTypeToStrip = RandomHelper.GetItem(clothingTypes);
                var strippedProfile = ScriptHelper.Strip(profile, clothingTypeToStrip);

                player.SetProfile(strippedProfile);
            }
        }
    }
    class TermiteProjectile : Projectile
    {
        public TermiteProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Termite) { }

        protected override bool OnProjectileCreated()
        {
            Instance.DamageDealtModifier = .2f;
            return true;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (args.IsPlayer) return;

            var hitObject = Game.GetObject(args.HitObjectID);
            if (hitObject.GetCollisionFilter().CategoryBits != CategoryBits.DynamicG1 || hitObject.Name.Contains("Debris")) return;

            if (!hitObject.Destructable && RandomHelper.Percentage(.06f))
                hitObject.Destroy();

            // x4.5 damage for objects
            hitObject.DealDamage(args.Damage * 3.5f);

            if (!hitObject.DestructionInitiated) return;

            var isShotgunShell = IsShotgun(Instance.ProjectileItem);
            var oBox = hitObject.GetAABB();
            var pBox = Game.GetPlayer(InitialOwnerPlayerID).GetAABB();
            ScriptHelper.Timeout(() =>
            {
                var originalDebrises = Game.GetObjectsByArea(oBox).Where(x => x.GetLinearVelocity().Length() <= 30 && x.Name.Contains("Debris")).ToList();
                var debrises = new List<IObject>();
                var debrisCount = isShotgunShell ? 2 : RandomHelper.BetweenInt(4, 6);

                if (originalDebrises.Count == 0)
                {
                    for (var i = 0; i < debrisCount; i++)
                        debrises.Add(Game.CreateObject(RandomHelper.GetItem(MechaBot.DebrisList), oBox.Center));
                }
                var debrisCount2 = debrises.Count;
                for (var i = 0; i < debrisCount - debrisCount2; i++)
                    debrises.Add(Game.CreateObject(RandomHelper.GetItem(originalDebrises).Name, oBox.Center));
                originalDebrises.ForEach(o => o.Remove());

                foreach (var o in debrises)
                {
                    var dir = RandomHelper.Direction(10, 180 - 10);
                    var dirToOwner = pBox.Center - o.GetWorldPosition();

                    o.SetLinearVelocity(dir * RandomHelper.Between(30, 40));
                    o.SetAngularVelocity(RandomHelper.Between(-40, 40));

                    // Avoid hitting and disarming the one who fired
                    if (Math.Abs(MathExtension.ToDegree(MathExtension.AngleBetween(dir, dirToOwner))) > 30)
                        o.TrackAsMissile(true);
                }
            }, 17);
        }
    }
    class WeldingBullet : HoveringProjectile
    {
        public WeldingBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Welding)
        {
            throw new NotImplementedException();
        }
    }

