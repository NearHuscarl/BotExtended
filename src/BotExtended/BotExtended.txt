// This file is auto generated by ScriptLinker at 23:15:31 08/04/2020
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: NearHuscarl
* description: Spawn a variety of bots from the campaign and challenge maps to make thing more chaotic.
* mapmodes: versus
*/
        /// <summary>
        /// Placeholder constructor that's not to be included in the ScriptWindow!
        /// </summary>

        public void OnStartup()
        {
            // How to create a bot
            // 1. Define bot type in BotType.cs
            // 2. Define bot profile in BotProfiles.cs
            // 3. Define bot weapon in BotWeapons.cs
            // 4. Define bot behavior in BotBehaviors.cs (optional)
            // 5. Define bot info in BotInfos.cs
            // 6. Define bot class in Bots/ and add it to BotFactory.cs for additional behaviors (optional)
            // 7. Define bot faction name in BotFaction.cs (optional)
            // 8. Define bot faction and sub-faction in BotFactionSets.cs

            //System.Diagnostics.Debugger.Break();

            BotManager.Initialize();

            if (Game.IsEditorTest)
            {
                var player = Game.GetPlayers()[0];
                var modifiers = player.GetModifiers();

                modifiers.MaxHealth = 5000;
                modifiers.CurrentHealth = 5000;
                modifiers.EnergyConsumptionModifier = .1f;
                modifiers.RunSpeedModifier = 1.25f;
                modifiers.SprintSpeedModifier = 1.25f;
                modifiers.MeleeStunImmunity = 1;
                modifiers.InfiniteAmmo = 1;

                player.SetTeam(PlayerTeam.Team1);
                player.SetHitEffect(PlayerHitEffect.Metal);
                player.SetModifiers(modifiers);
                //player.GiveWeaponItem(WeaponItem.KNIFE);
                //player.GiveWeaponItem(WeaponItem.FLAREGUN);
                //player.GiveWeaponItem(WeaponItem.ASSAULT);
                player.GiveWeaponItem(WeaponItem.GRENADES);
                player.GiveWeaponItem(WeaponItem.STRENGTHBOOST);

                var n = 0;
                foreach (var p in Game.GetPlayers())
                {
                    if (p.Name != "Near")
                    {
                        //p.SetInputEnabled(false);
                        //p.SetUser(null);
                    }
                    if (p.Name == "Boffin")
                    {
                        p.SetHealth(0);
                    }
                    if (p.Name.StartsWith("Scientist") || p.Name.StartsWith("Lab"))
                        p.Remove();
                    if (p.Name.StartsWith("Engineer"))
                    {
                        if (n > 0) p.Remove();
                        n++;
                    }
                }

                //ScriptHelper.Timeout(() =>
                //{
                //    var me = Game.GetPlayers()[0];
                //    me.Disarm(WeaponItemType.Handgun, Vector2.Zero, false);
                //}, 3000);

                //Game.SetAllowedCameraModes(CameraMode.Static);
                //Game.SetCameraArea(new Area(10, -130, -10, 130));
                //// image size: 140 x 140 - top: 20 left: 30M 30F
                //Command.SetPlayer(new List<string>() { "near", "MirrorMan" });
                //Command.SetPlayer(new List<string>() { "player 2", "Agent" });
                //Command.SetPlayer(new List<string>() { "player 3", "Agent" });
                //Command.SetPlayer(new List<string>() { "player 4", "Agent" });
                //Command.SetPlayer(new List<string>() { "player 5", "Agent" });
                //Command.SetPlayer(new List<string>() { "player 6", "Agent" });
                //Command.SetPlayer(new List<string>() { "player 7", "Agent" });
                //Command.SetPlayer(new List<string>() { "player 8", "Agent" });
            }
        }

        public void OnShutdown()
        {
            BotManager.OnShutdown();
        }

    public enum BotAI
    {
        Debug,
        None, // Normal SF (not extended bot)

        Hacker,
        Expert,
        Hard,
        Normal,
        Easy,

        MeleeExpert, // == BotAI.Hacker but with range weapons disabled
        MeleeHard, // == BotAI.Expert but with range weapons disabled
        RangeExpert, // == BotAI.Hacker but with melee weapons disabled
        RangeHard, // == BotAI.Expert but with melee weapons disabled

        Grunt,
        Hulk,
        RagingHulk,

        // Jogger + hard melee/shooting
        AssassinMelee,
        AssassinRange,

        // Trigger-happy Grunt
        Cowboy,
        // Trigger-happy hard
        Sheriff,

        Babybear,
        Kingpin,
        Meatgrinder,
        Ninja,
        Sniper,
        Soldier,

        ZombieSlow,
        ZombieFast,
        ZombieHulk,
        ZombieFighter,
    }
        public static BotMeleeActions HulkMeleeActions
        {
            get
            {
                return new BotMeleeActions()
                {
                    Attack = (ushort)10,
                    AttackCombo = (ushort)20,
                    Block = (ushort)1,
                    Kick = (ushort)1,
                    Jump = (ushort)1,
                    Wait = (ushort)20, // Hulk's original is 50
                    Grab = (ushort)6
                };
            }
        }

        public static BotBehaviorSet GetBehaviorSet(BotAI botAI)
        {
            var botBehaviorSet = new BotBehaviorSet()
            {
                MeleeActions = BotMeleeActions.Default,
                MeleeActionsWhenHit = BotMeleeActions.DefaultWhenHit,
                MeleeActionsWhenEnraged = BotMeleeActions.DefaultWhenEnraged,
                MeleeActionsWhenEnragedAndHit = BotMeleeActions.DefaultWhenEnragedAndHit,
                ChaseRange = 44f,
                GuardRange = 40f,
            };

            switch (botAI)
            {
                #region Debug
                case BotAI.Debug:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotD);
                    botBehaviorSet.RangedWeaponBurstTimeMin = 5000;
                    botBehaviorSet.RangedWeaponBurstTimeMax = 5000;
                    botBehaviorSet.RangedWeaponBurstPauseMin = 0;
                    botBehaviorSet.RangedWeaponBurstPauseMax = 0;
                    break;
                }
                #endregion

                #region Easy
                case BotAI.Easy:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotD);
                    break;
                }
                #endregion

                #region Normal
                case BotAI.Normal:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotC);
                    break;
                }
                #endregion

                #region Hard
                case BotAI.Hard:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotB);
                    break;
                }
                #endregion

                #region Expert
                case BotAI.Expert:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotA);
                    break;
                }
                #endregion

                #region Hacker
                case BotAI.Hacker:
                {
                    botBehaviorSet.NavigationMode = BotBehaviorNavigationMode.PathFinding;
                    botBehaviorSet.MeleeMode = BotBehaviorMeleeMode.Default;
                    botBehaviorSet.EliminateEnemies = true;
                    botBehaviorSet.SearchForItems = true;
                    botBehaviorSet.OffensiveEnrageLevel = 0.8f;
                    botBehaviorSet.NavigationRandomPausesLevel = 0.1f;
                    botBehaviorSet.DefensiveRollFireLevel = 0.95f;
                    botBehaviorSet.DefensiveAvoidProjectilesLevel = 0.7f;
                    botBehaviorSet.OffensiveClimbingLevel = 0.7f;
                    botBehaviorSet.OffensiveSprintLevel = 0.6f;
                    botBehaviorSet.OffensiveDiveLevel = 0.6f;
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.9f;
                    botBehaviorSet.ChokePointPlayerCountThreshold = 1;
                    botBehaviorSet.ChokePointValue = 150f;
                    botBehaviorSet.MeleeWaitTimeLimitMin = 100f;
                    botBehaviorSet.MeleeWaitTimeLimitMax = 200f;
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.SetMeleeActionsToExpert();
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.RangedWeaponUsage = true;
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 50f;
                    botBehaviorSet.RangedWeaponAimShootDelayMax = 200f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = 50f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = 50f;
                    botBehaviorSet.RangedWeaponBurstTimeMin = 400f;
                    botBehaviorSet.RangedWeaponBurstTimeMax = 800f;
                    botBehaviorSet.RangedWeaponBurstPauseMin = 400f;
                    botBehaviorSet.RangedWeaponBurstPauseMax = 800f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 800f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;
                    botBehaviorSet.RangedWeaponPrecisionAimShootDelayMin = 25f;
                    botBehaviorSet.RangedWeaponPrecisionAimShootDelayMax = 50f;
                    botBehaviorSet.RangedWeaponPrecisionBurstTimeMin = 800f;
                    botBehaviorSet.RangedWeaponPrecisionBurstTimeMax = 1600f;
                    botBehaviorSet.RangedWeaponPrecisionBurstPauseMin = 100f;
                    botBehaviorSet.RangedWeaponPrecisionBurstPauseMax = 200f;
                    break;
                }
                #endregion

                #region MeleeExpert
                case BotAI.MeleeExpert:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.MeleeB);
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.9f;
                    botBehaviorSet.MeleeWaitTimeLimitMin = 600f;
                    botBehaviorSet.MeleeWaitTimeLimitMax = 800f;
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = true;
                    break;
                }
                #endregion

                #region MeleeHard
                case BotAI.MeleeHard:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.MeleeB);
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.75f;
                    botBehaviorSet.MeleeWaitTimeLimitMin = 800f;
                    botBehaviorSet.MeleeWaitTimeLimitMax = 1000f;
                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = false;
                    break;
                }
                #endregion

                #region Ninja == BotAI.MeleeExpert + more offensive melee tactic
                case BotAI.Ninja:
                {
                    botBehaviorSet = Rage(botBehaviorSet);
                    botBehaviorSet = VeryDefensive(botBehaviorSet);

                    botBehaviorSet.MeleeUsage = true;
                    botBehaviorSet.MeleeWeaponUsage = true;
                    botBehaviorSet.MeleeWeaponUseFullRange = true;
                    botBehaviorSet.SearchForItems = true;
                    botBehaviorSet.SearchItems = SearchItems.Melee | SearchItems.Throwable;

                    botBehaviorSet.OffensiveEnrageLevel = 0.5f;
                    botBehaviorSet.OffensiveDiveLevel = 0.1f;
                    break;
                }
                #endregion

                #region RangeExpert
                case BotAI.RangeExpert:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 600f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;
                    break;
                }
                #endregion

                #region RangeHard
                case BotAI.RangeHard:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponAccuracy = 0.75f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 600f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.9f;
                    break;
                }
                #endregion

                #region Sniper == BotAI.RangeExpert + Defensive
                case BotAI.Sniper:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.RangedA);
                    botBehaviorSet.RangedWeaponMode = BotBehaviorRangedWeaponMode.ManualAim;
                    botBehaviorSet.RangedWeaponAccuracy = 0.85f;
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 600f;
                    botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 2000f;
                    botBehaviorSet.RangedWeaponPrecisionAccuracy = 0.95f;

                    botBehaviorSet = VeryDefensive(botBehaviorSet);
                    botBehaviorSet = VeryInoffensive(botBehaviorSet);
                    botBehaviorSet.TeamLineUp = false;
                    break;
                }
                #endregion

                #region Grunt
                case BotAI.Grunt:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Grunt);

                    // Taken from PredefinedAIType.BotB, PredefinedAIType.Grunt is too slow in shooting
                    botBehaviorSet.RangedWeaponAimShootDelayMin = 200f;
                    botBehaviorSet.RangedWeaponAimShootDelayMax = 600f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = 200f;
                    botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = 600f;
                    botBehaviorSet.RangedWeaponBurstTimeMin = 400f;
                    botBehaviorSet.RangedWeaponBurstTimeMax = 800f;
                    botBehaviorSet.RangedWeaponBurstPauseMin = 400f;
                    botBehaviorSet.RangedWeaponBurstPauseMax = 800f;
                    break;
                }
                #endregion

                #region Hulk
                case BotAI.Hulk:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Hulk);
                    botBehaviorSet.SetMeleeActionsAll(HulkMeleeActions);
                    break;
                }
                #endregion

                #region RagingHulk
                case BotAI.RagingHulk:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hulk);
                    botBehaviorSet = Rage(botBehaviorSet);
                    botBehaviorSet.SetMeleeActionsAll(new BotMeleeActions()
                    {
                        Attack = (ushort)4,
                        AttackCombo = (ushort)20,
                        Block = (ushort)1,
                        Kick = (ushort)4,
                        Jump = (ushort)1,
                        Wait = (ushort)5,
                        Grab = (ushort)12
                    });
                    break;
                }
                #endregion

                #region Meatgrinder
                case BotAI.Meatgrinder:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Meatgrinder);
                    break;
                }
                #endregion

                #region Assassin
                case BotAI.AssassinMelee:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.MeleeHard);
                    botBehaviorSet = Jogger(botBehaviorSet);
                    break;
                }
                case BotAI.AssassinRange:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.RangeHard);
                    botBehaviorSet = Jogger(botBehaviorSet);
                    break;
                }
                #endregion

                #region BabyBear
                case BotAI.Babybear:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Easy);
                    botBehaviorSet.RangedWeaponUsage = false;
                    botBehaviorSet.SearchForItems = false;
                    botBehaviorSet.OffensiveClimbingLevel = 0.9f;
                    botBehaviorSet.OffensiveSprintLevel = 0.85f;
                    botBehaviorSet.GuardRange = 16;
                    botBehaviorSet.ChaseRange = 16;
                    break;
                }
                #endregion

                #region Cowboy
                case BotAI.Cowboy:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Grunt);
                    botBehaviorSet = TriggerHappy(botBehaviorSet);
                    break;
                }
                #endregion

                #region Kingpin
                case BotAI.Kingpin:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hard);
                    botBehaviorSet.SetMeleeActionsAll(HulkMeleeActions);
                    break;
                }
                #endregion

                #region Sheriff
                case BotAI.Sheriff:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hard);
                    botBehaviorSet = TriggerHappy(botBehaviorSet);
                    break;
                }
                #endregion

                #region Soldier
                case BotAI.Soldier:
                {
                    botBehaviorSet = GetBehaviorSet(BotAI.Hard);
                    botBehaviorSet = Defensive(botBehaviorSet);
                    break;
                }
                #endregion

                #region ZombieSlow
                case BotAI.ZombieSlow:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.ZombieA);
                    break;
                }
                #endregion

                #region ZombieFast
                case BotAI.ZombieFast:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.ZombieB);
                    break;
                }
                #endregion

                #region ZombieHulk
                case BotAI.ZombieHulk:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.Hulk);
                    botBehaviorSet.AttackDeadEnemies = true;
                    botBehaviorSet.SearchForItems = false;
                    botBehaviorSet.MeleeWeaponUsage = false;
                    botBehaviorSet.RangedWeaponUsage = false;
                    botBehaviorSet.PowerupUsage = false;
                    botBehaviorSet.ChokePointValue = 32f;
                    botBehaviorSet.ChokePointPlayerCountThreshold = 5;
                    botBehaviorSet.DefensiveRollFireLevel = 0.1f;
                    botBehaviorSet.OffensiveDiveLevel = 0f;
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0f;
                    break;
                }
                #endregion

                #region ZombieFighter
                case BotAI.ZombieFighter:
                {
                    botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.MeleeB);
                    botBehaviorSet.AttackDeadEnemies = true;
                    botBehaviorSet.SearchForItems = false;
                    botBehaviorSet.MeleeWeaponUsage = false;
                    botBehaviorSet.RangedWeaponUsage = false;
                    botBehaviorSet.PowerupUsage = false;
                    botBehaviorSet.ChokePointValue = 32f;
                    botBehaviorSet.ChokePointPlayerCountThreshold = 5;
                    botBehaviorSet.DefensiveRollFireLevel = 0.1f;
                    botBehaviorSet.OffensiveDiveLevel = 0f;
                    botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0f;
                    botBehaviorSet.RocketRideProficiency = .8f;
                    break;
                }
                #endregion

                #region default
                default:
                {
                    botBehaviorSet.NavigationMode = BotBehaviorNavigationMode.None;
                    botBehaviorSet.MeleeMode = BotBehaviorMeleeMode.None;
                    botBehaviorSet.EliminateEnemies = false;
                    botBehaviorSet.SearchForItems = false;
                    break;
                }
                #endregion
            }

            botBehaviorSet.SearchForItems = true;
            botBehaviorSet.SearchItems = SearchItems.None; // Disable SearchItems by setting to None

            return botBehaviorSet;
        }

        private static BotBehaviorSet Offensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.75f;

            botBehaviorSet.OffensiveEnrageLevel = 0.6f;
            botBehaviorSet.OffensiveClimbingLevel = 0.7f;
            botBehaviorSet.OffensiveSprintLevel = 0.7f;
            botBehaviorSet.OffensiveDiveLevel = 0.7f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet VeryOffensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0.9f;

            botBehaviorSet.OffensiveEnrageLevel = 0.7f;
            botBehaviorSet.OffensiveClimbingLevel = 0.9f;
            botBehaviorSet.OffensiveSprintLevel = 0.9f;
            botBehaviorSet.OffensiveDiveLevel = 0.8f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet Rage(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet = VeryOffensive(botBehaviorSet);
            botBehaviorSet.MeleeWaitTimeLimitMin = 200f;
            botBehaviorSet.MeleeWaitTimeLimitMax = 400f;
            botBehaviorSet.TeamLineUp = false;
            botBehaviorSet.RangedWeaponLOSIgnoreTeammates = true;

            botBehaviorSet.OffensiveEnrageLevel = 0.8f;
            botBehaviorSet.NavigationRandomPausesLevel = 0.1f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet VeryInoffensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.OffensiveEnrageLevel = 0.2f;
            botBehaviorSet.OffensiveClimbingLevel = 0f;
            botBehaviorSet.OffensiveSprintLevel = 0f;
            botBehaviorSet.OffensiveDiveLevel = 0f;
            botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel = 0f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet Defensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.DefensiveBlockLevel = 0f; // NOT YET IMPLEMENTED
            botBehaviorSet.DefensiveAvoidProjectilesLevel = .8f; // expert ref: .4f
            botBehaviorSet.DefensiveRollFireLevel = .85f; // .9f
            botBehaviorSet.SeekCoverWhileShooting = .85f; // .85f

            return botBehaviorSet;
        }

        private static BotBehaviorSet VeryDefensive(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.DefensiveBlockLevel = 0f; // NOT YET IMPLEMENTED
            botBehaviorSet.DefensiveAvoidProjectilesLevel = .95f;
            botBehaviorSet.DefensiveRollFireLevel = .95f;
            botBehaviorSet.SeekCoverWhileShooting = .99f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet Jogger(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.OffensiveClimbingLevel = 0.9f;
            botBehaviorSet.OffensiveSprintLevel = 0.9f;

            return botBehaviorSet;
        }

        private static BotBehaviorSet TriggerHappy(BotBehaviorSet botBehaviorSet)
        {
            botBehaviorSet.RangedWeaponAimShootDelayMin = 0;
            botBehaviorSet.RangedWeaponAimShootDelayMax = 50;
            botBehaviorSet.RangedWeaponHipFireAimShootDelayMin = 0;
            botBehaviorSet.RangedWeaponHipFireAimShootDelayMax = 25;
            botBehaviorSet.RangedWeaponPrecisionInterpolateTime = 50;

            return botBehaviorSet;
        }
        private static BotType[] CommonZombieTypes = new BotType[]
        {
            BotType.Zombie,
            BotType.ZombieAgent,
            BotType.ZombieFlamer,
            BotType.ZombieGangster,
            BotType.ZombieNinja,
            BotType.ZombiePolice,
            BotType.ZombieSoldier,
            BotType.ZombieThug,
            BotType.ZombieWorker,
        };
        private static BotType[] MutatedZombieTypes = new BotType[]
        {
            BotType.ZombieBruiser,
            BotType.ZombieChild,
            BotType.ZombieFat,
            BotType.ZombieFlamer,
        };

        public static FactionSet GetFactionSet(BotFaction botFaction)
        {
            if (Game.IsEditorTest) botFaction = BotFaction.None;
            var factionSet = new FactionSet(botFaction);

            switch (botFaction)
            {
                #region Assassin
                case BotFaction.Assassin:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.AssassinMelee, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.AssassinRange, 1f),
                    });
                    break;
                }
                #endregion

                #region Agent
                case BotFaction.Agent:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Agent, 1f),
                    });
                    break;
                }
                #endregion

                #region Bandido
                case BotFaction.Bandido:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Bandido, 1f),
                    });
                    break;
                }
                #endregion

                #region Biker
                case BotFaction.Biker:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Biker, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Biker, 0.5f),
                        new SubFaction(BotType.Thug, 0.5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Biker, 0.6f),
                        new SubFaction(BotType.BikerHulk, 0.4f),
                    });
                    break;
                }
                #endregion

                #region Clown
                case BotFaction.Clown:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.ClownCowboy, 0.5f),
                        new SubFaction(BotType.ClownGangster, 0.25f),
                        new SubFaction(BotType.ClownBoxer, 0.25f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.ClownCowboy, 0.6f),
                        new SubFaction(BotType.ClownGangster, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.ClownBoxer, 0.7f),
                        new SubFaction(BotType.ClownGangster, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Cowboy
                case BotFaction.Cowboy:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Cowboy, 1f),
                    });
                    break;
                }
                #endregion

                #region Engineer
                case BotFaction.Engineer:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Engineer, 1f),
                    });
                    break;
                }
                #endregion

                #region Gangster
                case BotFaction.Gangster:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Gangster, 0.8f),
                        new SubFaction(BotType.GangsterHulk, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Gangster, 0.7f),
                        new SubFaction(BotType.ThugHulk, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Survivor
                case BotFaction.Survivor:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(new BotType[]
                        {
                            BotType.SurvivorBiker,
                            BotType.SurvivorCrazy,
                            BotType.SurvivorNaked,
                            BotType.SurvivorRifleman,
                            BotType.SurvivorRobber,
                            BotType.SurvivorTough,
                        }, 1f),
                    });
                    break;
                }
                #endregion

                #region MetroCop
                case BotFaction.MetroCop:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.MetroCop, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.MetroCop, 0.7f),
                        new SubFaction(BotType.Agent2, 0.3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.MetroCop, 0.5f),
                        new SubFaction(BotType.Agent2, 0.5f),
                    });
                    break;
                }
                #endregion

                #region Police
                case BotFaction.Police:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Police, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Police, 0.7f),
                        new SubFaction(BotType.PoliceSWAT, 0.3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.PoliceSWAT, 0.8f),
                        new SubFaction(BotType.Police, 0.2f),
                    });
                    break;
                }
                #endregion

                #region PoliceSWAT
                case BotFaction.PoliceSWAT:
                {
                    var boss = RandomHelper.GetItem(BotType.None, BotType.Raze);
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(boss),
                        new SubFaction(BotType.PoliceSWAT, 1f),
                    });
                    break;
                }
                #endregion

                #region Punk
                case BotFaction.Punk:
                {
                    // TODO: add punk semi boss
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Punk, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Punk, 0.5f),
                        new SubFaction(BotType.Biker, 0.5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Punk, 0.6f),
                        new SubFaction(BotType.PunkHulk, 0.4f),
                    });
                    break;
                }
                #endregion

                #region Robot
                case BotFaction.Robot:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Cyborg, 1f),
                    });
                    break;
                }
                #endregion

                #region Sniper
                case BotFaction.Sniper:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Sniper, 1f),
                    });
                    break;
                }
                #endregion

                #region Spacer
                case BotFaction.Spacer:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Reznor),
                        new SubFaction(BotType.Spacer, 1f),
                    });
                    break;
                }
                #endregion

                #region Stripper
                case BotFaction.Stripper:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.Bodyguard, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.BikerHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.GangsterHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.PunkHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Stripper, .5f),
                        new SubFaction(BotType.ThugHulk, .5f),
                    });
                    break;
                }
                #endregion

                #region Soldier
                case BotFaction.Soldier:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Soldier, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Soldier, 0.7f),
                        new SubFaction(BotType.Sniper, 0.3f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Soldier, 0.9f),
                        new SubFaction(BotType.Soldier2, 0.1f),
                    });
                    break;
                }
                #endregion

                #region Thug
                case BotFaction.Thug:
                {
                    var boss = RandomHelper.GetItem(BotType.None, BotType.Bobby);
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(boss),
                        new SubFaction(BotType.Thug, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(boss),
                        new SubFaction(BotType.Thug, 0.5f),
                        new SubFaction(BotType.Biker, 0.5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(boss),
                        new SubFaction(BotType.Thug, 0.6f),
                        new SubFaction(BotType.ThugHulk, 0.4f),
                    });
                    break;
                }
                #endregion

                #region Zombie
                case BotFaction.Zombie:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Zombie, 0.4f),
                        new SubFaction(CommonZombieTypes, 0.6f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieBruiser, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieBruiser, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieChild, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieChild, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieFat, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieFat, 0.4f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.8f),
                        new SubFaction(BotType.ZombieFlamer, 0.2f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.6f),
                        new SubFaction(BotType.ZombieFlamer, 0.4f),
                    });
                    break;
                }
                #endregion

                #region ZombieMutated
                case BotFaction.ZombieMutated:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(MutatedZombieTypes, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.2f),
                        new SubFaction(MutatedZombieTypes, 0.8f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.4f),
                        new SubFaction(MutatedZombieTypes, 0.6f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(CommonZombieTypes, 0.7f),
                        new SubFaction(MutatedZombieTypes, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Boss_Balista
                case BotFaction.Boss_Balista:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Balista),
                        new SubFaction(BotType.Punk, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Balista),
                        new SubFaction(BotType.Punk, .5f),
                        new SubFaction(BotType.PunkHulk, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Balista),
                        new SubFaction(BotType.Punk, .75f),
                        new SubFaction(BotType.PunkHulk, .25f),
                    });
                    break;
                }
                #endregion

                #region Boss_Boffin
                case BotFaction.Boss_Boffin:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Boffin),
                        new SubFaction(BotType.Scientist, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Boffin),
                        new SubFaction(BotType.LabAssistant, .5f),
                        new SubFaction(BotType.Scientist, .5f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Boffin),
                        new SubFaction(BotType.Scientist, .75f),
                        new SubFaction(BotType.LabAssistant, .25f),
                    });
                    break;
                }
                #endregion

                #region Boss_Cindy
                case BotFaction.Boss_Cindy:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Cindy),
                        new SubFaction(BotType.Police, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Cindy),
                        new SubFaction(BotType.Police, 0.7f),
                        new SubFaction(BotType.PoliceSWAT, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Boss_Demolitionist
                case BotFaction.Boss_Demolitionist:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Demolitionist),
                    });
                    break;
                }
                #endregion

                #region Boss_Funnyman
                case BotFaction.Boss_Funnyman:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Funnyman),
                        new SubFaction(BotType.ClownBodyguard, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Funnyman),
                        new SubFaction(new BotType[]
                        {
                            BotType.ClownBoxer,
                            BotType.ClownCowboy,
                            BotType.ClownGangster,
                        }, 1f),
                    });
                    break;
                }
                #endregion

                #region Boss_Jo
                case BotFaction.Boss_Jo:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Jo),
                        new SubFaction(BotType.Biker, 0.6f),
                        new SubFaction(BotType.BikerHulk, 0.4f),
                    });
                    break;
                }
                #endregion

                #region Boss_Hacker
                case BotFaction.Boss_Hacker:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Hacker),
                        new SubFaction(BotType.Hacker),
                    });
                    break;
                }
                #endregion

                #region Boss_Incinerator
                case BotFaction.Boss_Incinerator:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Incinerator),
                    });
                    break;
                }
                #endregion

                #region Boss_Kingpin
                case BotFaction.Boss_Kingpin:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Kingpin),
                        new SubFaction(BotType.Bodyguard, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Kingpin),
                        new SubFaction(BotType.GangsterHulk, 0.55f),
                        new SubFaction(BotType.Bodyguard2, 0.45f),
                    });
                    break;
                }
                #endregion

                #region Boss_MadScientist
                case BotFaction.Boss_MadScientist:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Kriegbär),
                        new SubFaction(BotType.Fritzliebe),
                    });
                    break;
                }
                #endregion

                #region Boss_Meatgrinder
                case BotFaction.Boss_Meatgrinder:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Meatgrinder),
                    });
                    break;
                }
                #endregion

                #region Boss_Mecha
                case BotFaction.Boss_Mecha:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Mecha),
                    });
                    break;
                }
                #endregion

                #region Boss_MetroCop
                case BotFaction.Boss_MetroCop:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.MetroCop2),
                        new SubFaction(BotType.MetroCop, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.MetroCop2),
                        new SubFaction(BotType.MetroCop, 0.7f),
                        new SubFaction(BotType.Agent2, 0.3f),
                    });
                    break;
                }
                #endregion

                #region Boss_MirrorMan
                case BotFaction.Boss_MirrorMan:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.MirrorMan),
                    });
                    break;
                }
                #endregion

                #region Boss_Ninja
                case BotFaction.Boss_Ninja:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Ninja),
                    });
                    break;
                }
                #endregion

                #region Boss_Santa
                case BotFaction.Boss_Santa:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Santa),
                        new SubFaction(BotType.Elf, 1f),
                    });
                    break;
                }
                #endregion

                #region Boss_Sheriff
                case BotFaction.Boss_Sheriff:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Sheriff),
                        new SubFaction(BotType.Cowboy, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Sheriff),
                        new SubFaction(BotType.Bandido, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Sheriff),
                        new SubFaction(BotType.Cowboy, .5f),
                        new SubFaction(BotType.Bandido, .5f),
                    });
                    break;
                }
                #endregion

                #region Boss_Teddybear
                case BotFaction.Boss_Teddybear:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.Teddybear),
                        new SubFaction(BotType.Babybear),
                        new SubFaction(BotType.Babybear),
                    });
                    break;
                }
                #endregion

                #region Boss_Zombie
                case BotFaction.Boss_Zombie:
                {
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.ZombieFighter),
                        new SubFaction(CommonZombieTypes, 1f),
                    });
                    factionSet.AddFaction(new List<SubFaction>()
                    {
                        new SubFaction(BotType.ZombieFighter),
                        new SubFaction(CommonZombieTypes, 0.7f),
                        new SubFaction(MutatedZombieTypes, 0.3f),
                    });
                    break;
                }
                #endregion
            }

            return factionSet;
        }
    static class BotHelper
    {
        private static IScriptStorage _storage;
        public static IScriptStorage Storage
        {
            get
            {
                if (_storage == null)
                    _storage = Game.LocalStorage; return _storage;
            }
        }

        public static string StorageKey(string key)
        {
            return Constants.STORAGE_KEY_PREFIX + key;
        }
        public static string StorageKey(BotFaction botFaction, int factionIndex)
        {
            return Constants.STORAGE_KEY_PREFIX + SharpHelper.EnumToString(botFaction).ToUpperInvariant() + "_" + factionIndex;
        }

        public static IEnumerable<BotFaction> GetAvailableBotFactions()
        {
            return SharpHelper.EnumToList<BotFaction>().Where((f) => f != BotFaction.None);
        }

        public static BotFaction RandomFaction(List<BotFaction> botFactions, int botCount)
        {
            List<BotFaction> filteredBotFactions = null;
            if (botCount < 3) // Too few for a faction, spawn boss instead
            {
                filteredBotFactions = botFactions
                    .Select(g => g)
                    .Where(g => (int)g >= Constants.BOSS_FACTION_START_INDEX).ToList();
                if (!filteredBotFactions.Any())
                    filteredBotFactions = botFactions;
            }
            else
                filteredBotFactions = botFactions;

            var rndBotFaction = RandomHelper.GetItem(filteredBotFactions);

            return rndBotFaction;
        }

        public static List<PlayerSpawner> GetEmptyPlayerSpawners()
        {
            var spawners = Game.GetObjectsByName("SpawnPlayer");
            var emptySpawners = new List<PlayerSpawner>();
            var players = Game.GetPlayers();

            foreach (var spawner in spawners)
            {
                if (!ScriptHelper.SpawnerHasPlayer(spawner, players))
                {
                    emptySpawners.Add(new PlayerSpawner
                    {
                        Position = spawner.GetWorldPosition(),
                        HasSpawned = false,
                    });
                }
            }

            return emptySpawners;
        }

        // TODO: need better type detection
        public static BotType GetZombieType(BotType botType)
        {
            if (botType == BotType.None)
                return BotType.Zombie;

            var botInfo = GetInfo(botType);
            var aiType = botInfo.AIType;

            switch (aiType)
            {
                case BotAI.Hacker:
                case BotAI.Expert:
                case BotAI.MeleeExpert:
                    return BotType.ZombieFighter;

                case BotAI.Ninja:
                    return BotType.ZombieChild;

                case BotAI.Hulk:
                    return BotType.ZombieBruiser;
            }

            var modifiers = botInfo.Modifiers;

            if (modifiers.SprintSpeedModifier >= Speed.Fast)
                return BotType.ZombieChild;

            if (modifiers.SizeModifier >= Size.Big && modifiers.SizeModifier < Size.Chonky)
                return BotType.ZombieBruiser;
            if (modifiers.SizeModifier == Size.Chonky)
                return BotType.ZombieFat;

            return BotType.Zombie;
        }

        public static void Equip(IPlayer player, WeaponSet weaponSet)
        {
            if (player == null || weaponSet.IsEmpty) return;

            player.GiveWeaponItem(weaponSet.Melee);
            ProjectileManager.SetPowerup(player, weaponSet.Primary, weaponSet.PrimaryPowerup);
            ProjectileManager.SetPowerup(player, weaponSet.Secondary, weaponSet.SecondaryPowerup);
            player.GiveWeaponItem(weaponSet.Throwable);
            player.GiveWeaponItem(weaponSet.Powerup);

            if (weaponSet.UseLazer) player.GiveWeaponItem(WeaponItem.LAZER);
        }

        public static WeaponSet GetWeaponSet(IPlayer player)
        {
            var meleeWpn = player.CurrentMeleeMakeshiftWeapon.WeaponItem != WeaponItem.NONE ?
                player.CurrentMeleeMakeshiftWeapon.WeaponItem :
                player.CurrentMeleeWeapon.WeaponItem;
            var playerWpn = ProjectileManager.GetOrCreatePlayerWeapon(player);

            return new WeaponSet()
            {
                Melee = meleeWpn,
                // TODO: add melee powerup weapon here
                Primary = player.CurrentPrimaryWeapon.WeaponItem,
                PrimaryPowerup = playerWpn != null ? playerWpn.Primary.Powerup : RangedWeaponPowerup.None,
                Secondary = player.CurrentSecondaryWeapon.WeaponItem,
                SecondaryPowerup = playerWpn != null ? playerWpn.Secondary.Powerup : RangedWeaponPowerup.None,
                Throwable = player.CurrentThrownItem.WeaponItem,
                Powerup = player.CurrentPowerupItem.WeaponItem,
                // TODO: wait for gurt to add this: https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=4000
                //UseLazer = ...
            };
        }

        public static IProfile ToZombieProfile(IProfile profile)
        {
            switch (profile.Skin.Name)
            {
                case "Normal":
                case "Tattoos":
                case "Warpaint":
                    profile.Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", "");
                    break;

                case "Normal_fem":
                case "Tattoos_fem":
                case "Warpaint_fem":
                    profile.Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", "");
                    break;

                case "BearSkin":
                    profile.Skin = new IProfileClothingItem("FrankenbearSkin", "ClothingDarkGray", "ClothingLightBlue", "");
                    break;
            }

            return profile;
        }

        public static void SetPlayer(IPlayer player, BotType botType)
        {
            if (botType == BotType.None)
                return;
            BotManager.SpawnBot(botType, BotFaction.None, player, player.GetTeam());
        }

        public static void SetWeapon(IPlayer player, string weaponItemStr, string powerupStr)
        {
            var weaponItem = SharpHelper.StringToEnum<WeaponItem>(weaponItemStr);
            var type = Mapper.GetWeaponItemType(weaponItem);

            switch (type)
            {
                // TODO: Melee powerup
                case WeaponItemType.Melee:
                    break;
                case WeaponItemType.Rifle:
                case WeaponItemType.Handgun:
                {
                    var powerup = SharpHelper.StringToEnum<RangedWeaponPowerup>(powerupStr);
                    ProjectileManager.SetPowerup(player, weaponItem, powerup);
                    break;
                }
            }
        }
    }
    public class BotInfo
    {
        public BotInfo()
        {
            EquipWeaponChance = 1f;
            AIType = BotAI.Debug;
            SearchItems = SearchItems.None;
            IsBoss = false;
            SpawnLine = "";
            DeathLine = "";
            SpawnLineChance = 1f;
            DeathLineChance = 1f;
            ZombieStatus = ZombieStatus.Human;
            ImmuneToInfect = false;
            SearchRange = WpnSearchRange.Infinite;
            SpecificSearchItems = new HashSet<WeaponItem>();
        }

        public BotInfo(IPlayer player) : this()
        {
            EquipWeaponChance = 0f;
            AIType = BotAI.None;
            SearchItems = player.GetBotBehaviorSet().SearchItems;
            Modifiers = player.GetModifiers();
            SpawnLineChance = 0f;
            DeathLineChance = 0f;
        }

        private float equipWeaponChance;
        public float EquipWeaponChance
        {
            get { return equipWeaponChance; }
            set { equipWeaponChance = MathHelper.Clamp(value, 0, 1); }
        }

        public BotAI AIType { get; set; }
        public SearchItems SearchItems { get; set; }
        public HashSet<WeaponItem> SpecificSearchItems { get; set; }
        public PlayerModifiers Modifiers { get; set; }
        public bool IsBoss { get; set; }
        public float SearchRange { get; set; }
        public string SpawnLine { get; set; }
        public float SpawnLineChance { get; set; }
        public string DeathLine { get; set; }
        public float DeathLineChance { get; set; }

        private ZombieStatus zombieStatus;
        public ZombieStatus ZombieStatus
        {
            get { return zombieStatus; }
            set
            {
                if (ImmuneToInfect && value != ZombieStatus.Human)
                    throw new Exception("if ImmuneToInfect == true, ZombieStatus must be Human");
                zombieStatus = value;
            }
        }

        private bool immuneToInfect;
        public bool ImmuneToInfect
        {
            get { return immuneToInfect; }
            set
            {
                if (value == true && ZombieStatus != ZombieStatus.Human)
                    throw new Exception("if ImmuneToInfect == true, ZombieStatus must be Human");
                immuneToInfect = value;
            }
        }
    }
        public static BotInfo GetInfo(BotType botType)
        {
            var botInfo = new BotInfo();

            switch (botType)
            {
                #region Agent, Soldier
                case BotType.Agent:
                case BotType.Soldier:
                {
                    if (botType == BotType.Agent)
                    {
                        botInfo.SearchItems = SearchItems.Secondary;
                        botInfo.AIType = BotAI.Hard;
                    }
                    if (botType == BotType.Soldier || botType == BotType.Soldier2)
                    {
                        botInfo.SearchItems = SearchItems.Primary;
                        botInfo.AIType = BotAI.Soldier;
                    }
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                #endregion

                #region Assassin
                case BotType.AssassinMelee:
                {
                    botInfo.AIType = BotAI.AssassinMelee;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                case BotType.AssassinRange:
                {
                    botInfo.AIType = BotAI.AssassinRange;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                #endregion

                #region Boxer
                case BotType.ClownBoxer:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        ProjectileDamageDealtModifier = DamageDealt.VeryLow,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeForceModifier = MeleeForce.Strong,
                        SizeModifier = Size.VeryBig,
                    };
                    break;
                }
                #endregion

                #region Cowboy (faster grunt)
                case BotType.ClownCowboy:
                case BotType.Cowboy:
                {
                    botInfo.AIType = BotAI.Cowboy;
                    botInfo.EquipWeaponChance = 1f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        SizeModifier = Size.Small,
                    };
                    botInfo.SpawnLine = "Move 'em on, head 'em up...";
                    botInfo.SpawnLineChance = 0.05f;
                    botInfo.DeathLine = "Count 'em in, ride 'em... oof!";
                    botInfo.DeathLineChance = 0.05f;
                    break;
                }
                #endregion

                #region Hulk
                case BotType.BikerHulk:
                case BotType.GangsterHulk:
                case BotType.ThugHulk:
                case BotType.PunkHulk:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ProjectileDamageDealtModifier = DamageDealt.VeryLow,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        SizeModifier = Size.VeryBig,
                    };
                    break;
                }
                #endregion

                #region Grunt
                case BotType.Biker:
                case BotType.NaziScientist:
                case BotType.Scientist:
                case BotType.Thug:
                case BotType.Punk:
                {
                    botInfo.AIType = BotAI.Grunt;
                    botInfo.EquipWeaponChance = 0.5f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                #endregion

                #region Grunt with weapon
                case BotType.Agent2:
                case BotType.Bandido:
                case BotType.Bodyguard:
                case BotType.Bodyguard2:
                case BotType.ClownBodyguard:
                case BotType.ClownGangster:
                case BotType.Cyborg:
                case BotType.Elf:
                case BotType.Engineer:
                case BotType.Gangster:
                case BotType.LabAssistant:
                case BotType.MetroCop:
                case BotType.Police:
                case BotType.PoliceSWAT:
                case BotType.Spacer:
                {
                    botInfo.AIType = BotAI.Grunt;
                    botInfo.EquipWeaponChance = 1f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.BelowNormal,
                        CurrentHealth = Health.BelowNormal,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };

                    if (botType == BotType.Engineer)
                        botInfo.Modifiers.SizeModifier = Size.Normal;
                    if (botType == BotType.Cyborg)
                        botInfo.ImmuneToInfect = true;
                    break;
                }
                #endregion

                #region Survivor
                case BotType.SurvivorBiker:
                case BotType.SurvivorCrazy:
                case BotType.SurvivorNaked:
                case BotType.SurvivorRifleman:
                case BotType.SurvivorRobber:
                case BotType.SurvivorTough:
                {
                    botInfo.AIType = BotAI.Grunt;
                    botInfo.EquipWeaponChance = 1f;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        ProjectileDamageDealtModifier = DamageDealt.BelowNormal,
                        MeleeDamageDealtModifier = DamageDealt.BelowNormal,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.ZombieStatus = ZombieStatus.Infected;

                    switch (botType)
                    {
                        case BotType.SurvivorCrazy:
                            botInfo.Modifiers.CurrentHealth = Health.VeryWeak;
                            botInfo.Modifiers.MeleeDamageDealtModifier = DamageDealt.High;
                            botInfo.Modifiers.RunSpeedModifier = Speed.Fast;
                            botInfo.Modifiers.SprintSpeedModifier = Speed.Fast;
                            break;
                        case BotType.SurvivorNaked:
                            botInfo.Modifiers.RunSpeedModifier = Speed.AboveNormal;
                            botInfo.Modifiers.SprintSpeedModifier = Speed.AboveNormal;
                            break;
                        case BotType.SurvivorTough:
                            botInfo.Modifiers.MeleeDamageTakenModifier = DamageTaken.SlightlyResistant;
                            botInfo.Modifiers.ProjectileDamageTakenModifier = DamageTaken.SlightlyResistant;
                            botInfo.Modifiers.MeleeForceModifier = MeleeForce.Strong;
                            botInfo.Modifiers.SizeModifier = Size.Big;
                            botInfo.Modifiers.RunSpeedModifier = Speed.Slow;
                            botInfo.Modifiers.SprintSpeedModifier = Speed.Slow;
                            break;
                    }

                    break;
                }
                #endregion

                #region Sniper
                case BotType.Sniper:
                {
                    botInfo.AIType = BotAI.Sniper;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        ProjectileDamageDealtModifier = DamageDealt.FairlyHigh,
                        ProjectileCritChanceDealtModifier = DamageDealt.FairlyHigh,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        SizeModifier = Size.BelowNormal,
                    };
                    break;
                }
                #endregion

                #region Stripper
                case BotType.Stripper:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Makeshift | SearchItems.Health;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        ProjectileDamageDealtModifier = DamageDealt.FairlyHigh,
                        ProjectileCritChanceDealtModifier = DamageDealt.FairlyHigh,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        FireDamageTakenModifier = DamageTaken.Vulnerable,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    break;
                }
                #endregion

                #region Zombie
                case BotType.Zombie:
                case BotType.ZombieAgent:
                case BotType.ZombieGangster:
                case BotType.ZombieNinja:
                case BotType.ZombiePolice:
                case BotType.ZombiePrussian:
                case BotType.ZombieSoldier:
                case BotType.ZombieThug:
                case BotType.ZombieWorker:
                {
                    botInfo.AIType = BotAI.ZombieSlow;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Weak,
                        CurrentHealth = Health.Weak,
                        MeleeDamageDealtModifier = DamageDealt.Low,
                        RunSpeedModifier = Speed.Slow,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.SpawnLine = "Brainzz";
                    botInfo.SpawnLineChance = 0.1f;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie fast
                case BotType.ZombieChild:
                {
                    botInfo.AIType = BotAI.ZombieFast;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyWeak,
                        CurrentHealth = Health.ExtremelyWeak,
                        MeleeDamageDealtModifier = DamageDealt.Low,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        MeleeForceModifier = MeleeForce.Weak,
                        SizeModifier = Size.VerySmall,
                    };
                    botInfo.SpawnLine = "Brainzz";
                    botInfo.SpawnLineChance = 0.1f;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie fat
                case BotType.ZombieFat:
                {
                    botInfo.AIType = BotAI.ZombieSlow;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.EmbarrassinglyWeak,
                        CurrentHealth = Health.EmbarrassinglyWeak,
                        MeleeDamageDealtModifier = DamageDealt.FairlyHigh,
                        RunSpeedModifier = Speed.BarelyAny,
                        SprintSpeedModifier = Speed.BarelyAny,
                        SizeModifier = Size.Chonky,
                    };
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie flamer
                case BotType.ZombieFlamer:
                {
                    botInfo.AIType = BotAI.ZombieFast;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyWeak,
                        CurrentHealth = Health.ExtremelyWeak,
                        FireDamageTakenModifier = DamageTaken.UltraResistant,
                        MeleeDamageDealtModifier = DamageDealt.VeryLow,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Zombie hulk
                case BotType.ZombieBruiser:
                {
                    botInfo.AIType = BotAI.ZombieHulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        SizeModifier = Size.ExtremelyBig,
                    };
                    botInfo.SpawnLine = "Brainzz";
                    botInfo.SpawnLineChance = 0.1f;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion

                #region Boss Balista
                case BotType.Balista:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.All;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                        MeleeDamageDealtModifier = DamageDealt.FairlyLow,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        SizeModifier = Size.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Bobby
                case BotType.Bobby:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        SizeModifier = Size.AboveNormal,
                        ProjectileDamageDealtModifier = DamageDealt.FairlyHigh,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Boffin
                case BotType.Boffin:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                    };
                    botInfo.SpecificSearchItems.Add(WeaponItem.GRENADE_LAUNCHER);
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Cindy
                case BotType.Cindy:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Streetsweeper | SearchItems.Powerups | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        MaxEnergy = Stamina.High,
                        CurrentEnergy = Stamina.High,
                        RunSpeedModifier = Speed.Fast,
                        SprintSpeedModifier = Speed.Fast,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Demolitionist
                case BotType.Demolitionist:
                {
                    botInfo.AIType = BotAI.RangeHard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        ProjectileDamageDealtModifier = DamageDealt.UltraHigh,
                        ProjectileCritChanceDealtModifier = DamageDealt.UltraHigh,
                        MeleeDamageDealtModifier = DamageDealt.VeryHigh,
                        RunSpeedModifier = Speed.BarelyAny,
                        SprintSpeedModifier = Speed.BarelyAny,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Fritzliebe
                case BotType.Fritzliebe:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        SizeModifier = Size.BelowNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Funnyman
                case BotType.Funnyman:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health | SearchItems.Powerups;
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        SizeModifier = Size.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Hacker
                case BotType.Hacker:
                {
                    botInfo.AIType = BotAI.Hacker;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.AboveNormal,
                        CurrentHealth = Health.AboveNormal,
                        EnergyConsumptionModifier = Constants.TOGGLE_OFF,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Incinerator
                case BotType.Incinerator:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        FireDamageTakenModifier = DamageTaken.ExtremelyResistant,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Jo
                case BotType.Jo:
                {
                    botInfo.AIType = BotAI.MeleeExpert;
                    botInfo.SearchItems = SearchItems.Makeshift | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        MeleeForceModifier = MeleeForce.Strong,
                        SizeModifier = Size.Big,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Kingpin
                case BotType.Kingpin:
                {
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Streetsweeper;
                    botInfo.AIType = BotAI.Kingpin;
                    botInfo.SearchRange = WpnSearchRange.Nearby; // encourage this bot to fight in melee to crush enemies
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        SizeModifier = Size.AboveNormal,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Kriegbär
                case BotType.Kriegbär:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.UltraStrong,
                        CurrentHealth = Health.UltraStrong,
                        MaxEnergy = Stamina.UltraHigh,
                        CurrentEnergy = Stamina.UltraHigh,
                        FireDamageTakenModifier = DamageTaken.VeryVulnerable,
                        MeleeForceModifier = MeleeForce.VeryStrong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        SizeModifier = Size.Chonky,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SpawnLine = "HNNNARRRRRRRHHH!";
                    break;
                }
                #endregion

                #region Boss Meatgrinder
                case BotType.Meatgrinder:
                {
                    botInfo.AIType = BotAI.Meatgrinder;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        MaxEnergy = Stamina.ExtremelyHigh,
                        CurrentEnergy = Stamina.ExtremelyHigh,
                        ProjectileDamageDealtModifier = DamageDealt.VeryHigh,
                        MeleeDamageDealtModifier = DamageDealt.VeryHigh,
                        MeleeForceModifier = MeleeForce.Strong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.Fast,
                        SizeModifier = Size.Big,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Mecha
                case BotType.Mecha:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.ExtremelyStrong,
                        CurrentHealth = Health.ExtremelyStrong,
                        ExplosionDamageTakenModifier = DamageTaken.ExtremelyResistant, // 1200 (300 / 0.25)
                        ProjectileDamageTakenModifier = DamageTaken.VeryResistant, // 600
                        ImpactDamageTakenModifier = DamageTaken.Unbeatable,
                        MeleeForceModifier = MeleeForce.UltraStrong,
                        MeleeStunImmunity = Constants.TOGGLE_ON,
                        CanBurn = Constants.TOGGLE_OFF,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.BelowNormal,
                        SizeModifier = Size.ExtremelyBig,
                    };
                    botInfo.IsBoss = true;
                    botInfo.ImmuneToInfect = true;
                    break;
                }
                #endregion

                #region Boss MetroCop2
                case BotType.MetroCop2:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Streetsweeper | SearchItems.Powerups | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        SizeModifier = Size.BelowNormal,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss MirrorMan
                case BotType.MirrorMan:
                {
                    botInfo.AIType = BotAI.Expert;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Health | SearchItems.Streetsweeper | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MaxEnergy = Stamina.VeryHigh,
                        CurrentEnergy = Stamina.VeryHigh,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        ProjectileDamageTakenModifier = DamageTaken.ExtremelyResistant,
                        ProjectileCritChanceTakenModifier = DamageTaken.ExtremelyResistant,
                        SizeModifier = Size.Small,
                    };
                    botInfo.ImmuneToInfect = true; // robot cannot be infected
                    botInfo.SpawnLine = "BRING IT ON!!!";
                    botInfo.SpawnLineChance = .1f;
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Ninja
                case BotType.Ninja:
                {
                    botInfo.AIType = BotAI.Ninja;
                    botInfo.SearchItems = SearchItems.Melee;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MeleeDamageDealtModifier = DamageDealt.FairlyHigh,
                        RunSpeedModifier = Speed.ExtremelyFast,
                        SprintSpeedModifier = Speed.ExtremelyFast,
                        SizeModifier = Size.Small,
                        EnergyRechargeModifier = EnergyRecharge.Quick,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SpawnLine = "Tatakai...";
                    botInfo.DeathLine = "H-h-haji...";
                    break;
                }
                #endregion

                #region Boss Teddybear
                case BotType.Teddybear:
                {
                    botInfo.AIType = BotAI.Hulk;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.UltraStrong,
                        CurrentHealth = Health.UltraStrong,
                        MaxEnergy = Stamina.UltraHigh,
                        CurrentEnergy = Stamina.UltraHigh,
                        MeleeDamageDealtModifier = DamageDealt.High,
                        MeleeForceModifier = MeleeForce.VeryStrong,
                        RunSpeedModifier = Speed.BelowNormal,
                        SprintSpeedModifier = Speed.BelowNormal,
                        SizeModifier = Size.Chonky,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Babybear
                case BotType.Babybear:
                {
                    botInfo.AIType = BotAI.Babybear;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryWeak,
                        CurrentHealth = Health.VeryWeak,
                        RunSpeedModifier = Speed.VeryFast,
                        SprintSpeedModifier = Speed.VeryFast,
                        MeleeForceModifier = MeleeForce.Weak,
                        SizeModifier = Size.Tiny,
                    };
                    botInfo.IsBoss = true; // set IsBoss to spawn once
                    break;
                }
                #endregion

                #region Boss Raze
                case BotType.Raze:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Secondary | SearchItems.Health;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        ExplosionDamageTakenModifier = DamageTaken.VeryResistant,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    break;
                }
                #endregion

                #region Boss Reznor
                case BotType.Reznor:
                {
                    botInfo.AIType = BotAI.Hard;
                    botInfo.SearchItems = SearchItems.Primary | SearchItems.Health | SearchItems.Powerups;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        RunSpeedModifier = Speed.Slow,
                        SprintSpeedModifier = Speed.Slow,
                        MeleeForceModifier = MeleeForce.AboveNormal,
                        CanBurn = Constants.TOGGLE_ON,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                        SizeModifier = Size.Big,
                    };
                    botInfo.IsBoss = true; // set IsBoss to spawn once
                    break;
                }
                #endregion

                #region Boss Santa
                case BotType.Santa:
                {
                    botInfo.AIType = BotAI.Hard; // ChallengeA
                    botInfo.SearchRange = WpnSearchRange.InSight;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        ExplosionDamageTakenModifier = DamageTaken.VeryResistant,
                        MeleeForceModifier = MeleeForce.Strong,
                        SizeModifier = Size.Big,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SpawnLine = "Ho ho ho!";
                    botInfo.DeathLine = "Ho ohhhh...";
                    break;
                }
                #endregion

                #region Boss Sheriff
                case BotType.Sheriff:
                {
                    botInfo.AIType = BotAI.Sheriff;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.Strong,
                        CurrentHealth = Health.Strong,
                        MaxEnergy = Stamina.AboveNormal,
                        CurrentEnergy = Stamina.AboveNormal,
                        ProjectileDamageTakenModifier = DamageTaken.FairlyResistant,
                        SizeModifier = Size.AboveNormal,
                        ItemDropMode = ItemDropMode.Break,
                        InfiniteAmmo = Constants.TOGGLE_ON,
                    };
                    botInfo.IsBoss = true;
                    botInfo.SearchItems = SearchItems.Secondary | SearchItems.Powerups | SearchItems.Health;
                    botInfo.SpawnLine = "I wanted to break your jaw";
                    botInfo.SpawnLineChance = .1f;
                    break;
                }
                #endregion

                #region Boss ZombieFighter
                case BotType.ZombieFighter:
                {
                    botInfo.AIType = BotAI.ZombieFighter;
                    botInfo.Modifiers = new PlayerModifiers(true)
                    {
                        MaxHealth = Health.VeryStrong,
                        CurrentHealth = Health.VeryStrong,
                        MeleeDamageDealtModifier = DamageDealt.AboveNormal,
                        RunSpeedModifier = Speed.AboveNormal,
                        SprintSpeedModifier = Speed.AboveNormal,
                        SizeModifier = Size.Big,
                    };
                    botInfo.IsBoss = true;
                    botInfo.ZombieStatus = ZombieStatus.Zombie;
                    break;
                }
                #endregion
            }

            return botInfo;
        }
    public static class BotManager
    {
        private static Dictionary<PlayerTeam, BotFaction> CurrentBotFaction = new Dictionary<PlayerTeam, BotFaction>();
        public static int CurrentFactionSetIndex { get; private set; }
        public static Faction CurrentFaction { get; private set; }
        public const PlayerTeam BotTeam = PlayerTeam.Team4;

        // Player corpses waiting to be transformed into zombies
        private static Dictionary<int, InfectedCorpse> m_infectedCorpses = new Dictionary<int, InfectedCorpse>();
        private static List<PlayerSpawner> m_playerSpawners;
        private static Dictionary<int, Bot> m_bots = new Dictionary<int, Bot>();

        public static void Initialize()
        {
            ProjectileManager.Initialize();
            WeaponManager.Initialize();

            m_playerSpawners = BotHelper.GetEmptyPlayerSpawners();

            Events.PlayerWeaponAddedActionCallback.Start(OnPlayerPickedupWeapon);
            Events.PlayerWeaponRemovedActionCallback.Start(OnPlayerDroppedWeapon);
            Events.PlayerMeleeActionCallback.Start(OnPlayerMeleeAction);
            Events.PlayerDamageCallback.Start(OnPlayerDamage);
            Events.PlayerDeathCallback.Start(OnPlayerDeath);
            Events.ProjectileHitCallback.Start(OnProjectileHit);
            Events.UpdateCallback.Start(OnUpdate);
            Events.PlayerKeyInputCallback.Start(OnPlayerKeyInput);
            Events.UserMessageCallback.Start(Command.OnUserMessage);

            var settings = Settings.Get();
            if (settings.RoundsUntilFactionRotation == 1 || settings.CurrentFaction[BotTeam] == BotFaction.None)
            {
                foreach (var team in SharpHelper.EnumToList<PlayerTeam>())
                {
                    if (team == PlayerTeam.Independent)
                        continue;

                    List<BotFaction> botFactions;

                    if (settings.BotFactions[team].Count > 1)
                        botFactions = settings.BotFactions[team]
                            .Where((f) => f != settings.CurrentFaction[team])
                            .ToList();
                    else
                        botFactions = settings.BotFactions[team];

                    // TODO: disregard spawning only boss or not when count < 3 if team != BotTeam
                    var faction = BotHelper.RandomFaction(botFactions, settings.BotCount);

                    if (team == BotTeam)
                        ScriptHelper.PrintMessage("Change faction to " + faction);
                    CurrentBotFaction[team] = faction;
                }
            }
            else
            {
                CurrentBotFaction = settings.CurrentFaction;
            }
            BotHelper.Storage.SetItem(BotHelper.StorageKey("CURRENT_FACTION"), CurrentBotFaction.Values.Select(f => f.ToString()).ToArray());

            if (settings.FactionRotationEnabled)
            {
                var roundTillNextFactionRotation = settings.RoundsUntilFactionRotation == 1 ?
                    settings.FactionRotationInterval
                    :
                    settings.RoundsUntilFactionRotation - 1;
                BotHelper.Storage.SetItem(BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION"), roundTillNextFactionRotation);
            }

            var botSpawnCount = Math.Min(settings.BotCount, m_playerSpawners.Count);

            foreach (var item in CurrentBotFaction)
            {
                var team = item.Key;
                var faction = item.Value;

                if (faction == BotFaction.None)
                    continue;

                if (team == BotTeam)
                {
                    SpawnRandomFaction(faction, botSpawnCount, team);
                }
                else
                {
                    SpawnRandomFaction(faction, 0, team);
                }
            }

            var activeUsers = ScriptHelper.GetActiveUsersByAccountID();

            foreach (var ps in settings.PlayerSettings)
            {
                var pst = PlayerSettings.Parse(ps);

                if (activeUsers.ContainsKey(pst.AccountID))
                {
                    var userID = activeUsers[pst.AccountID].UserIdentifier;
                    var player = Game.GetActiveUser(userID).GetPlayer();

                    if (pst.BotType != "None")
                    {
                        var botType = SharpHelper.StringToEnum<BotType>(pst.BotType);
                        BotHelper.SetPlayer(player, botType);
                    }

                    foreach (var w in pst.Weapons)
                    {
                        BotHelper.SetWeapon(player, w[0], w[1]);
                    }
                }
            }
        }

        private static void SpawnRandomFaction(BotFaction botFaction, int botCount, PlayerTeam team)
        {
            var factionSet = GetFactionSet(botFaction);
            if (factionSet.Factions.Count == 0) return;
            var rndFactionIndex = RandomHelper.Rnd.Next(factionSet.Factions.Count);
            CurrentFaction = factionSet.Factions[rndFactionIndex];
            CurrentFactionSetIndex = rndFactionIndex;

            var bots = botCount == 0
                ? CurrentFaction.Spawn(team)
                : CurrentFaction.Spawn(botCount, team);

            foreach (var bot in bots) TriggerOnSpawn(bot);
        }

        public static void TriggerOnSpawn(Bot bot) { bot.OnSpawn(); }

        private static void OnPlayerPickedupWeapon(IPlayer player, PlayerWeaponAddedArg arg)
        {
            if (player == null) return;
            var bot = GetBot(player);
            if (bot == Bot.None) return;
            bot.OnPickedupWeapon(arg);
        }

        private static void OnPlayerDroppedWeapon(IPlayer player, PlayerWeaponRemovedArg arg)
        {
            if (player == null) return;
            var bot = GetBot(player);
            if (bot == Bot.None) return;
            bot.OnDroppedWeapon(arg);
        }

        private static float m_lastUpdateTime = 0f;
        public static void OnUpdate(float _)
        {
            var elapsed = Game.TotalElapsedGameTime - m_lastUpdateTime;

            // Turning corpses killed by zombie into another one after some time
            foreach (var corpse in m_infectedCorpses.Values.ToList())
            {
                corpse.Update();

                if (corpse.IsZombie || !corpse.CanTurnIntoZombie)
                {
                    m_infectedCorpses.Remove(corpse.UniqueID);
                }
            }

            foreach (var player in Game.GetPlayers())
            {
                var bot = GetBot(player);

                if (bot != Bot.None)
                {
                    if (bot.Player.IsDead && bot.IsInfectedByZombie
                        && !m_infectedCorpses.ContainsKey(bot.Player.UniqueID))
                    {
                        AddInfectedCorpse(bot);
                    }
                    bot.Update(elapsed);
                }
                else
                    Wrap(player); // Normal players that are not extended bots
            }

            m_lastUpdateTime = Game.TotalElapsedGameTime;
        }

        private static void OnPlayerMeleeAction(IPlayer attacker, PlayerMeleeHitArg[] args)
        {
            if (attacker == null) return;

            foreach (var arg in args)
            {
                if (!arg.IsPlayer) continue;

                var maybePlayer = arg.HitObject;
                var bot = GetBot(maybePlayer);

                if (bot != Bot.None)
                {
                    bot.OnMeleeDamage(attacker, arg);
                }
            }
        }

        private static void OnPlayerDamage(IPlayer player, PlayerDamageArgs args)
        {
            if (player == null) return;

            IPlayer attacker = null;
            if (args.DamageType == PlayerDamageEventType.Melee)
            {
                attacker = Game.GetPlayer(args.SourceID);
            }
            if (args.DamageType == PlayerDamageEventType.Projectile)
            {
                var projectile = Game.GetProjectile(args.SourceID);
                attacker = Game.GetPlayer(projectile.OwnerPlayerID);
            }

            var bot = GetBot(player);
            if (bot != Bot.None)
            {
                bot.OnDamage(attacker, args);
            }
        }

        private static void OnPlayerDeath(IPlayer player, PlayerDeathArgs args)
        {
            if (player == null) return;

            var bot = GetBot(player);
            if (bot == Bot.None) return;

            bot.OnDeath(args);

            if (args.Removed)
            {
                m_bots.Remove(bot.Player.UniqueID);
            }
            if (args.Killed)
            {
                AddInfectedCorpse(bot);
            }
        }

        private static void AddInfectedCorpse(Bot bot)
        {
            if (bot.Info.ZombieStatus == ZombieStatus.Infected)
            {
                var player = bot.Player;
                m_infectedCorpses.Add(player.UniqueID, new InfectedCorpse(player, bot.Type, bot.Faction));
            }
        }

        private static void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            if (!args.IsPlayer) return;

            var player = Game.GetPlayer(args.HitObjectID);
            var bot = GetBot(player);
            if (bot == Bot.None) return;

            // I use this instead of PlayerDamage callback because this one include additional
            // info like normal vector
            bot.OnProjectileHit(projectile, args);
        }

        private static void OnPlayerKeyInput(IPlayer player, VirtualKeyInfo[] keyInfos)
        {
            var bot = GetBot(player);
            if (bot == Bot.None) return;

            bot.OnPlayerKeyInput(keyInfos);
        }

        public static Bot GetBot(int UniqueID)
        {
            Bot bot;
            if (m_bots.TryGetValue(UniqueID, out bot)) return bot;
            return Bot.None;
        }

        public static Bot GetBot(IObject player) { return GetBot(player.UniqueID); }

        private static IPlayer SpawnPlayer(bool ignoreFullSpawner = false)
        {
            List<PlayerSpawner> emptySpawners = null;

            if (ignoreFullSpawner)
            {
                emptySpawners = m_playerSpawners;
            }
            else
            {
                emptySpawners = m_playerSpawners
                    .Select(Q => Q)
                    .Where(Q => Q.HasSpawned == false)
                    .ToList();
            }

            if (!emptySpawners.Any())
            {
                return null;
            }

            var rndSpawner = RandomHelper.GetItem(emptySpawners);
            var player = Game.CreatePlayer(rndSpawner.Position);

            rndSpawner.HasSpawned = true;

            return player;
        }

        private static Bot Wrap(IPlayer player)
        {
            var bot = new Bot(player, BotType.None, BotFaction.None);
            m_bots.Add(player.UniqueID, bot);
            TriggerOnSpawn(bot);

            return bot;
        }

        public static Bot SpawnBot(
            BotType botType,
            BotFaction faction = BotFaction.None,
            IPlayer player = null,
            PlayerTeam team = BotTeam,
            bool ignoreFullSpawner = false,
            bool triggerOnSpawn = true)
        {
            if (player == null) player = SpawnPlayer(ignoreFullSpawner);
            if (player == null) return null;

            player.SetTeam(team);

            var bot = BotFactory.Create(player, botType, faction);
            var info = bot.Info;
            var weaponSet = WeaponSet.Empty;

            if (RandomHelper.Percentage(info.EquipWeaponChance))
            {
                weaponSet = RandomHelper.GetItem(GetWeapons(botType));
            }
            BotHelper.Equip(player, weaponSet);

            var profile = RandomHelper.GetItem(GetProfiles(botType));
            player.SetProfile(profile);
            if (player.Name == "COM")
                player.SetBotName(profile.Name);

            var behaviorSet = GetBehaviorSet(info.AIType);

            behaviorSet.SearchItems = info.SearchItems;
            behaviorSet.SearchItemRange = info.SearchRange;

            bot.SetBotBehaviorSet(behaviorSet, true);
            player.SetModifiers(info.Modifiers);
            player.SetBotBehaviorActive(true);

            m_bots[player.UniqueID] = bot; // This may be updated if using setplayer command

            if (triggerOnSpawn)
                TriggerOnSpawn(bot);

            return bot;
        }

        public static void OnShutdown() { StoreStatistics(); }

        private static void StoreStatistics()
        {
            if (!Game.IsGameOver) return; // User exits in the middle of the round
            var factionDead = true;

            foreach (var player in Game.GetPlayers())
            {
                if (!player.IsDead && player.GetTeam() == BotTeam)
                {
                    factionDead = false;
                    break;
                }
            }

            var bosses = string.Join(".", CurrentFaction.Bosses);
            var factionWinStatsKey = BotHelper.StorageKey(CurrentBotFaction[BotTeam], CurrentFactionSetIndex)
                + "_" + bosses.ToUpper() + "_WIN_STATS";
            int[] factionOldWinStats;
            int winCount, totalMatch;

            if (BotHelper.Storage.TryGetItemIntArr(factionWinStatsKey, out factionOldWinStats))
            {
                if (factionDead)
                    winCount = factionOldWinStats[0];
                else
                    winCount = factionOldWinStats[0] + 1;
                totalMatch = factionOldWinStats[1] + 1;
            }
            else
            {
                winCount = factionDead ? 0 : 1;
                totalMatch = 1;
            }

            BotHelper.Storage.SetItem(factionWinStatsKey, new int[] { winCount, totalMatch });
        }

        public static IEnumerable<Bot> GetBots() { return GetBots<Bot>(); }
        public static IEnumerable<T> GetBots<T>() where T : Bot
        {
            foreach (var bot in m_bots.Values)
            {
                var b = bot as T;
                if (b != null) yield return b;
            }
        }
    }
        public static List<IProfile> GetProfiles(BotType botType)
        {
            var profiles = new List<IProfile>();

            switch (botType)
            {
                #region Agent
                case BotType.Agent:
                case BotType.Agent2:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Agent",
                        Accesory = new IProfileClothingItem("AgentSunglasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Agent",
                        Accesory = new IProfileClothingItem("AgentSunglasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Assassin
                case BotType.AssassinMelee:
                case BotType.AssassinRange:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Assassin",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Assassin",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Assassin",
                        Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Assassin",
                        Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Assassin",
                        Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Assassin",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Bandido
                case BotType.Bandido:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("Poncho2", "ClothingDarkYellow", "ClothingLightYellow"),
                        ChestUnder = new IProfileClothingItem("Shirt", "ClothingDarkOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Sombrero", "ClothingOrange", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkRed", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingOrange", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = new IProfileClothingItem("Scarf", "ClothingLightOrange", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkYellow", "ClothingLightGray"),
                        Head = new IProfileClothingItem("Sombrero", "ClothingLightBrown", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkRed", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingOrange", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray", "ClothingLightGray"),
                        ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkYellow", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingOrange", "ClothingYellow"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = new IProfileClothingItem("Scarf", "ClothingOrange", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("AmmoBelt_fem", "ClothingDarkGray", "ClothingLightGray"),
                        ChestUnder = new IProfileClothingItem("UnbuttonedShirt_fem", "ClothingDarkOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingGray", "ClothingLightGray"),
                        Head = new IProfileClothingItem("Sombrero2", "ClothingLightOrange", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingOrange", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkYellow", "ClothingLightGray"),
                        Head = new IProfileClothingItem("Sombrero", "ClothingLightBrown", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkPurple", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingOrange", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("AmmoBelt_fem", "ClothingDarkGray", "ClothingLightGray"),
                        ChestUnder = new IProfileClothingItem("TrainingShirt_fem", "ClothingOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Sombrero2", "ClothingLightOrange", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightYellow", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"),
                        Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingOrange", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Bandido",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("Poncho_fem", "ClothingDarkOrange", "ClothingDarkYellow"),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie_fem", "ClothingOrange", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Sombrero", "ClothingDarkPink", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkOrange", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"),
                        Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingOrange", "ClothingLightGray"),
                    });
                    break;
                }
                #endregion

                #region Balista
                case BotType.Balista:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Balista",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("MilitaryJacket_fem", "ClothingDarkYellow", "ClothingLightRed", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Afro", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SmallBelt_fem", "ClothingBrown", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Biker
                case BotType.Biker:
                case BotType.BikerHulk:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedJacket_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkPurple", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Headband", "ClothingLightBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkPurple", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightBlue", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkPink", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedJacket_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkPink", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Headband", "ClothingLightBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Headband", "ClothingLightBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Headband", "ClothingLightBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightBlue", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedJacket_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkBlue", "ClothingLightBlue", ""),
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkPurple", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkPink", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkBlue", "ClothingLightBlue", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Biker",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkPink", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingLightBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightBlue", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Bobby
                case BotType.Bobby:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Bobby",
                        Accesory = new IProfileClothingItem("DogTag", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("VestBlack", "ClothingDarkBlue", "ClothingDarkBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("BucketHat", "ClothingDarkGray", "ClothingLightYellow", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Bodyguard
                case BotType.Bodyguard:
                case BotType.Bodyguard2:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Bodyguard",
                        Accesory = new IProfileClothingItem("AgentSunglasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Boffin
                case BotType.Boffin:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Boffin",
                        Accesory = new IProfileClothingItem("Glasses", "ClothingGreen", "ClothingLightGreen", ""),
                        ChestOver = new IProfileClothingItem("Coat", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingYellow", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Mohawk", "ClothingLightGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Cindy
                case BotType.Cindy:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Cindy",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightBlue", ""),
                        ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingDarkGray", "ClothingOrange", ""),
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Cap", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkCyan", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region ClownBodyguard
                case BotType.ClownBodyguard:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Bodyguard",
                        Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingLightCyan", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("HighHeels", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("BucketHat", "ClothingLightCyan", "ClothingLightGray", ""),
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightCyan", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Bodyguard",
                        Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingLightYellow", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("HighHeels", "ClothingLightYellow", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("BucketHat", "ClothingLightYellow", "ClothingLightGray", ""),
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Bodyguard",
                        Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingPink", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("HighHeels", "ClothingPink", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("BucketHat", "ClothingPink", "ClothingLightGray", ""),
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingPink", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Bodyguard",
                        Accesory = new IProfileClothingItem("ClownMakeup_fem", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacket_fem", "ClothingLightGreen", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("HighHeels", "ClothingLightGreen", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("BucketHat", "ClothingLightGreen", "ClothingLightGray", ""),
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGreen", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ClownBoxer
                case BotType.ClownBoxer:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Boxer",
                        Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingDarkOrange", "ClothingOrange", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingRed", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("StripedPants", "ClothingLightOrange", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightYellow", ""),
                    });
                    break;
                }
                #endregion

                #region ClownCowboy
                case BotType.ClownCowboy:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Cowboy",
                        Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Poncho", "ClothingPurple", "ClothingGreen", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingLightBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Fedora2", "ClothingOrange", "ClothingPurple", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region ClownGangster
                case BotType.ClownGangster:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Clown Gangster",
                        Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingLightYellow", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingLightBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("StylishHat", "ClothingPurple", "ClothingLightGreen", ""),
                        Legs = new IProfileClothingItem("StripedPants", "ClothingPurple", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingBrown", "ClothingLightYellow", ""),
                    });
                    break;
                }
                #endregion

                #region Cowboy
                case BotType.Cowboy:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingBrown", "ClothingBrown", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("CowboyHat", "ClothingLightBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = new IProfileClothingItem("Scarf", "ClothingLightOrange", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingDarkOrange", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Fedora", "ClothingLightBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkRed", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingOrange", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = new IProfileClothingItem("Scarf", "ClothingLightYellow", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("UnbuttonedShirt", "ClothingLightYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingDarkOrange", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Fedora2", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkOrange", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingDarkPink", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("CowboyHat", "ClothingLightBrown", "ClothingLightGreen", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingBrown", "ClothingBrown", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkBrown", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingDarkRed", "ClothingDarkRed", ""),
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("CowboyHat", "ClothingDarkBrown", "ClothingLightBrown", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkBrown", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cowboy",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingDarkGray", "ClothingDarkGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("CowboyHat", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow", ""),
                    });
                    break;
                }
                #endregion

                #region Cyborg
                case BotType.Cyborg:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Cyborg",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingLightGray", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cyborg",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingLightGray", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cyborg",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("OfficerJacket_fem", "ClothingLightGray", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("BodyArmor_fem", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin5", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cyborg",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkPurple", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin5", "ClothingLightCyan", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cyborg",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingLightGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightCyan", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Cyborg",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingLightCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Sneakers", "ClothingLightCyan", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingLightGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin5", "ClothingLightCyan", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Demolitionist
                case BotType.Demolitionist:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "The Demolitionist",
                        Accesory = new IProfileClothingItem("AgentSunglasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("GrenadeBelt", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Elf
                case BotType.Elf:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Elf",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingGreen", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("SantaHat", "ClothingGreen", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGreen", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGreen", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Elf",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacket_fem", "ClothingGreen", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("SantaHat", "ClothingGreen", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingGreen", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingPink", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGreen", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Engineer
                case BotType.Engineer:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Engineer",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("PithHelmet", "ClothingLightGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Engineer",
                        Accesory = new IProfileClothingItem("Glasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("KevlarVest", "ClothingOrange", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("PithHelmet", "ClothingYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Engineer",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("PithHelmet", "ClothingYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Engineer",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingRed", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("WeldingHelmet", "ClothingLightYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Fritzliebe
                case BotType.Fritzliebe:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Dr. Fritzliebe",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("FLDisguise", "ClothingLightGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Funnyman
                case BotType.Funnyman:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Funnyman",
                        Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StripedSuitJacket", "ClothingLightBlue", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingLightYellow", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingLightGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("StripedPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Jo
                case BotType.Jo:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Jo",
                        Accesory = new IProfileClothingItem("Cigar", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkOrange", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SmallBelt_fem", "ClothingLightBrown", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Hacker
                case BotType.Hacker:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Hacker",
                        Accesory = new IProfileClothingItem("Goggles", "ClothingDarkGreen", "ClothingLightCyan", ""),
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkGray", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingOrange", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingLightGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("BaseballCap", "ClothingDarkGray", "ClothingLightCyan", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Hacker",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkGray", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingOrange", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingLightGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("BaseballCap", "ClothingDarkGray", "ClothingLightCyan", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Gangster
                case BotType.Gangster:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingDarkYellow", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkYellow", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Flatcap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkPink", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Flatcap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingGray", "ClothingGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingDarkYellow", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingBrown", "ClothingDarkYellow", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingDarkYellow", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Flatcap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkYellow", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("StylishHat", "ClothingGray", "ClothingDarkPink", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingGray", "ClothingDarkGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkYellow", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Flatcap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightYellow", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingGray", "ClothingGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingDarkYellow", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingBrown", "ClothingDarkYellow", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkPink", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt_fem", "ClothingGray", "ClothingDarkPink", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("HighHeels", "ClothingDarkPink", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink", ""),
                        Legs = new IProfileClothingItem("Skirt_fem", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin2", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region GangsterHulk
                case BotType.GangsterHulk:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster Hulk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingDarkYellow", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Flatcap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster Hulk",
                        Accesory = new IProfileClothingItem("Cigar", "ClothingBrown", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingDarkYellow", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Gangster Hulk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingBrown", "ClothingDarkYellow", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("BucketHat", "ClothingGray", "ClothingGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightYellow", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Incinerator
                case BotType.Incinerator:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "The Incinerator",
                        Accesory = new IProfileClothingItem("GasMask", "ClothingDarkYellow", "ClothingLightOrange", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacketBlack", "ClothingDarkYellow", "ClothingOrange", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkOrange", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Headband", "ClothingOrange", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkYellow", "ClothingLightOrange", ""),
                    });
                    break;
                }
                #endregion

                #region Kingpin
                case BotType.Kingpin:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Kingpin",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StripedSuitJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingPink", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingLightGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("TopHat", "ClothingDarkGray", "ClothingPink", ""),
                        Legs = new IProfileClothingItem("StripedPants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Kriegbär
                case BotType.Kriegbär:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Kriegbär #2",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("FrankenbearSkin", "ClothingDarkGray", "ClothingLightBlue", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region LabAssistant
                case BotType.LabAssistant:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Lab Assistant",
                        Accesory = new IProfileClothingItem("Mask", "ClothingLightCyan", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Lab Assistant",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingCyan", "ClothingLightCyan", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Spacer
                case BotType.Spacer:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingOrange", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingLightOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = new IProfileClothingItem("Armband", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingDarkCyan", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingLightOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = new IProfileClothingItem("Armband", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingLightOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Mohawk", "ClothingDarkGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("JacketBlack", "ClothingOrange", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingOrange", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingGray", "ClothingLightCyan", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants", "ClothingOrange", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("Apron_fem", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Mohawk", "ClothingLightPurple", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("StripedPants_fem", "ClothingOrange", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightCyan", ""),
                        Waist = new IProfileClothingItem("CombatBelt_fem", "ClothingLightOrange", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("KevlarVest", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("HawaiiShirt", "ClothingDarkGray", "ClothingLightCyan", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightCyan", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightCyan", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Spacer",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("JacketBlack", "ClothingGray", "ClothingLightCyan", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingOrange", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightOrange", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingLightOrange", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region SurvivorBiker
                case BotType.SurvivorBiker:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Survivor",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("JacketBlack", "ClothingDarkGray", "ClothingGray", ""),
                        ChestUnder = new IProfileClothingItem("HawaiiShirt", "ClothingLightGray", "ClothingLightRed", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingLightRed", "ClothingDarkGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region SurvivorCrazy
                case BotType.SurvivorCrazy:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Survivor",
                        Accesory = new IProfileClothingItem("SmallMoustache", "ClothingLightRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Cap", "ClothingBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingBrown", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region SurvivorNaked
                case BotType.SurvivorNaked:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Survivor",
                        Accesory = new IProfileClothingItem("DogTag", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("Sneakers", "ClothingGray", "ClothingGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Cap", "ClothingDarkGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region SurvivorRifleman
                case BotType.SurvivorRifleman:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Survivor",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Cap", "ClothingDarkGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin5", "ClothingLightRed", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingBrown", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region SurvivorRobber
                case BotType.SurvivorRobber:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Survivor",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("JacketBlack", "ClothingDarkGray", "ClothingGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region SurvivorTough
                case BotType.SurvivorTough:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Survivor",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("KevlarVest", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("LumberjackShirt2", "ClothingBrown", "ClothingDarkBrown", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet2", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin5", "ClothingLightRed", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Meatgrinder
                case BotType.Meatgrinder:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "The Meatgrinder",
                        Accesory = new IProfileClothingItem("GoalieMask", "ClothingLightGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("Apron", "ClothingLightPink", "ClothingLightGray"),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingDarkRed", "ClothingLightGray"),
                        Head = new IProfileClothingItem("ChefHat", "ClothingLightGray", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink"),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Mecha
                case BotType.Mecha:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Mecha Fritzliebe",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("MechSkin", "ClothingLightGray", "ClothingLightRed", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region MetroCop
                case BotType.MetroCop:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "MetroCop",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray"),
                        Head = new IProfileClothingItem("MetroLawGasMask", "ClothingGray", "ClothingLightGreen"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "MetroCop",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray"),
                        Head = new IProfileClothingItem("MetroLawMask", "ClothingGray", "ClothingLightGreen"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "MetroCop",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray"),
                        Head = new IProfileClothingItem("MetroLawGasMask", "ClothingGray", "ClothingLightRed"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin5", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingGray", "ClothingLightGray"),
                    });
                    break;
                }
                #endregion

                #region MetroCop2
                case BotType.MetroCop2:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "MetroCop",
                        Accesory = new IProfileClothingItem("Earpiece", "ClothingLightGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray"),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "MetroCop",
                        Accesory = new IProfileClothingItem("Earpiece", "ClothingLightGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("BodyArmor", "ClothingGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray"),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "MetroCop",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingGray"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGreen", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray"),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightRed"),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region MirrorMan
                case BotType.MirrorMan:
                    profiles.Add(new IProfile()
                    {
                        Name = "MirrorMan",
                        Accesory = new IProfileClothingItem("ClownMakeup", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("Shirt", "ClothingLightBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGloves", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Hood", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Sash", "ClothingDarkBlue", "ClothingLightGray", ""),
                    });
                    break;
                #endregion

                #region Mutant
                case BotType.Mutant:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("RestraintMask", "ClothingLightCyan", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("RestraintMask", "ClothingCyan", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("RestraintMask", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("RestraintMask", "ClothingLightCyan", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Mutant",
                        Accesory = new IProfileClothingItem("GasMask", "ClothingDarkGreen", "ClothingLightGreen", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin5", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region NaziLabAssistant
                case BotType.NaziLabAssistant:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Lab Assistant",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region NaziMuscleSoldier
                case BotType.NaziMuscleSoldier:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Soldier",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingLightBrown", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBrown", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region NaziScientist
                case BotType.NaziScientist:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Scientist",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("HazmatMask", "ClothingCyan", "ClothingLightGreen", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Scientist",
                        Accesory = new IProfileClothingItem("Armband_fem", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacket_fem", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack_fem", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("HazmatMask", "ClothingCyan", "ClothingLightGreen", ""),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region NaziSoldier
                case BotType.NaziSoldier:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Soldier",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("GermanHelmet", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Soldier",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingLightBrown", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Cap", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBrown", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Soldier",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingLightBrown", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("GermanHelmet", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBrown", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Nazi Soldier",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("MetroLawJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("SpikedHelmet", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region SSOfficer
                case BotType.SSOfficer:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "SS Officer",
                        Accesory = new IProfileClothingItem("Armband", "ClothingRed", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingDarkGray", "ClothingLightYellow", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("OfficerHat", "ClothingDarkGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Ninja
                case BotType.Ninja:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Ninja",
                        Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Ninja",
                        Accesory = new IProfileClothingItem("Balaclava", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Ninja",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack_fem", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Ninja",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Police
                case BotType.Police:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Police Officer",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region PoliceSWAT
                case BotType.PoliceSWAT:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "SWAT",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("KevlarVest_fem", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet2", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "SWAT",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("KevlarVest", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet2", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Punk
                case BotType.Punk:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingLightYellow", "ClothingOrange", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Buzzcut", "ClothingDarkGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Mohawk", "ClothingLightRed", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("JacketBlack_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Beret", "ClothingDarkYellow", "ClothingLightYellow", ""),
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Mohawk", "ClothingLightYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Mohawk", "ClothingLightPurple", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingPink", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Buzzcut", "ClothingDarkGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedJacket", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingLightYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin2", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Vest", "ClothingLightYellow", "ClothingLightYellow", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Mohawk", "ClothingOrange", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightPurple", ""),
                        ChestOver = new IProfileClothingItem("Vest", "ClothingLightYellow", "ClothingLightYellow", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingLightYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Beret", "ClothingDarkYellow", "ClothingLightYellow", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("CoatBlack_fem", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Beret", "ClothingDarkYellow", "ClothingLightYellow", ""),
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingDarkGray", "ClothingLightOrange", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkGray", "ClothingLightOrange", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingDarkOrange", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Hood", "ClothingLightRed", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Warpaint", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region PunkHulk
                case BotType.PunkHulk:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk Muscle",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk Muscle",
                        Accesory = new IProfileClothingItem("Goggles", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightRed", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk Muscle",
                        Accesory = new IProfileClothingItem("RestraintMask", "ClothingDarkYellow", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightRed", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk Muscle",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingOrange", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("CombatBelt", "ClothingLightBlue", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Punk Muscle",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Vest", "ClothingLightYellow", "ClothingLightYellow", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingDarkYellow", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Raze
                case BotType.Raze:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Raze",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightBlue", ""),
                        ChestOver = new IProfileClothingItem("OfficerJacket_fem", "ClothingDarkGray", "ClothingYellow", ""),
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkOrange", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Cap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightBlue", ""),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingGray", "ClothingYellow", ""),
                    });
                    break;
                }
                #endregion

                #region Reznor
                case BotType.Reznor:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Reznor",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingGreen", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingDarkOrange", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingGray", "ClothingLightGreen", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingGreen", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SmallBelt", "ClothingGreen", "ClothingLightGreen", ""),
                    });
                    break;
                }
                #endregion

                #region Santa
                case BotType.Santa:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Bad Santa",
                        Accesory = new IProfileClothingItem("SantaMask", "ClothingLightGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("Coat", "ClothingRed", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("SantaHat", "ClothingRed", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingRed", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkRed", "ClothingLightYellow", ""),
                    });
                    break;
                }
                #endregion

                #region Scientist
                case BotType.Scientist:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Scientist",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacket", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("SafetyGlovesBlack", "ClothingBlue", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("HazmatMask", "ClothingCyan", "ClothingLightGreen", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Scientist",
                        Accesory = new IProfileClothingItem("Mask", "ClothingLightCyan", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("OfficerJacket", "ClothingCyan", "ClothingCyan", ""),
                        ChestUnder = new IProfileClothingItem("SweaterBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingLightCyan", "ClothingLightGray", ""),
                        Head = new IProfileClothingItem("Hood", "ClothingCyan", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin4", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Sheriff
                case BotType.Sheriff:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Sheriff Sternwood",
                        Accesory = new IProfileClothingItem("Moustache", "ClothingGray", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingLightBrown", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("SergeantHat", "ClothingLightBrown", "ClothingLightYellow", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkBrown", "ClothingLightYellow", ""),
                    });
                    break;
                }
                #endregion

                #region Sniper
                case BotType.Sniper:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Sniper",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGreen", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Sniper",
                        Accesory = new IProfileClothingItem("Vizor", "ClothingDarkGray", "ClothingLightRed", ""),
                        ChestOver = new IProfileClothingItem("AmmoBelt", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("Gloves", "ClothingGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkGreen", "ClothingDarkGray", ""),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Soldier
                case BotType.Soldier:
                case BotType.Soldier2:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin4", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin4", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin2", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("MilitaryShirt_fem", "ClothingDarkYellow", "ClothingLightBlue", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin1", "ClothingLightYellow", ""),
                        Waist = new IProfileClothingItem("SatchelBelt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region Stripper
                case BotType.Stripper:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Stripper",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("RidingBoots", "ClothingBrown", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Stripper",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Stripper",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("HighHeels", "ClothingLightRed", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingLightRed", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Stripper",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingGreen", "ClothingLightGray", ""),
                        Feet = null,
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingGreen", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Stripper",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("ShoulderHolster_fem", "ClothingPurple", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("RidingBootsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("Normal_fem", "Skin4", "ClothingPurple", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Bear
                case BotType.Teddybear:
                case BotType.Babybear:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Teddybear",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = null,
                        Skin = new IProfileClothingItem("BearSkin", "Skin1", "ClothingLightGray"),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region Thug
                case BotType.Thug:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkCyan", "ClothingLightYellow"),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkCyan", "ClothingLightYellow"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin3", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray"),
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightGreen"),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingBrown", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray"),
                        Head = null,
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin3", "ClothingLightYellow"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray"),
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin2", "ClothingLightGreen"),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingBrown", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("StuddedVest_fem", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray"),
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin2", "ClothingLightGreen"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingBrown", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingBlue", "ClothingLightGray"),
                        Head = new IProfileClothingItem("MotorcycleHelmet", "ClothingDarkGreen", "ClothingLightYellow"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos_fem", "Skin1", "ClothingLightOrange"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingBrown", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("StuddedVest", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("BaseballCap", "ClothingRed", "ClothingLightRed"),
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin1", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingLightBlue", "ClothingLightBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingDarkRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightGray"),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("DogTag", "ClothingLightGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("VestBlack", "ClothingDarkBlue", "ClothingBlue"),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray", "ClothingLightGray"),
                        Head = new IProfileClothingItem("WoolCap", "ClothingLightRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingPink"),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingBrown", "ClothingLightGray"),
                        Head = new IProfileClothingItem("Headband", "ClothingLightRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("TornPants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin3", "ClothingLightYellow"),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = new IProfileClothingItem("VestBlack_fem", "ClothingBlue", "ClothingDarkBlue"),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingBlue", "ClothingLightGray"),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("GlovesBlack", "ClothingBlue", "ClothingLightGray"),
                        Head = new IProfileClothingItem("Headband", "ClothingLightRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkPurple", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal_fem", "Skin2", "ClothingDarkYellow"),
                        Waist = new IProfileClothingItem("Belt_fem", "ClothingDarkBlue", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingLightBlue", "ClothingLightBlue"),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkBlue", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingRed", "ClothingLightGray"),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Tattoos", "Skin1", "ClothingDarkYellow"),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ThugHulk
                case BotType.ThugHulk:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug Hulk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin3", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug Hulk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin2", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Thug Hulk",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray"),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray"),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray"),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingLightBlue", "ClothingLightGray"),
                        Skin = new IProfileClothingItem("Normal", "Skin1", "ClothingLightGray"),
                        Waist = new IProfileClothingItem("Belt", "ClothingGray", "ClothingLightGray"),
                    });
                    break;
                }
                #endregion

                #region Zombie
                case BotType.Zombie:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = null,
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieAgent
                case BotType.ZombieAgent:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Agent",
                        Accesory = new IProfileClothingItem("SunGlasses", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieBruiser
                case BotType.ZombieBruiser:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Bruiser",
                        Accesory = new IProfileClothingItem("RestraintMask", "ClothingGray", "ClothingLightGray", ""),
                        ChestOver = new IProfileClothingItem("VestBlack", "ClothingBlue", "ClothingDarkBlue", ""),
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkPurple", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieChild
                case BotType.ZombieChild:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Child",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingPurple", "ClothingLightGray", ""),
                        Feet = null,
                        Gender = Gender.Female,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Child",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingPurple", "ClothingLightGray", ""),
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieFat
                case BotType.ZombieFat:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Fat Zombie",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingRed", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Shorts", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieFighter
                case BotType.ZombieFighter:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Dead Cop",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("Sweater", "ClothingGreen", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = new IProfileClothingItem("FingerlessGloves", "ClothingDarkGray", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Dead Merc",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingBrown", "ClothingLightBrown", ""),
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("AviatorHat", "ClothingBrown", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingBrown", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Dead Vigilante",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TShirt", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Cap", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Dead Spy",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("SuitJacketBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithBowtie", "ClothingLightGray", "ClothingDarkGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Dead Pilot",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("ShoulderHolster", "ClothingDarkBrown", "ClothingDarkBrown", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingLightGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SmallBelt", "ClothingDarkGray", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Dead Driver",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Jacket", "ClothingBrown", "ClothingBrown", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingGray", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Belt", "ClothingDarkGray", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region ZombieFlamer
                case BotType.ZombieFlamer:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Flamer",
                        Accesory = new IProfileClothingItem("Glasses", "ClothingLightYellow", "ClothingLightYellow", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("SleevelessShirtBlack", "ClothingGray", "ClothingLightGray", ""),
                        Feet = null,
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("ShortsBlack", "ClothingDarkGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieGangster
                case BotType.ZombieGangster:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingLightBlue", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("StylishHat", "ClothingGray", "ClothingPink", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingGray", "ClothingDarkYellow", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingPink", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Flatcap", "ClothingGray", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("StylishHat", "ClothingGray", "ClothingDarkYellow", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("SuitJacket", "ClothingGray", "ClothingLightGray", ""),
                        ChestUnder = new IProfileClothingItem("ShirtWithTie", "ClothingGray", "ClothingDarkPink", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Fedora", "ClothingGray", "ClothingDarkPink", ""),
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Gangster",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("BlazerWithShirt", "ClothingGray", "ClothingDarkPink", ""),
                        ChestUnder = null,
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingGray", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = null,
                        Legs = new IProfileClothingItem("Pants", "ClothingGray", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieNinja
                case BotType.ZombieNinja:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Ninja",
                        Accesory = new IProfileClothingItem("Mask", "ClothingDarkRed", "ClothingLightGray", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TrainingShirt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = new IProfileClothingItem("FingerlessGlovesBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Head = null,
                        Legs = new IProfileClothingItem("Pants_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("Sash_fem", "ClothingDarkRed", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region ZombiePolice
                case BotType.ZombiePolice:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Police",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Police",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("PoliceShirt", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Shoes", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("PoliceHat", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombiePrussian
                case BotType.ZombiePrussian:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Prussian",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("LeatherJacketBlack", "ClothingCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("SpikedHelmet", "ClothingCyan", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Prussian",
                        Accesory = new IProfileClothingItem("GasMask", "ClothingCyan", "ClothingLightGreen", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("SpikedHelmet", "ClothingCyan", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region BaronVonHauptstein
                case BotType.BaronVonHauptstein:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "BaronVonHauptstein", // TODO
                        Accesory = new IProfileClothingItem("GasMask", "ClothingCyan", "ClothingLightGreen", ""),
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("BootsBlack", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("SpikedHelmet", "ClothingCyan", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingDarkCyan", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieSoldier
                case BotType.ZombieSoldier:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt_fem", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkRed", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants_fem", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist_fem", "ClothingBrown", "ClothingLightGray", ""),
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Soldier",
                        Accesory = null,
                        ChestOver = null,
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkRed", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Helmet", "ClothingDarkYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("CamoPants", "ClothingDarkYellow", "ClothingDarkYellow", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("AmmoBeltWaist", "ClothingBrown", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion

                #region ZombieThug
                case BotType.ZombieThug:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest_fem", "ClothingLightBlue", "ClothingLightBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Female,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingDarkRed", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack_fem", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie_fem", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Thug",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Vest", "ClothingLightBlue", "ClothingLightBlue", ""),
                        ChestUnder = new IProfileClothingItem("SleevelessShirt", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("Boots", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Headband", "ClothingDarkRed", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("PantsBlack", "ClothingDarkBlue", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = null,
                    });
                    break;
                }
                #endregion

                #region ZombieWorker
                case BotType.ZombieWorker:
                {
                    profiles.Add(new IProfile()
                    {
                        Name = "Zombie Worker",
                        Accesory = null,
                        ChestOver = new IProfileClothingItem("Suspenders", "ClothingOrange", "ClothingLightOrange", ""),
                        ChestUnder = new IProfileClothingItem("TornShirt", "ClothingOrange", "ClothingLightGray", ""),
                        Feet = new IProfileClothingItem("ShoesBlack", "ClothingDarkBrown", "ClothingLightGray", ""),
                        Gender = Gender.Male,
                        Hands = null,
                        Head = new IProfileClothingItem("Cap", "ClothingYellow", "ClothingLightGray", ""),
                        Legs = new IProfileClothingItem("TornPants", "ClothingOrange", "ClothingLightGray", ""),
                        Skin = new IProfileClothingItem("Zombie", "Skin1", "ClothingLightGray", ""),
                        Waist = new IProfileClothingItem("SatchelBelt", "ClothingOrange", "ClothingLightGray", ""),
                    });
                    break;
                }
                #endregion
            }

            return profiles;
        }
    public enum BotType
    {
        None,

        // Tier1: Rooftop Retribution
        // Tier2: Canals Carnage
        AssassinMelee,
        AssassinRange,
        // Tier1: Subway Shakedown
        Agent, // Smart agent, weak weapon
               // Tier2: Piston Posse, Tower Trouble
        Agent2, // Dumb agent, strong weapon
                // Tier1: High Moon Holdout

        Bandido,
        // Tier1: Police Station Punchout, Warehouse Wreckage
        // Tier2: Bar Brawl
        // Tier3: Meatgrinder Begins
        Biker,
        BikerHulk,
        // Tier1: The Teahouse Job, Rooftop Retribution
        Bodyguard,
        Bodyguard2, // heavy bodyguard
        Cyborg, // grunt robot

        LabAssistant,
        Scientist,

        ClownBodyguard,
        ClownBoxer,
        ClownCowboy,
        ClownGangster,

        // Tier2: Steamship Standoff
        Cowboy,
        // Tier3: Holiday Hullabaloo
        Elf,
        Engineer,
        // Tier1: Heavy Hostility
        // Tier2: Trainyard Takedown, Alley Bombardment
        // Tier3: Meatgrinder Begins
        Gangster,
        // Tier1: The Teahouse Job, Heavy Hostility
        GangsterHulk,

        // Tier2: Hazardous Hustle, Piston Posse
        // Tier3: Armored Unit
        MetroCop,

        // Tier2: Plant 47 Panic
        Mutant,

        NaziLabAssistant,
        NaziMuscleSoldier,
        NaziScientist,
        NaziSoldier,
        SSOfficer,

        // Tier1: Mall Mayhem
        // Tier3: Police Station Escape!
        Police,
        PoliceSWAT,

        // zombie infected survivors, turn into zombie after dying
        SurvivorBiker,
        SurvivorCrazy,
        SurvivorNaked,
        SurvivorRifleman,
        SurvivorRobber,
        SurvivorTough,

        // Tier3: Facility Ambush
        Sniper,
        // Tier2: Facility Foray
        Soldier,
        Soldier2,

        Spacer, // thug on space
        Stripper,

        // Tier1: Storage Showdown, Rooftops Rumble, Police Station Punchout, Alley Ambush, Warehouse Wreckage, Heavy Hostility
        Thug,
        ThugHulk,

        // Like thug but with different skins, balista's faction
        Punk,
        PunkHulk,

        // Tier3: Hotel Cleanup
        Zombie,
        ZombieAgent,
        ZombieBruiser,
        ZombieChild,
        ZombieFat,
        ZombieFighter,
        ZombieFlamer,
        // Tier1: Chemical Crisis
        ZombieGangster,
        ZombieNinja,
        ZombiePolice,

        // Tier3: Unearthed
        ZombiePrussian,

        ZombieSoldier,
        ZombieThug,
        ZombieWorker,

        // ---BOSS---
        Balista,
        Bobby,
        Boffin,
        Cindy,
        // Tier1: The Teahouse Job
        // Tier2: Alley Bombardment, Rocket Rider
        // Tier3: Rocket Rider 2
        Demolitionist,
        Jo,
        Fritzliebe,
        Funnyman,
        Hacker,
        Incinerator,
        // Tier1: The Teahouse Job, Rooftop Retribution
        // Tier3: Unearthed
        Kingpin,
        Kriegbär,
        MetroCop2,
        // Tier3: Meatgrinder Begins
        Meatgrinder,
        Mecha,
        MirrorMan,
        Ninja,
        Raze,
        Reznor,
        // Tier3: Holiday Hullabaloo
        Santa,
        Sheriff,
        Teddybear,
        Babybear,
        BaronVonHauptstein,
    }
        public static List<WeaponSet> GetWeapons(BotType botType)
        {
            var weapons = new List<WeaponSet>();

            switch (botType)
            {
                #region Agent
                case BotType.Agent:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region Agent2
                case BotType.Agent2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Secondary = WeaponItem.UZI,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region AssassinMelee
                case BotType.AssassinMelee:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                    });
                    break;
                }
                #endregion

                #region AssassinRange
                case BotType.AssassinRange:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.UZI,
                    });
                    break;
                }
                #endregion

                #region Balista
                case BotType.Balista:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                        Primary = WeaponItem.ASSAULT,
                        Secondary = WeaponItem.UZI,
                    });
                    break;
                }
                #endregion

                #region Bandido
                case BotType.Bandido:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.MACHETE,
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.CARBINE,
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SHOTGUN,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Biker
                case BotType.Biker:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    break;
                }
                #endregion

                #region BikerHulk
                case BotType.BikerHulk:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Bobby
                case BotType.Bobby:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.DoubleTrouble,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.ASSAULT,
                        PrimaryPowerup = RangedWeaponPowerup.DoubleTrouble,
                    });
                    break;
                }
                #endregion

                #region Bodyguard
                case BotType.Bodyguard:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Bodyguard2
                case BotType.Bodyguard2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    break;
                }
                #endregion

                #region Boffin
                case BotType.Boffin:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.Gravity,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Cindy
                case BotType.Cindy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Stun,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.ASSAULT,
                        PrimaryPowerup = RangedWeaponPowerup.Stun,
                    });
                    break;
                }
                #endregion

                #region ClownBodyguard
                case BotType.ClownBodyguard:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    break;
                }
                #endregion

                #region ClownBoxer
                case BotType.ClownBoxer:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region ClownCowboy
                case BotType.ClownCowboy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    break;
                }
                #endregion

                #region ClownGangster
                case BotType.ClownGangster:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    break;
                }
                #endregion

                #region Cowboy
                case BotType.Cowboy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                    });
                    break;
                }
                #endregion

                #region Cyborg
                case BotType.Cyborg:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Homing,
                    });
                    break;
                }
                #endregion

                #region Demolitionist
                case BotType.Demolitionist:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SNIPER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                    });
                    break;
                }
                #endregion

                #region Elf
                case BotType.Elf:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.FLAMETHROWER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.UZI,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.FLAREGUN,
                    });
                    break;
                }
                #endregion

                #region Engineer
                case BotType.Engineer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.HAMMER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                        Primary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Fritzliebe
                case BotType.Fritzliebe:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Funnyman
                case BotType.Funnyman:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    break;
                }
                #endregion

                #region Jo
                case BotType.Jo:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BOTTLE,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Hacker
                case BotType.Hacker:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Gangster
                case BotType.Gangster:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BOTTLE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.UZI,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                    });
                    break;
                }
                #endregion

                #region GangsterHulk
                case BotType.GangsterHulk:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Incinerator
                case BotType.Incinerator:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                        Primary = WeaponItem.FLAMETHROWER,
                        Secondary = WeaponItem.FLAREGUN,
                        Throwable = WeaponItem.MOLOTOVS,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Kingpin
                case BotType.Kingpin:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                    });
                    break;
                }
                #endregion

                #region Kriegbär
                case BotType.Kriegbär:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region LabAssistant
                case BotType.LabAssistant:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        Powerup = WeaponItem.STRENGTHBOOST,
                    });
                    break;
                }
                #endregion

                #region SurvivorBiker
                case BotType.SurvivorBiker:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                    });
                    break;
                }
                #endregion

                #region SurvivorCrazy
                case BotType.SurvivorCrazy:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    break;
                }
                #endregion

                #region SurvivorNaked
                case BotType.SurvivorNaked:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.MACHETE,
                    });
                    break;
                }
                #endregion

                #region SurvivorRifleman
                case BotType.SurvivorRifleman:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                    });
                    break;
                }
                #endregion

                #region SurvivorRobber
                case BotType.SurvivorRobber:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    break;
                }
                #endregion

                #region SurvivorTough
                case BotType.SurvivorTough:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    break;
                }
                #endregion

                #region Meatgrinder
                case BotType.Meatgrinder:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAINSAW,
                        Throwable = WeaponItem.MOLOTOVS,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Mecha
                case BotType.Mecha:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region MetroCop
                case BotType.MetroCop:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.SMG,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.DARK_SHOTGUN,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.DARK_SHOTGUN,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOCK_BATON,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region MetroCop2
                case BotType.MetroCop2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                        Primary = WeaponItem.DARK_SHOTGUN,
                        PrimaryPowerup = RangedWeaponPowerup.Blast,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region MirrorMan
                case BotType.MirrorMan:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Mutant
                case BotType.Mutant:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region NaziLabAssistant
                case BotType.NaziLabAssistant:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Powerup = WeaponItem.STRENGTHBOOST,
                    });
                    break;
                }
                #endregion

                #region NaziMuscleSoldier
                case BotType.NaziMuscleSoldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region NaziScientist
                case BotType.NaziScientist:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIR,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BOTTLE,
                    });
                    break;
                }
                #endregion

                #region NaziSoldier
                case BotType.NaziSoldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.MP50,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.CARBINE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region SSOfficer
                case BotType.SSOfficer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.MP50,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Ninja
                case BotType.Ninja:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Police
                case BotType.Police:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                        Secondary = WeaponItem.REVOLVER,
                    });
                    break;
                }
                #endregion

                #region PoliceSWAT
                case BotType.PoliceSWAT:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.PISTOL45,
                        Throwable = WeaponItem.C4,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.ASSAULT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SMG,
                    });
                    break;
                }
                #endregion

                #region Punk
                case BotType.Punk:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.UZI,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BASEBALL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL45,
                    });
                    break;
                }
                #endregion

                #region PunkHulk
                case BotType.PunkHulk:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    break;
                }
                #endregion

                #region Raze
                case BotType.Raze:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        PrimaryPowerup = RangedWeaponPowerup.StickyBomb,
                        Secondary = WeaponItem.PISTOL45,
                        Throwable = WeaponItem.C4,
                    });
                    break;
                }
                #endregion

                #region Reznor
                case BotType.Reznor:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.BAZOOKA,
                        PrimaryPowerup = RangedWeaponPowerup.Blackhole,
                        Secondary = WeaponItem.PISTOL45,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADES,
                        PrimaryPowerup = RangedWeaponPowerup.Blackhole,
                        Secondary = WeaponItem.PISTOL45,
                        SecondaryPowerup = RangedWeaponPowerup.Blackhole,
                        UseLazer = true,
                    });
                    break;
                }
                #endregion

                #region Santa
                case BotType.Santa:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.M60,
                        PrimaryPowerup = RangedWeaponPowerup.Present,
                        Secondary = WeaponItem.UZI,
                    });
                    break;
                }
                #endregion

                #region Scientist
                case BotType.Scientist:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    break;
                }
                #endregion

                #region Sheriff
                case BotType.Sheriff:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MAGNUM,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SHOTGUN,
                    });
                    break;
                }
                #endregion

                #region Sniper
                case BotType.Sniper:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Primary = WeaponItem.SNIPER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SNIPER,
                        Secondary = WeaponItem.SILENCEDPISTOL,
                    });
                    break;
                }
                #endregion

                #region Soldier
                case BotType.Soldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Soldier2
                case BotType.Soldier2:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.GRENADE_LAUNCHER,
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region Spacer
                case BotType.Spacer:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.SHOCK_BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        UseLazer = true,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.FLAREGUN,
                        UseLazer = true,
                        Throwable = WeaponItem.MINES,
                    });
                    break;
                }
                #endregion

                #region Stripper
                case BotType.Stripper:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                        SecondaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                        SecondaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SAWED_OFF,
                        PrimaryPowerup = RangedWeaponPowerup.Tearing,
                    });
                    break;
                }
                #endregion

                #region Teddybear
                case BotType.Teddybear:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.GRENADES,
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region Babybear
                case BotType.Babybear:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region Thug
                case BotType.Thug:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.HAMMER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAIN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.MACHINE_PISTOL,
                    });
                    break;
                }
                #endregion

                #region ThugHulk
                case BotType.ThugHulk:
                {
                    weapons.Add(WeaponSet.Empty);
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.LEAD_PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                    });
                    break;
                }
                #endregion

                #region Zombies
                case BotType.Zombie:
                case BotType.ZombieBruiser:
                case BotType.ZombieChild:
                case BotType.ZombieFat:
                case BotType.ZombieFlamer:
                {
                    weapons.Add(WeaponSet.Empty);
                    break;
                }
                #endregion

                #region ZombieAgent
                case BotType.ZombieAgent:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SILENCEDPISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.SILENCEDUZI,
                    });
                    break;
                }
                #endregion

                #region ZombieFighter
                case BotType.ZombieFighter:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Powerup = WeaponItem.SLOWMO_10,
                    });
                    break;
                }
                #endregion

                #region ZombieGangster
                case BotType.ZombieGangster:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.TOMMYGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    break;
                }
                #endregion

                #region ZombieNinja
                case BotType.ZombieNinja:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KATANA,
                    });
                    break;
                }
                #endregion

                #region ZombiePolice
                case BotType.ZombiePolice:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BATON,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.REVOLVER,
                    });
                    break;
                }
                #endregion

                #region ZombiePrussian
                case BotType.ZombiePrussian:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.REVOLVER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.CARBINE,
                        Throwable = WeaponItem.GRENADES,
                    });
                    break;
                }
                #endregion

                #region BaronVonHauptstein
                case BotType.BaronVonHauptstein:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                        Secondary = WeaponItem.REVOLVER,
                        Throwable = WeaponItem.GRENADES,
                    });
                    break;
                }
                #endregion

                #region ZombieSoldier
                case BotType.ZombieSoldier:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SMG,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.ASSAULT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Primary = WeaponItem.SHOTGUN,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.GRENADES,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.MINES,
                    });
                    break;
                }
                #endregion

                #region ZombieThug
                case BotType.ZombieThug:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.BAT,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.KNIFE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Secondary = WeaponItem.PISTOL,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Throwable = WeaponItem.MOLOTOVS,
                    });
                    break;
                }
                #endregion

                #region ZombieWorker
                case BotType.ZombieWorker:
                {
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.PIPE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.HAMMER,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.AXE,
                    });
                    weapons.Add(new WeaponSet()
                    {
                        Melee = WeaponItem.CHAINSAW,
                    });
                    break;
                }
                #endregion
            }

            return weapons;
        }
    public static class Command
    {
        public static void OnUserMessage(UserMessageCallbackArgs args)
        {
            if (!args.User.IsHost || !args.IsCommand || (args.Command != "BOTEXTENDED" && args.Command != "BE"))
            {
                return;
            }

            var message = args.CommandArguments.ToLowerInvariant();
            var words = message.Split(' ');
            var command = words.FirstOrDefault();
            var arguments = words.Skip(1);

            switch (command)
            {
                case "?":
                case "h":
                case "help":
                    PrintHelp();
                    break;

                case "v":
                case "version":
                    PrintVersion();
                    break;

                case "lf":
                case "listfaction":
                    ListBotFaction();
                    break;

                case "lb":
                case "listbot":
                    ListBotType();
                    break;

                case "ff":
                case "findfaction":
                    FindFaction(arguments);
                    break;

                case "s":
                case "setting":
                    ShowCurrentSettings();
                    break;

                case "bc":
                case "botcount":
                    SetBotCount(arguments);
                    break;

                case "c":
                case "create":
                    CreateNewBot(arguments);
                    break;

                case "f":
                case "faction":
                    SetFactions(arguments);
                    break;

                case "fr":
                case "factionrotation":
                    SetFactionRotationInterval(arguments);
                    break;

                case "nf":
                case "nextfaction":
                    SkipCurrentFaction();
                    break;

                case "sp":
                case "setplayer":
                    SetPlayer(arguments);
                    break;

                case "sw":
                case "setweapon":
                    SetWeapon(arguments);
                    break;

                case "cp":
                case "clearplsettings":
                    ClearPlayerSettings();
                    break;

                case "st":
                case "stats":
                    PrintStatistics();
                    break;

                case "cst":
                case "clearstats":
                    ClearStatistics();
                    break;

                default:
                    ScriptHelper.PrintMessage("Invalid command: " + command, ScriptHelper.ERROR_COLOR);
                    break;
            }
        }

        private static void PrintHelp()
        {
            ScriptHelper.PrintMessage("--BotExtended help--", ScriptHelper.ERROR_COLOR);
            ScriptHelper.PrintMessage("/<botextended|be> [help|h|?]: Print this help");
            ScriptHelper.PrintMessage("/<botextended|be> [version|v]: Print the current version");
            ScriptHelper.PrintMessage("/<botextended|be> [listfaction|lf]: List all bot factions");
            ScriptHelper.PrintMessage("/<botextended|be> [listbot|lb]: List all bot types");
            ScriptHelper.PrintMessage("/<botextended|be> [findfaction|ff] <query>: Find all bot factions that match query");
            ScriptHelper.PrintMessage("/<botextended|be> [settings|s]: Display current script settings");
            ScriptHelper.PrintMessage("/<botextended|be> [create|c] <BotType> [Team|_] [Count]: Create new bot");
            ScriptHelper.PrintMessage("/<botextended|be> [botcount|bc] <0-10>: Set maximum bot count");
            ScriptHelper.PrintMessage("/<botextended|be> [faction|f] [Team] [-e] <names|indexes|all>: Choose a list of faction by either name or index to randomly spawn on startup");
            ScriptHelper.PrintMessage("/<botextended|be> [factionrotation|fr] <1-10>: Set faction rotation interval for every n rounds");
            ScriptHelper.PrintMessage("/<botextended|be> [nextfaction|nf]: Change the faction in the currrent faction rotation to the next faction");
            ScriptHelper.PrintMessage("/<botextended|be> [setplayer|sp] <player> <BotType>: Set <player> outfit, weapons and modifiers to <BotType>");
            ScriptHelper.PrintMessage("/<botextended|be> [setweapon|sw] <player> <WeaponItem> <Powerup>: Give <player> powerup weapon");
            ScriptHelper.PrintMessage("/<botextended|be> [clearplsettings|cp]: Clear all player settings");
            ScriptHelper.PrintMessage("/<botextended|be> [stats|st]: List all bot types and bot factions stats");
            ScriptHelper.PrintMessage("/<botextended|be> [clearstats|cst]: Clear all bot types and bot factions stats");
        }

        private static bool TryParseTeam(string arg, out PlayerTeam result, PlayerTeam defaultValue = PlayerTeam.Independent)
        {
            switch (arg)
            {
                case "t1":
                    result = PlayerTeam.Team1;
                    return true;
                case "t2":
                    result = PlayerTeam.Team2;
                    return true;
                case "t3":
                    result = PlayerTeam.Team3;
                    return true;
                case "t4":
                    result = PlayerTeam.Team4;
                    return true;
                case "t0":
                    result = PlayerTeam.Independent;
                    return true;
                default:
                    result = defaultValue;
                    return false;
            }
        }

        private static bool TryParsePlayer(string args, out IPlayer result)
        {
            foreach (var player in Game.GetPlayers())
            {
                if (player.IsRemoved) continue;

                if (player.IsUser)
                {
                    var playerIndex = -1;
                    var playerSlotIndex = player.GetUser().GameSlotIndex;

                    if (int.TryParse(args, out playerIndex))
                    {
                        if (playerSlotIndex == playerIndex)
                        {
                            result = player;
                            return true;
                        }
                    }
                    else
                    {
                        if (player.Name.ToLower() == args)
                        {
                            result = player;
                            return true;
                        }
                    }
                }
                else
                {
                    if (player.Name.ToLower() == args)
                    {
                        result = player;
                        return true;
                    }
                }
            }
            result = null;
            return false;
        }

        private static void PrintVersion()
        {
            ScriptHelper.PrintMessage("--BotExtended version--", ScriptHelper.ERROR_COLOR);
            ScriptHelper.PrintMessage("v" + Constants.CURRENT_VERSION);
        }

        private static IEnumerable<string> GetFactionNames()
        {
            var factions = BotHelper.GetAvailableBotFactions();

            foreach (var faction in factions)
            {
                yield return ((int)faction).ToString() + ": " + SharpHelper.EnumToString(faction);
            }
        }

        private static void ListBotFaction()
        {
            ScriptHelper.PrintMessage("--BotExtended list faction--", ScriptHelper.ERROR_COLOR);

            foreach (var factionName in GetFactionNames())
            {
                ScriptHelper.PrintMessage(factionName, ScriptHelper.WARNING_COLOR);
            }
        }

        private static void ListBotType()
        {
            ScriptHelper.PrintMessage("--BotExtended list bot type--", ScriptHelper.ERROR_COLOR);

            foreach (var botType in SharpHelper.EnumToList<BotType>())
            {
                ScriptHelper.PrintMessage((int)botType + ": " + SharpHelper.EnumToString(botType), ScriptHelper.WARNING_COLOR);
            }
        }

        private static void FindFaction(IEnumerable<string> arguments)
        {
            var query = arguments.FirstOrDefault();
            if (query == null) return;

            ScriptHelper.PrintMessage("--BotExtended find results--", ScriptHelper.ERROR_COLOR);

            foreach (var factionName in GetFactionNames())
            {
                var name = factionName.ToLowerInvariant();
                if (name.Contains(query))
                    ScriptHelper.PrintMessage(factionName, ScriptHelper.WARNING_COLOR);
            }
        }

        private static void ShowCurrentSettings()
        {
            ScriptHelper.PrintMessage("--BotExtended settings--", ScriptHelper.ERROR_COLOR);

            var settings = Settings.Get();

            ScriptHelper.PrintMessage("-Player settings", ScriptHelper.WARNING_COLOR);

            var activeUsers = ScriptHelper.GetActiveUsersByAccountID();

            if (settings.PlayerSettings.Count() == 0)
            {
                ScriptHelper.PrintMessage("<Empty>");
            }
            else
            {
                foreach (var ps in settings.PlayerSettings)
                {
                    var playerSettings = PlayerSettings.Parse(ps);
                    var accountID = playerSettings.AccountID;
                    var name = activeUsers.ContainsKey(accountID) ? activeUsers[accountID].Name : accountID;

                    ScriptHelper.PrintMessage(name + ": " + playerSettings.BotType);
                    foreach (var w in playerSettings.Weapons)
                    {
                        ScriptHelper.PrintMessage(" - " + w[0] + " " + w[1]);
                    }
                }
            }

            ScriptHelper.PrintMessage("-Factions", ScriptHelper.WARNING_COLOR);

            // TODO: show except for all faction minus a small amount of others
            foreach (var team in new PlayerTeam[] { PlayerTeam.Team1, PlayerTeam.Team2, PlayerTeam.Team3, PlayerTeam.Team4, })
            {
                var factions = settings.BotFactions[team];
                var currentFaction = settings.CurrentFaction[team];

                ScriptHelper.PrintMessage(" -" + team, ScriptHelper.WARNING_COLOR);
                ScriptHelper.PrintMessage("  -Factions: ", ScriptHelper.WARNING_COLOR);

                if (factions.Count == SharpHelper.EnumToArray<BotFaction>().Count() - 1 /* minus BotFaction.None */)
                {
                    ScriptHelper.PrintMessage("  ALL");
                }
                else
                {
                    foreach (var botFaction in factions)
                    {
                        var index = (int)botFaction;
                        ScriptHelper.PrintMessage("  " + index + ": " + botFaction);
                    }
                }

                ScriptHelper.PrintMessage("  -Current faction: " + currentFaction, ScriptHelper.WARNING_COLOR);
            }

            var rotationInterval = settings.FactionRotationEnabled ? settings.FactionRotationInterval.ToString() : "Disabled";
            var roundsUntilRotation = settings.FactionRotationEnabled ? settings.RoundsUntilFactionRotation.ToString() : "N/a";

            ScriptHelper.PrintMessage("-Faction rotation interval: " + rotationInterval, ScriptHelper.WARNING_COLOR);
            ScriptHelper.PrintMessage("-Rounds until rotation: " + roundsUntilRotation, ScriptHelper.WARNING_COLOR);
            ScriptHelper.PrintMessage("-Max bot count: " + settings.BotCount, ScriptHelper.WARNING_COLOR);
        }

        private static void CreateNewBot(IEnumerable<string> arguments)
        {
            if (arguments.Count() < 1)
                return;

            var botTypeStr = arguments.First();
            var botType = BotType.None;

            if (SharpHelper.TryParseEnum(botTypeStr, out botType))
            {
                arguments = arguments.Skip(1);
            }
            else
            {
                ScriptHelper.PrintMessage("--BotExtended spawn bot--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid query: " + botTypeStr, ScriptHelper.WARNING_COLOR);
                return;
            }

            var team = PlayerTeam.Independent;
            if (arguments.Any())
            {
                if (TryParseTeam(arguments.First(), out team))
                    arguments = arguments.Skip(1);
            }

            var count = 1;
            if (arguments.Any())
            {
                if (int.TryParse(arguments.First(), out count))
                    count = (int)MathHelper.Clamp(count, Constants.BOT_SPAWN_COUNT_MIN, Constants.BOT_SPAWN_COUNT_MAX);
                else
                    count = 1;
            }

            for (var i = 0; i < count; i++)
            {
                BotManager.SpawnBot(botType, player: null, team: team, ignoreFullSpawner: true);
            }

            // Dont use the string name in case it just an index
            var bot = count > 1 ? " bots" : " bot";
            ScriptHelper.PrintMessage("Spawned " + count + " " + SharpHelper.EnumToString(botType) + bot + " to " + team);
        }

        private static void SetBotCount(IEnumerable<string> arguments)
        {
            if (arguments.Count() != 1)
                return;

            var countStr = arguments.First();
            var count = 1;
            if (arguments.Any())
            {
                if (int.TryParse(countStr, out count))
                    count = (int)MathHelper.Clamp(count, Constants.BOT_COUNT_MIN, Constants.BOT_COUNT_MAX);
                else
                {
                    ScriptHelper.PrintMessage("[Botextended] Invalid query: " + countStr, ScriptHelper.WARNING_COLOR);
                    return;
                }
            }

            BotHelper.Storage.SetItem(BotHelper.StorageKey("BOT_COUNT"), count);
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void SetFactions(IEnumerable<string> arguments)
        {
            var allBotFactions = SharpHelper.EnumToList<BotFaction>()
                .Select((f) => SharpHelper.EnumToString(f))
                .ToList();
            var botFactions = new List<string>();
            var excludeFlag = false;
            BotFaction botFaction;

            if (arguments.Count() == 0)
            {
                ScriptHelper.PrintMessage("--BotExtended setfaction--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid command: Argument is empty", ScriptHelper.WARNING_COLOR);
                return;
            }

            var team = PlayerTeam.Team4;
            if (TryParseTeam(arguments.First(), out team, PlayerTeam.Team4))
            {
                arguments = arguments.Skip(1);
            }

            if (arguments.Count() == 1 && (arguments.Single() == "all" || arguments.Single() == "none"))
            {
                if (arguments.Single() == "all")
                    botFactions = BotHelper.GetAvailableBotFactions().Select((f) => SharpHelper.EnumToString(f)).ToList();
                if (arguments.Single() == "none")
                    botFactions = new List<string> { "None" };
            }
            else
            {
                if (arguments.First() == "-e")
                {
                    excludeFlag = true;
                    arguments = arguments.Skip(1);
                }
                foreach (var arg in arguments)
                {
                    if (arg == "none")
                    {
                        ScriptHelper.PrintMessage("--BotExtended setfaction--", ScriptHelper.ERROR_COLOR);
                        ScriptHelper.PrintMessage("Invalid argument: Cannot mix None with other options", ScriptHelper.WARNING_COLOR);
                        return;
                    }

                    if (SharpHelper.TryParseEnum(arg, out botFaction))
                    {
                        botFactions.Add(SharpHelper.EnumToString(botFaction));
                    }
                    else
                    {
                        ScriptHelper.PrintMessage("--BotExtended setfaction--", ScriptHelper.ERROR_COLOR);
                        ScriptHelper.PrintMessage("Invalid argument: " + arg, ScriptHelper.WARNING_COLOR);
                        return;
                    }
                }
            }

            if (excludeFlag)
            {
                botFactions = allBotFactions.Where((f) => !botFactions.Contains(f)).ToList();
            }

            BotHelper.Storage.SetItem(BotHelper.StorageKey("BOT_FACTIONS_" + team), botFactions.Distinct().ToArray());
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void SetFactionRotationInterval(IEnumerable<string> arguments)
        {
            var firstArg = arguments.FirstOrDefault();
            if (firstArg == null) return;
            int value = -1;

            if (int.TryParse(firstArg, out value))
            {
                value = (int)MathHelper.Clamp(value, 0, 10);
                BotHelper.Storage.SetItem(BotHelper.StorageKey("FACTION_ROTATION_INTERVAL"), value);
                BotHelper.Storage.SetItem(BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION"), value);
                ScriptHelper.PrintMessage("[Botextended] Update successfully");
            }
            else
                ScriptHelper.PrintMessage("[Botextended] Invalid query: " + firstArg, ScriptHelper.WARNING_COLOR);
        }

        private static void SkipCurrentFaction()
        {
            BotHelper.Storage.SetItem(BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION"), 1);
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void UpdatePlayerSettings(IPlayer player, Func<PlayerSettings, PlayerSettings> update)
        {
            if (!player.IsUser) return;
            var accountID = player.GetUser().AccountID;
            if (string.IsNullOrEmpty(accountID)) return;

            var key = BotHelper.StorageKey("PLAYER_SETTINGS");
            string[] allPlayerSettings;

            if (BotHelper.Storage.TryGetItemStringArr(key, out allPlayerSettings))
            {
                var isUpdate = false;
                for (var i = 0; i < allPlayerSettings.Length; i++)
                {
                    if (allPlayerSettings[i].StartsWith(accountID))
                    {
                        var oldPlayerSettings = PlayerSettings.Parse(allPlayerSettings[i]);
                        var newPlayerSettings = update(oldPlayerSettings);

                        isUpdate = true;

                        if (newPlayerSettings.IsEmpty())
                        {
                            var r = allPlayerSettings.ToList();
                            r.RemoveAt(i);
                            allPlayerSettings = r.ToArray();
                        }
                        else
                            allPlayerSettings[i] = newPlayerSettings.ToString();
                        break;
                    }
                }

                if (!isUpdate)
                {
                    var a = allPlayerSettings.ToList();
                    var newPlayerSettings = update(PlayerSettings.Empty(accountID));

                    if (!newPlayerSettings.IsEmpty())
                    {
                        a.Add(newPlayerSettings.ToString());
                        allPlayerSettings = a.ToArray();
                    }
                }
            }
            else
            {
                var newPlayerSettings = update(PlayerSettings.Empty(accountID));

                if (!newPlayerSettings.IsEmpty())
                {
                    allPlayerSettings = new string[] { newPlayerSettings.ToString() };
                }
            }

            BotHelper.Storage.SetItem(key, allPlayerSettings);
        }

        public static void SetPlayer(IEnumerable<string> arguments)
        {
            if (arguments.Count() < 2)
            {
                ScriptHelper.PrintMessage("--BotExtended setplayer--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid arguments: " + string.Join(" ", arguments), ScriptHelper.WARNING_COLOR);
                return;
            }

            var playerArg = string.Join(" ", arguments.Take(arguments.Count() - 1));
            IPlayer player;
            if (!TryParsePlayer(playerArg, out player))
            {
                ScriptHelper.PrintMessage("--BotExtended setplayer--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("There is no player " + playerArg, ScriptHelper.WARNING_COLOR);
                return;
            }
            else
                arguments = arguments.Skip(arguments.Count() - 1);

            var botTypeArg = arguments.First();
            BotType botType;
            if (!SharpHelper.TryParseEnum(botTypeArg, out botType))
            {
                ScriptHelper.PrintMessage("--BotExtended setplayer--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid BotType: " + botTypeArg, ScriptHelper.WARNING_COLOR);
                return;
            }

            UpdatePlayerSettings(player, (old) => old.Update(botType.ToString()));

            if (botType == BotType.None)
                ScriptHelper.PrintMessage("Player " + player.Name + " will be reset next round");
            else
                BotHelper.SetPlayer(player, botType);
        }

        public static void SetWeapon(IEnumerable<string> arguments)
        {
            if (arguments.Count() == 2)
                arguments = arguments.Concat(new string[] { "None" });

            if (arguments.Count() < 3)
            {
                ScriptHelper.PrintMessage("--BotExtended setweapon--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid arguments: " + string.Join(" ", arguments), ScriptHelper.WARNING_COLOR);
                return;
            }

            var playerArg = string.Join(" ", arguments.Take(arguments.Count() - 2));
            IPlayer player;
            if (!TryParsePlayer(playerArg, out player))
            {
                ScriptHelper.PrintMessage("--BotExtended setweapon--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("There is no player " + playerArg, ScriptHelper.WARNING_COLOR);
                return;
            }
            else
                arguments = arguments.Skip(arguments.Count() - 2);

            var weaponItemArg = arguments.First();
            WeaponItem weaponItem;
            if (!SharpHelper.TryParseEnum(weaponItemArg, out weaponItem))
            {
                ScriptHelper.PrintMessage("--BotExtended setweapon--", ScriptHelper.ERROR_COLOR);
                ScriptHelper.PrintMessage("Invalid WeaponItem: " + weaponItemArg, ScriptHelper.WARNING_COLOR);
                return;
            }
            else
            {
                weaponItemArg = weaponItem.ToString();
                arguments = arguments.Skip(1);
            }

            var powerupArg = arguments.First();
            var type = Mapper.GetWeaponItemType(weaponItem);
            if (type == WeaponItemType.Rifle || type == WeaponItemType.Handgun || type == WeaponItemType.Thrown)
            {
                RangedWeaponPowerup powerup;
                if (!SharpHelper.TryParseEnum(powerupArg, out powerup))
                {
                    ScriptHelper.PrintMessage("--BotExtended setweapon--", ScriptHelper.ERROR_COLOR);
                    ScriptHelper.PrintMessage("Invalid range powerup: " + powerupArg, ScriptHelper.WARNING_COLOR);
                    return;
                }
                else
                    powerupArg = powerup.ToString();
            }
            if (type == WeaponItemType.Melee)
            {
                MeleeWeaponPowerup powerup;
                if (!SharpHelper.TryParseEnum(powerupArg, out powerup))
                {
                    ScriptHelper.PrintMessage("--BotExtended setweapon--", ScriptHelper.ERROR_COLOR);
                    ScriptHelper.PrintMessage("Invalid melee powerup: " + powerupArg, ScriptHelper.WARNING_COLOR);
                    return;
                }
                else
                    powerupArg = powerup.ToString();
            }

            if (weaponItemArg == "NONE")
                ScriptHelper.PrintMessage("Player " + player.Name + "'s weapon will be reset next round");
            UpdatePlayerSettings(player, (old) => old.Update(type, weaponItemArg, powerupArg));
            BotHelper.SetWeapon(player, weaponItemArg, powerupArg);
        }

        private static void ClearPlayerSettings()
        {
            BotHelper.Storage.RemoveItem(BotHelper.StorageKey("PLAYER_SETTINGS"));
            ScriptHelper.PrintMessage("[Botextended] Update successfully");
        }

        private static void PrintStatistics()
        {
            ScriptHelper.PrintMessage("--BotExtended statistics--", ScriptHelper.ERROR_COLOR);

            var botFactions = BotHelper.GetAvailableBotFactions();
            ScriptHelper.PrintMessage("[WinCount] [TotalMatch] [SurvivalRate]", ScriptHelper.WARNING_COLOR);
            foreach (var botFaction in botFactions)
            {
                var factionSet = GetFactionSet(botFaction);
                for (var i = 0; i < factionSet.Factions.Count; i++)
                {
                    var factionKey = BotHelper.StorageKey(botFaction, i) + "_WIN_STATS";
                    int[] winStats;

                    if (BotHelper.Storage.TryGetItemIntArr(factionKey, out winStats))
                    {
                        var winCount = winStats[0];
                        var totalMatch = winStats[1];
                        var survivalRate = (float)winCount / totalMatch;
                        var survivalRateStr = survivalRate.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture);

                        ScriptHelper.PrintMessage(SharpHelper.EnumToString(botFaction) + " " + i + ": "
                            + " " + winCount + " " + totalMatch + " " + survivalRateStr);
                    }
                }
            }
        }

        private static void ClearStatistics()
        {
            var botFactions = BotHelper.GetAvailableBotFactions();
            foreach (var botFaction in botFactions)
            {
                var factionSet = GetFactionSet(botFaction);
                for (var i = 0; i < factionSet.Factions.Count; i++)
                {
                    var factionKey = BotHelper.StorageKey(botFaction, i) + "_WIN_STATS";
                    BotHelper.Storage.RemoveItem(factionKey);
                }
            }

            ScriptHelper.PrintMessage("[Botextended] Clear successfully");
        }
    }
    public static class Constants
    {
        internal const int BOT_COUNT_MIN = 1;
        internal const int BOT_COUNT_MAX = 10;

        internal const int BOT_SPAWN_COUNT_MIN = 1;
        internal const int BOT_SPAWN_COUNT_MAX = 15;
        internal static readonly bool IS_ME_ALONE = ScriptHelper.IsMeAlone();

        internal const int BOSS_FACTION_START_INDEX = 200;
        internal const string CURRENT_VERSION = "5.9.2";
        internal const string STORAGE_KEY_PREFIX = "BE_";

        // normal explosion radius: bazooka rockets, grenades, mines, explosive barrels, propane tank
        internal const float ExplosionRadius = 38.5f;

        // default settings value
        internal static readonly string[] DEFAULT_FACTIONS = BotHelper.GetAvailableBotFactions()
                .Select((f) => SharpHelper.EnumToString(f))
                .ToArray();
        internal const int DEFAULT_MAX_BOT_COUNT = 5;
        internal const int DEFAULT_FACTION_ROTATION_INTERVAL = 3;

        // boolean value (1|0) for fields like InfiniteAmmo, CanBurn, MeleeStunImmunity...
        internal const int TOGGLE_ON = 1;
        internal const int TOGGLE_OFF = 0;
    }

    /// <summary>
    /// Health range: 1-9999
    /// <para/>
    /// 
    /// Hacker = 400
    /// UltraStrong = 300
    /// ExtremelyStrong = 250
    /// VeryStrong = 200
    /// Strong = 150
    /// <para/>
    /// 
    /// AboveNormal = 125
    /// Normal = 100
    /// BelowNormal = 80
    /// <para/>
    /// 
    /// Weak = 65
    /// VeryWeak = 50
    /// ExtremelyWeak = 35
    /// EmbarrassinglyWeak = 20
    /// BarelyAny = 5
    /// </summary>
    public static class Health
    {
        internal const int Hacker = 400;
        internal const int UltraStrong = 300;
        internal const int ExtremelyStrong = 250;
        internal const int VeryStrong = 200;
        internal const int Strong = 150;
        internal const int AboveNormal = 125;
        internal const int Normal = 100;
        internal const int BelowNormal = 80;
        internal const int Weak = 65;
        internal const int VeryWeak = 50;
        internal const int ExtremelyWeak = 35;
        internal const int EmbarrassinglyWeak = 20;
        internal const int BarelyAny = 5;
    }

    /// <summary>
    /// Energy range: 1-9999
    /// <para/>
    /// 
    /// Hacker = 400
    /// UltraHigh = 300
    /// ExtremelyHigh = 250
    /// VeryHigh = 200
    /// High = 150
    /// <para/>
    /// 
    /// AboveNormal = 125
    /// Normal = 100
    /// BelowNormal = 80
    /// <para/>
    /// 
    /// Low = 65
    /// VeryLow = 50
    /// ExtremelyLow = 35
    /// EmbarrassinglyLow = 20
    /// BarelyAny = 5
    /// </summary>
    public static class Stamina
    {
        internal const int Hacker = 400;
        internal const int UltraHigh = 300;
        internal const int ExtremelyHigh = 250;
        internal const int VeryHigh = 200;
        internal const int High = 150;
        internal const int AboveNormal = 125;
        internal const int Normal = 100;
        internal const int BelowNormal = 80;
        internal const int Low = 65;
        internal const int VeryLow = 50;
        internal const int ExtremelyLow = 35;
        internal const int EmbarrassinglyLow = 20;
        internal const int BarelyAny = 5;
    }

    /// <summary>
    /// Speed range: 0.5-2.0
    /// <para/>
    /// 
    /// Hacker = 2
    /// ExtremelyFast = 1.5
    /// VeryFast = 1.35
    /// Fast = 1.2
    /// <para/>
    /// 
    /// AboveNormal = 1.1
    /// Normal = 1
    /// BelowNormal = 0.9
    /// <para/>
    /// 
    /// Slow = 0.8
    /// VerySlow = 0.7
    /// ExtremelySlow = 0.6
    /// BarelyAny = 0.5
    /// </summary>
    public static class Speed
    {
        internal const float Hacker = 2f;
        internal const float ExtremelyFast = 1.5f;
        internal const float VeryFast = 1.35f;
        internal const float Fast = 1.2f;
        internal const float AboveNormal = 1.1f;
        internal const float Normal = 1f;
        internal const float BelowNormal = .9f;
        internal const float Slow = .8f;
        internal const float VerySlow = .7f;
        internal const float ExtremelySlow = .6f;
        internal const float BarelyAny = .5f;
    }

    /// <summary>
    /// Size range: 0.75-1.25
    /// <para/>
    /// 
    /// Chonky = 1.25
    /// ExtremelyBig = 1.2
    /// VeryBig = 1.15
    /// Big = 1.1
    /// <para/>
    /// 
    /// AboveNormal = 1.05
    /// Normal = 1
    /// BelowNormal = 0.95
    /// <para/>
    /// 
    /// Small = 0.9
    /// VerySmall = 0.85
    /// ExtremelySmall = 0.8
    /// Tiny = 0.75
    /// </summary>
    public static class Size
    {
        internal const float Chonky = 1.25f;
        internal const float ExtremelyBig = 1.2f;
        internal const float VeryBig = 1.15f;
        internal const float Big = 1.1f;
        internal const float AboveNormal = 1.05f;
        internal const float Normal = 1f;
        internal const float BelowNormal = .95f;
        internal const float Small = .9f;
        internal const float VerySmall = .85f;
        internal const float ExtremelySmall = .8f;
        internal const float Tiny = .75f;
    }

    /// <summary>
    /// Melee force range: 0-10
    /// <para/>
    /// 
    /// UltraStrong = 3
    /// ExtremelyStrong = 2
    /// VeryStrong = 1.75
    /// Strong = 1.5
    /// <para/>
    /// 
    /// AboveNormal = 1.25
    /// Normal = 1
    /// Weak = 0.5
    /// None = 0
    /// </summary>
    public static class MeleeForce
    {
        internal const float UltraStrong = 3f;
        internal const float ExtremelyStrong = 2f;
        internal const float VeryStrong = 1.75f;
        internal const float Strong = 1.5f;
        internal const float AboveNormal = 1.25f;
        internal const float Normal = 1f;
        internal const float Weak = 0.5f;
        internal const float None = 0f;
    }

    /// <summary>
    /// EnergyRecharge range: 0-100
    /// <para/>
    /// 
    /// Quick = 1.5
    /// Normal = 1
    /// Slow = 0.5
    /// </summary>
    public static class EnergyRecharge
    {
        internal const float Quick = 1.5f;
        internal const float Normal = 1f;
        internal const float Slow = .5f;
    }

    /// <summary>
    /// Damage range: 0-100. Apply to all fields related to damage dealt like
    /// ProjectileDamageDealtModifier, MeleeDamageDealtModifier...
    /// <para/>
    /// 
    /// OnePunch = 10
    /// UltraHigh = 5
    /// ExtremelyHigh = 2
    /// VeryHigh = 1.5
    /// High = 1.25
    /// FairlyHigh = 1.2
    /// AboveNormal = 1.1
    /// <para/>
    /// 
    /// Normal = 1
    /// <para/>
    /// 
    /// BelowNormal = 0.9
    /// FairlyLow = 0.8
    /// Low = 0.75
    /// VeryLow = 0.5
    /// ExtremelyLow = 0.25
    /// UltraLow = 0.1
    /// None = 0
    /// </summary>
    public static class DamageDealt
    {
        internal const float OnePunch = 10f;
        internal const float UltraHigh = 5f;
        internal const float ExtremelyHigh = 2f;
        internal const float VeryHigh = 1.5f;
        internal const float High = 1.25f;
        internal const float FairlyHigh = 1.2f;
        internal const float AboveNormal = 1.1f;
        internal const float Normal = 1f;
        internal const float BelowNormal = .9f;
        internal const float FairlyLow = .8f;
        internal const float Low = .75f;
        internal const float VeryLow = .5f;
        internal const float ExtremelyLow = .25f;
        internal const float UltraLow = .1f;
        internal const float None = 0f;
    }

    /// <summary>
    /// Damage range: 0-100. Apply to all fields related to damage taken like
    /// ExplosionDamageTakenModifier, ProjectileCritChanceTakenModifier...
    /// <para/>
    /// 
    /// Defenseless = 10
    /// UltraVulnerable = 5
    /// ExtremelyVulnerable = 2
    /// VeryVulnerable = 1.5
    /// Vulnerable = 1.25
    /// FairlyVulnerable = 1.2
    /// SlightlyVulnerable = 1.1
    /// <para/>
    /// 
    /// Normal = 1
    /// <para/>
    /// 
    /// SlightlyResistant = 0.9
    /// FairlyResistant = 0.8
    /// Resistant = 0.75
    /// VeryResistant = 0.5
    /// ExtremelyResistant = 0.25
    /// UltraResistant = 0.1
    /// Unbeatable = 0
    /// </summary>
    public static class DamageTaken
    {
        internal const float Defenseless = 10f;
        internal const float UltraVulnerable = 5f;
        internal const float ExtremelyVulnerable = 2f;
        internal const float VeryVulnerable = 1.5f;
        internal const float Vulnerable = 1.25f;
        internal const float FairlyVulnerable = 1.2f;
        internal const float SlightlyVulnerable = 1.1f;
        internal const float Normal = 1f;
        internal const float SlightlyResistant = .9f;
        internal const float FairlyResistant = .8f;
        internal const float Resistant = .75f;
        internal const float VeryResistant = .5f;
        internal const float ExtremelyResistant = .25f;
        internal const float UltraResistant = .1f;
        internal const float Unbeatable = 0f;
    }

    public static class ItemDropMode
    {
        internal const int Normal = 0;
        internal const int Break = 1;
        internal const int Remove = 2;
    }

    public static class CategoryBits
    {
        internal const ushort None = 0x0000;

        /// <summary>
        /// Static impassable objects (wall, ground, plate...)
        /// </summary>
        internal const ushort StaticGround = 0x0001;
        internal const ushort DynamicPlatform = 0x0002;
        internal const ushort Player = 0x0004;
        /// <summary>
        /// Dynamic objects that can collide with player without setting IObject.TrackAsMissle(true)
        /// Example: table, chair, couch, crate...
        /// </summary>
        internal const ushort DynamicG1 = 0x0008;
        /// <summary>
        /// Dynamic objects that cannot collide with player but can collide with other dynamic objects
        /// Set IObject.TrackAsMissle(true) to make them collide with players
        /// Example: glass, cup, bottle, weapons on map...
        /// </summary>
        internal const ushort DynamicG2 = 0x0010;
        internal const ushort Dynamic = DynamicG1 + DynamicG2;

        internal const ushort Items = 0x0020;
        internal const ushort Debris = 0x0010;
        internal const ushort DynamicsThrown = 0x8000;
    }

    public static class WpnSearchRange
    {
        public const float Infinite = 0f;
        public const float InSight = 80f;
        public const float Nearby = 10f;
    }
    public enum FlipDirection
    {
        Horizontal,
        Vertical,
    }
    class InfectedCorpse
    {
        public static int TimeToTurnIntoZombie = 5000;
        public int UniqueID { get; private set; }
        public BotType Type { get; set; }
        public BotFaction Faction { get; set; }
        public IPlayer Body { get; set; }
        public float DeathTime { get; private set; }
        public bool IsTurningIntoZombie { get; private set; }
        public bool CanTurnIntoZombie { get; private set; }
        public bool IsZombie { get; private set; }

        public InfectedCorpse(IPlayer player, BotType botType, BotFaction faction)
        {
            UniqueID = player.UniqueID;
            Type = botType;
            Faction = faction;
            Body = player;
            IsTurningIntoZombie = false;
            IsZombie = false;
            CanTurnIntoZombie = true;
            DeathTime = Game.TotalElapsedGameTime;
        }

        private bool TurnIntoZombie()
        {
            if (Body.IsRemoved || Body.IsBurnedCorpse) return false;

            var player = Game.CreatePlayer(Body.GetWorldPosition());
            var zombieType = BotHelper.GetZombieType(Type);
            var oldProfile = Body.GetProfile();
            var oldWeapons = BotHelper.GetWeaponSet(Body); // TODO: test gun with lazer once gurt fixed https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=4000

            ScriptHelper.LogDebug(Type, "->", zombieType);
            player.SetBotName(Body.Name); // NOTE: set right now so SpawnLine dialogue will show the bot name correctly

            var zombie = BotManager.SpawnBot(zombieType, Faction, player, BotManager.GetBot(Body).InfectTeam);
            var zombieBody = zombie.Player;

            var modifiers = Body.GetModifiers();
            // Survivor has fake MaxHealth to have blood effect on the face
            if (Enum.GetName(typeof(BotType), BotManager.GetBot(Body).Type).StartsWith("Survivor"))
                modifiers.CurrentHealth = modifiers.MaxHealth = 50;
            else
                modifiers.CurrentHealth = modifiers.MaxHealth * 0.75f;

            zombieBody.SetModifiers(modifiers);
            zombieBody.SetProfile(BotHelper.ToZombieProfile(oldProfile));
            BotHelper.Equip(zombieBody, oldWeapons);

            Body.Remove();
            Body = zombieBody;
            Body.SetBotBehaivorActive(false);
            Body.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch));
            IsTurningIntoZombie = true;
            return true;
        }

        public void Update()
        {
            if (ScriptHelper.IsElapsed(DeathTime, TimeToTurnIntoZombie))
            {
                if (!IsTurningIntoZombie)
                {
                    CanTurnIntoZombie = TurnIntoZombie();
                }
                if (!IsZombie)
                {
                    UpdateTurningIntoZombieAnimation();
                }
            }
        }

        private bool isKneeling;
        private float kneelingTime;
        private void UpdateTurningIntoZombieAnimation()
        {
            if (!isKneeling)
            {
                kneelingTime = Game.TotalElapsedGameTime;
                isKneeling = true;
            }
            else
            {
                if (ScriptHelper.IsElapsed(kneelingTime, 700))
                {
                    Body.AddCommand(new PlayerCommand(PlayerCommandType.StopCrouch));
                    Body.SetBotBehaivorActive(true);
                    IsZombie = true;
                }
            }
        }
    }
    public class PlayerSettings
    {
        public string AccountID = null;
        public string BotType = null;
        public List<string[]> Weapons;

        private static List<string[]> EmptyWeapon
        {
            get
            {
                return new List<string[]>()
                {
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                    new string[] { "NONE", "None" },
                };
            }
        }
        public static PlayerSettings Empty(string userID)
        {
            return new PlayerSettings()
            {
                AccountID = userID,
                BotType = "None",
                Weapons = EmptyWeapon
            };
        }

        public bool IsEmpty()
        {
            if (BotType != "None") return false;

            foreach (var w in Weapons)
            {
                if (w[0] != "NONE" && w[1] != "None")
                    return false;
            }

            return true;
        }

        public static PlayerSettings Parse(string str)
        {
            var pieces = str.Split('.');

            return new PlayerSettings()
            {
                AccountID = pieces[0],
                BotType = pieces[1],
                Weapons = new List<string[]>()
                {
                    new string[] { pieces[2], pieces[3] },
                    new string[] { pieces[4], pieces[5] },
                    new string[] { pieces[6], pieces[7] },
                    new string[] { pieces[8], pieces[9] },
                    new string[] { pieces[10], pieces[11] },
                },
            };
        }

        public PlayerSettings Update(string botType)
        {
            BotType = botType;
            return this;
        }

        public PlayerSettings Update(WeaponItemType type, string weaponItem, string powerup)
        {
            switch (type)
            {
                case WeaponItemType.NONE:
                    Weapons = EmptyWeapon;
                    break;
                case WeaponItemType.Melee:
                    Weapons[0][0] = weaponItem;
                    Weapons[0][1] = powerup;
                    break;
                case WeaponItemType.Rifle:
                    Weapons[1][0] = weaponItem;
                    Weapons[1][1] = powerup;
                    break;
                case WeaponItemType.Handgun:
                    Weapons[2][0] = weaponItem;
                    Weapons[2][1] = powerup;
                    break;
                case WeaponItemType.Thrown:
                    Weapons[3][0] = weaponItem;
                    Weapons[3][1] = powerup;
                    break;
                case WeaponItemType.Powerup:
                    Weapons[4][0] = weaponItem;
                    Weapons[4][1] = powerup;
                    break;
            }
            return this;
        }

        public override string ToString()
        {
            return AccountID + "." + BotType + "."
                + Weapons[0][0] + "." + Weapons[0][1] + "."
                + Weapons[1][0] + "." + Weapons[1][1] + "."
                + Weapons[2][0] + "." + Weapons[2][1] + "."
                + Weapons[3][0] + "." + Weapons[3][1] + "."
                + Weapons[4][0] + "." + Weapons[4][1];
        }
    }
    public class PlayerSpawner
    {
        public Vector2 Position { get; set; }
        public bool HasSpawned { get; set; }
    }
    class Settings
    {
        public readonly int BotCount;
        public readonly int FactionRotationInterval;
        public bool FactionRotationEnabled { get { return FactionRotationInterval != 0; } }
        public readonly int RoundsUntilFactionRotation;
        public readonly Dictionary<PlayerTeam, List<BotFaction>> BotFactions;
        public readonly Dictionary<PlayerTeam, BotFaction> CurrentFaction;
        public readonly string[] PlayerSettings;

        public Settings(
            int botCount,
            int factionRotationInterval,
            int roundsUntilFactionRotation,
            Dictionary<PlayerTeam, List<BotFaction>> botFactions,
            Dictionary<PlayerTeam, BotFaction> currentFaction,
            string[] playerSettings
            )
        {
            BotCount = botCount;
            FactionRotationInterval = factionRotationInterval;
            RoundsUntilFactionRotation = roundsUntilFactionRotation;
            BotFactions = botFactions;
            CurrentFaction = currentFaction;
            PlayerSettings = playerSettings;
        }

        public static Settings Get()
        {
            int botCount;
            var botCountKey = BotHelper.StorageKey("BOT_COUNT");
            if (!BotHelper.Storage.TryGetItemInt(botCountKey, out botCount))
            {
                botCount = Constants.DEFAULT_MAX_BOT_COUNT;
                BotHelper.Storage.SetItem(botCountKey, Constants.DEFAULT_MAX_BOT_COUNT);
            }

            botCount = (int)MathHelper.Clamp(botCount, Constants.BOT_COUNT_MIN, Constants.BOT_COUNT_MAX);

            int factionRotationInterval;
            var factionRotationIntervalKey = BotHelper.StorageKey("FACTION_ROTATION_INTERVAL");
            if (!BotHelper.Storage.TryGetItemInt(factionRotationIntervalKey, out factionRotationInterval))
            {
                factionRotationInterval = Constants.DEFAULT_FACTION_ROTATION_INTERVAL;
                BotHelper.Storage.SetItem(factionRotationIntervalKey, Constants.DEFAULT_FACTION_ROTATION_INTERVAL);
            }

            int roundsUntilRotation;
            var roundsUntilRotationKey = BotHelper.StorageKey("ROUNDS_UNTIL_FACTION_ROTATION");
            if (!BotHelper.Storage.TryGetItemInt(roundsUntilRotationKey, out roundsUntilRotation))
            {
                roundsUntilRotation = factionRotationInterval;
                BotHelper.Storage.SetItem(roundsUntilRotationKey, factionRotationInterval);
            }

            var teams = SharpHelper.EnumToList<PlayerTeam>();
            var botFactions = new Dictionary<PlayerTeam, List<BotFaction>>();
            var currentFaction = new Dictionary<PlayerTeam, BotFaction>();

            string[] currentFactionStr;
            var currentFactionKey = BotHelper.StorageKey("CURRENT_FACTION");
            if (!BotHelper.Storage.TryGetItemStringArr(currentFactionKey, out currentFactionStr))
            {
                currentFactionStr = new string[] { "None", "None", "None", "None" };
            }

            for (var i = 0; i < 4; i++)
            {
                currentFaction.Add((PlayerTeam)i+1, SharpHelper.StringToEnum<BotFaction>(currentFactionStr[i]));
            }

            foreach (var team in teams)
            {
                if (team == PlayerTeam.Independent)
                    continue;

                string[] factions = null;
                var factionsKey = BotHelper.StorageKey("BOT_FACTIONS_" + team);
                if (!BotHelper.Storage.TryGetItemStringArr(factionsKey, out factions))
                {
                    if (team == BotManager.BotTeam)
                        factions = Constants.DEFAULT_FACTIONS;
                    else
                        factions = new string[] { "None" };
                    BotHelper.Storage.SetItem(factionsKey, factions);
                }

                var botFactionList = new List<BotFaction>();
                foreach (var faction in factions)
                {
                    botFactionList.Add(SharpHelper.StringToEnum<BotFaction>(faction));
                }

                botFactions.Add(team, botFactionList);
            }

            string[] playerSettings;
            var playerSettingsKey = BotHelper.StorageKey("PLAYER_SETTINGS");
            if (!BotHelper.Storage.TryGetItemStringArr(playerSettingsKey, out playerSettings))
            {
                playerSettings = new string[] { };
            }

            return new Settings(
                botCount,
                factionRotationInterval,
                roundsUntilRotation,
                botFactions,
                currentFaction,
                playerSettings
            );
        }
    }
    public class WeaponSet
    {
        public WeaponSet()
        {
            Melee = WeaponItem.NONE;
            Primary = WeaponItem.NONE;
            Secondary = WeaponItem.NONE;
            Throwable = WeaponItem.NONE;
            Powerup = WeaponItem.NONE;
            PrimaryPowerup = RangedWeaponPowerup.None;
            SecondaryPowerup = RangedWeaponPowerup.None;
            UseLazer = false;
        }

        static WeaponSet()
        {
            Empty = new WeaponSet();
        }

        public static WeaponSet Empty { get; private set; }

        public WeaponItem Melee { get; set; }
        public WeaponItem Primary { get; set; }
        public WeaponItem Secondary { get; set; }
        public WeaponItem Throwable { get; set; }
        public WeaponItem Powerup { get; set; }
        public RangedWeaponPowerup PrimaryPowerup { get; set; }
        public RangedWeaponPowerup SecondaryPowerup { get; set; }
        public bool UseLazer { get; set; }
        public bool IsEmpty
        {
            get
            {
                return Melee == WeaponItem.NONE
                  && Primary == WeaponItem.NONE
                  && Secondary == WeaponItem.NONE
                  && Throwable == WeaponItem.NONE
                  && Powerup == WeaponItem.NONE
                  && PrimaryPowerup == RangedWeaponPowerup.None
                  && SecondaryPowerup == RangedWeaponPowerup.None
                  && UseLazer == false;
            }
        }
    }
    public enum ZombieStatus
    {
        // Not infected by zombie. Do not turn into zombie when dying
        Human,

        // Infected by zombie or other infected. Start turning into zombie when dying
        Infected,

        // Most zombies dont turn again after dying
        Zombie,
    }
    public enum BotFaction
    {
        None = 0,
        Assassin,
        Agent,
        Bandido,
        Biker,
        Clown,
        Cowboy,
        Engineer,
        Gangster,
        Survivor,
        MetroCop,
        Police,
        PoliceSWAT,
        Robot,
        Sniper,
        Soldier,
        Spacer,
        Stripper,
        Thug,
        Punk,
        Zombie,
        ZombieMutated,

        Boss_Demolitionist = Constants.BOSS_FACTION_START_INDEX,
        Boss_Balista,
        Boss_Boffin,
        Boss_Cindy,
        Boss_Funnyman,
        Boss_Jo,
        Boss_Hacker,
        Boss_Incinerator,
        Boss_Kingpin,
        Boss_MadScientist,
        Boss_Meatgrinder,
        Boss_Mecha,
        Boss_MetroCop,
        Boss_MirrorMan,
        Boss_Ninja,
        Boss_Santa,
        Boss_Sheriff,
        Boss_Teddybear,
        Boss_Zombie,
    }
    public class Faction
    {
        public BotFaction BotFaction { get; private set; }
        public List<SubFaction> SubFactions { get; private set; }
        public float TotalScore { get; private set; }
        public bool HasBoss { get; private set; }
        public List<BotType> Bosses { get; private set; }

        public Faction(List<SubFaction> subFactions, BotFaction botFaction)
        {
            BotFaction = botFaction;
            SubFactions = new List<SubFaction>();
            HasBoss = false;
            Bosses = new List<BotType>();

            foreach (var subFaction in subFactions)
            {
                if (subFaction.Types.Length == 0) continue;

                if (subFaction.HasBoss)
                {
                    HasBoss = true;
                    Bosses.Add(subFaction.Types.Single());
                }
                else
                    TotalScore += subFaction.Weight;

                SubFactions.Add(subFaction);
            }
        }

        private static Dictionary<PlayerTeam, List<IPlayer>> m_playerByTeam = null;
        private static Dictionary<PlayerTeam, List<IPlayer>> PlayerByTeam
        {
            get
            {
                if (m_playerByTeam == null)
                {
                    m_playerByTeam = new Dictionary<PlayerTeam, List<IPlayer>>()
                    {
                        { PlayerTeam.Independent, new List<IPlayer>() },
                        { PlayerTeam.Team1, new List<IPlayer>() },
                        { PlayerTeam.Team2, new List<IPlayer>() },
                        { PlayerTeam.Team3, new List<IPlayer>() },
                        { PlayerTeam.Team4, new List<IPlayer>() },
                    };
                    foreach (var player in Game.GetPlayers())
                    {
                        PlayerByTeam[player.GetTeam()].Add(player);
                    }
                }
                return m_playerByTeam;
            }
        }

        public IEnumerable<Bot> Spawn(PlayerTeam team)
        {
            var factionCount = PlayerByTeam[team].Count;

            return Spawn(factionCount, team, (i, botType, isBoss) =>
            {
                if (i >= PlayerByTeam[team].Count())
                    return null;
                var player = PlayerByTeam[team][i];
                if (isBoss)
                    return BotManager.SpawnBot(botType, BotFaction, player, team, true, triggerOnSpawn: false);
                else
                    return BotManager.SpawnBot(botType, BotFaction, player, team, triggerOnSpawn: false);
            });
        }
        public IEnumerable<Bot> Spawn(int factionCount, PlayerTeam team)
        {
            return Spawn(factionCount, team, (_, botType, isBoss) =>
            {
                if (isBoss)
                    return BotManager.SpawnBot(botType, BotFaction, null, team, true, triggerOnSpawn: false);
                else
                    return BotManager.SpawnBot(botType, BotFaction, null, team, triggerOnSpawn: false);
            });
        }

        private IEnumerable<Bot> Spawn(int factionCount, PlayerTeam team, Func<int, BotType, bool, Bot> spawnCallback)
        {
            var bots = new List<Bot>();
            if (factionCount == 0) return bots;

            var subFactionCount = 0;
            var factionCountRemaining = factionCount;
            var mobCount = HasBoss ? factionCount - 1 : factionCount;
            var i = 0;

            foreach (var subFaction in SubFactions)
            {
                subFactionCount++;

                if (!subFaction.HasBoss)
                {
                    var weight = subFaction.Weight;
                    var share = weight / TotalScore;
                    var botCountRemainingThisType = Math.Round(mobCount * share);

                    while (factionCountRemaining > 0 && (botCountRemainingThisType > 0 || subFactionCount == SubFactions.Count))
                    {
                        var botType = RandomHelper.GetItem(subFaction.Types);
                        var bot = spawnCallback(i++, botType, false);
                        if (bot != null)
                            bots.Add(bot);

                        factionCountRemaining--;
                        botCountRemainingThisType--;
                    }
                }
                else
                {
                    var botType = RandomHelper.GetItem(subFaction.Types);
                    var bot = spawnCallback(i++, botType, true);
                    if (bot != null)
                        bots.Add(bot);

                    factionCountRemaining--;
                }
            }
            return bots;
        }
    }
    public class FactionSet
    {
        public BotFaction Faction { get; private set; }
        public List<Faction> Factions { get; private set; }

        public FactionSet(BotFaction faction)
        {
            Faction = faction;
            Factions = new List<Faction>();
        }

        public void AddFaction(List<SubFaction> subFactions)
        {
            Factions.Add(new Faction(subFactions, Faction));
        }
    }
    public class SubFaction
    {
        public SubFaction(BotType[] types, float weight = 0f)
        {
            Types = types;
            Weight = weight;
        }

        public SubFaction(BotType type, float weight = 0f)
        {
            Types = type == BotType.None ? new BotType[] { } : new BotType[] { type };
            Weight = weight;
        }

        public BotType[] Types { get; private set; }
        public float Weight { get; private set; }
        public bool HasBoss { get { return Weight == 0; } }
    }
    public static class Mapper
    {
        public static WeaponItemType GetWeaponItemType(WeaponItem weaponItem)
        {
            // UPDATE: SFD.Weapons.WeaponDatabase 1.3.4
            switch (weaponItem)
            {
                case WeaponItem.ASSAULT:
                case WeaponItem.BAZOOKA:
                case WeaponItem.BOW:
                case WeaponItem.CARBINE:
                case WeaponItem.DARK_SHOTGUN:
                case WeaponItem.FLAMETHROWER:
                case WeaponItem.GRENADE_LAUNCHER:
                case WeaponItem.M60:
                case WeaponItem.MP50:
                case WeaponItem.SAWED_OFF:
                case WeaponItem.SHOTGUN:
                case WeaponItem.SMG:
                case WeaponItem.SNIPER:
                case WeaponItem.TOMMYGUN:
                    return WeaponItemType.Rifle;

                case WeaponItem.FLAREGUN:
                case WeaponItem.MACHINE_PISTOL:
                case WeaponItem.MAGNUM:
                case WeaponItem.PISTOL:
                case WeaponItem.PISTOL45:
                case WeaponItem.REVOLVER:
                case WeaponItem.SILENCEDPISTOL:
                case WeaponItem.SILENCEDUZI:
                case WeaponItem.UZI:
                    return WeaponItemType.Handgun;

                case WeaponItem.PIPE:
                case WeaponItem.CHAIN:
                case WeaponItem.WHIP:
                case WeaponItem.HAMMER:
                case WeaponItem.KATANA:
                case WeaponItem.MACHETE:
                case WeaponItem.CHAINSAW:
                case WeaponItem.KNIFE:
                case WeaponItem.BAT:
                case WeaponItem.BATON:
                case WeaponItem.SHOCK_BATON:
                case WeaponItem.LEAD_PIPE:
                case WeaponItem.AXE:
                case WeaponItem.BASEBALL:
                    return WeaponItemType.Melee;

                case WeaponItem.BOTTLE:
                case WeaponItem.BROKEN_BOTTLE:
                case WeaponItem.CHAIR:
                case WeaponItem.CUESTICK:
                case WeaponItem.CUESTICK_SHAFT:
                case WeaponItem.FLAGPOLE:
                case WeaponItem.PILLOW:
                case WeaponItem.SUITCASE:
                case WeaponItem.TEAPOT:
                case WeaponItem.TRASH_BAG:
                case WeaponItem.TRASHCAN_LID:
                case WeaponItem.CHAIR_LEG:
                    return WeaponItemType.Melee;

                case WeaponItem.GRENADES:
                case WeaponItem.MOLOTOVS:
                case WeaponItem.MINES:
                case WeaponItem.C4:
                case WeaponItem.C4DETONATOR:
                case WeaponItem.SHURIKEN:
                    return WeaponItemType.Thrown;

                case WeaponItem.STRENGTHBOOST:
                case WeaponItem.SPEEDBOOST:
                case WeaponItem.SLOWMO_5:
                case WeaponItem.SLOWMO_10:
                    return WeaponItemType.Powerup;

                case WeaponItem.PILLS:
                case WeaponItem.MEDKIT:
                case WeaponItem.LAZER:
                case WeaponItem.BOUNCINGAMMO:
                case WeaponItem.FIREAMMO:
                case WeaponItem.STREETSWEEPER:
                    return WeaponItemType.InstantPickup;

                default:
                    return WeaponItemType.NONE;
            }
        }

        public static WeaponItem GetWeaponItem(ProjectileItem projectileItem)
        {
            if (projectileItem == ProjectileItem.FLAKCANNON)
                return WeaponItem.NONE;
            return SharpHelper.StringToEnum<WeaponItem>(SharpHelper.EnumToString<ProjectileItem>(projectileItem));
        }
    }
    static class MathExtension
    {
        public const float TwoPI = MathHelper.TwoPI;
        public const float PI = MathHelper.PI;
        public const float PIOver2 = MathHelper.PIOver2;
        public const float PIOver4 = MathHelper.PIOver4;
        public const float PIOver8 = MathHelper.PIOver8;

        public const float PI_3Over2 = TwoPI - PIOver2;

        public const float OneDeg = MathHelper.PI / 180;

        public static float ToRadians(float angleDegree)
        {
            return (float)(angleDegree * Math.PI) / 180;
        }
        public static float ToDegree(float radians)
        {
            return radians * 180 / (float)Math.PI;
        }
        public static float NormalizeAngle(float radian)
        {
            var result = radian % MathHelper.TwoPI;
            return result < 0 ? result + MathHelper.TwoPI : result;
        }

        public static float Diff(float a, float b)
        {
            return Math.Abs(Math.Abs(a) - Math.Abs(b));
        }
        public static float DiffAngle(float a, float b)
        {
            a = NormalizeAngle(a);
            b = NormalizeAngle(b);

            var da = a - b;
            var db = a - b + MathHelper.PI * 2;
            var dc = a - b - MathHelper.PI * 2;

            var r = da;
            if (Math.Abs(r) > Math.Abs(db))
                r = db;
            if (Math.Abs(r) > Math.Abs(dc))
                r = dc;

            return r;
        }

        public static float FlipAngleX(float angle)
        {
            angle = NormalizeAngle(angle);
            return MathHelper.TwoPI - angle;
        }

        public static float FlipAngleY(float angle)
        {
            angle = NormalizeAngle(angle);
            if (angle < MathHelper.PI)
                return MathHelper.PI - angle;
            else
                return MathHelper.TwoPI - angle + MathHelper.PI;
        }
    }
    public static class RandomHelper
    {
        public static Random Rnd { get; set; }
        static RandomHelper() { Rnd = new Random(); }

        public static bool Boolean()
        {
            return Rnd.NextDouble() >= 0.5;
        }

        public static float Between(float min, float max)
        {
            return (float)Rnd.NextDouble() * (max - min) + min;
        }

        public static T GetItem<T>(List<T> list)
        {
            if (list.Count == 0)
                throw new Exception("list is empty");

            var rndIndex = Rnd.Next(list.Count);
            return list[rndIndex];
        }

        public static T GetItem<T>(params T[] list)
        {
            if (list.Length == 0)
                throw new Exception("list is empty");

            var rndIndex = Rnd.Next(list.Length);
            return list[rndIndex];
        }

        public static T GetEnumValue<T>() where T : struct, IConvertible
        {
            if (!typeof(T).IsEnum)
            {
                throw new ArgumentException("T must be an enumerated type");
            }

            var enumValues = Enum.GetValues(typeof(T));
            return (T)enumValues.GetValue(Rnd.Next(enumValues.Length));
        }

        /// <summary>
        /// Chance from 0f to 1f. 0f means never. 1f means always
        /// </summary>
        /// <param name="chance"></param>
        /// <returns></returns>
        public static bool Percentage(float chance)
        {
            return Between(0f, 1f) < chance;
        }

        // https://stackoverflow.com/a/1262619/9449426
        public static IList<T> Shuffle<T>(IList<T> list)
        {
            var n = list.Count;
            while (n > 1)
            {
                n--;
                var k = Rnd.Next(n + 1);
                var swap = list[k];
                list[k] = list[n];
                list[n] = swap;
            }
            return list;
        }

        public static Vector2 Direction(float minAngle, float maxAngle, bool useRadians = false)
        {
            var angle = Between(minAngle, maxAngle);

            if (!useRadians)
                angle = MathExtension.ToRadians(angle);

            return ScriptHelper.GetDirection(angle);
        }

        public static Vector2 WithinArea(Area area)
        {
            var center = area.Center;
            var halfWidth = area.Width / 2;
            var halfHeight = area.Height / 2;

            return new Vector2()
            {
                X = Between(center.X - halfWidth, center.X + halfWidth),
                Y = Between(center.Y - halfHeight, center.Y + halfHeight),
            };
        }
    }
    static class RayCastHelper
    {
        // List of objects that bullet cannot pass initially, but can be broken down
        public static readonly HashSet<string> ObjectsBulletCanDestroy = new HashSet<string>()
        {
            "ReinforcedGlass00A",
            "AtlasStatue00",
            "BulletproofGlass00Weak",
            "StoneWeak00A",
            "StoneWeak00B",
            "StoneWeak00C",
            "Concrete01Weak",
            "Wood06Weak",
            "StreetsweeperCrate"
        };

        // List of objects that bullet cant pass (edge cases)
        // https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3952&p=23291#p23291
        public static readonly HashSet<string> ObjectsBulletCantPass = new HashSet<string>()
        {
            "DinerBooth",
        };

        private static bool BlockProjectile(RayCastResult result)
        {
            return ObjectsBulletCantPass.Contains(result.HitObject.Name)
                    // Filter objects bullet can passthrough like ladder
                    // Not an optimal solution: https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3952&p=23291#p23291
                    || (result.HitObject.GetCollisionFilter().BlockExplosions
                    && !ObjectsBulletCanDestroy.Contains(result.HitObject.Name));
        }

        public static IEnumerable<RayCastResult> ImpassableObjects(Vector2 start, Vector2 end)
        {
            var rayCastInput = new RayCastInput()
            {
                MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicPlatform + CategoryBits.DynamicG1,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(start, end, rayCastInput);

            foreach (var result in results)
            {
                if (BlockProjectile(result))
                    yield return result;
            }
        }

        public static bool SameTeamRaycast(IPlayer p1, IPlayer p2, PlayerTeam t1)
        {
            if (p1 == null || p2 == null) return false;
            // t1 is cached before p1 is removed
            if (p1.IsRemoved)
            {
                var t2 = p2.GetTeam();
                return t2 == PlayerTeam.Independent ? false : t1 == t2;
            }
            return ScriptHelper.SameTeam(p1, p2);
        }

        /// <summary>
        /// Find players that touch the line. filter players behind block objects (wall, ground...)
        /// </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns></returns>
        public static IEnumerable<RayCastResult> Players(Vector2 start, Vector2 end,
            bool blockTeammates = false, PlayerTeam team = PlayerTeam.Independent, IPlayer fromPlayer = null)
        {
            var rayCastInput = new RayCastInput()
            {
                // How to customize filter
                // Open with notepad ..\Superfighters Deluxe\Content\Data\Tiles\CollisionGroups\collisionGroups.sfdx
                // Search for categoryBits for the object types you want to accept for collision
                // Calc sum of those values (in binary) and convert to hex
                // 
                MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicPlatform + CategoryBits.Player + CategoryBits.DynamicG1,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(start, end, rayCastInput);
            var smallestBlockedFraction = float.PositiveInfinity;
            var smallestTeammateFraction = float.PositiveInfinity;
            int closestBlockObjectID = int.MinValue;
            int closestTeammateID = int.MinValue;
            var playerResult = new List<RayCastResult>();

            foreach (var result in results)
            {
                if (BlockProjectile(result))
                {
                    if (smallestBlockedFraction > result.Fraction)
                    {
                        smallestBlockedFraction = result.Fraction;
                        closestBlockObjectID = result.ObjectID;
                    }
                }
                if (result.IsPlayer) playerResult.Add(result);
                if (result.IsPlayer && blockTeammates)
                {
                    var player = Game.GetPlayer(result.ObjectID);

                    if (SameTeamRaycast(fromPlayer, player, team))
                    {
                        if (smallestTeammateFraction > result.Fraction)
                        {
                            smallestTeammateFraction = result.Fraction;
                            closestTeammateID = result.ObjectID;
                        }
                    }
                }
            }

            //Game.DrawLine(start, end);
            if (closestBlockObjectID != int.MinValue)
                Game.DrawArea(Game.GetObject(closestBlockObjectID).GetAABB(), Color.Yellow);
            if (closestTeammateID != int.MinValue)
                Game.DrawArea(Game.GetPlayer(closestTeammateID).GetAABB(), Color.Red);

            foreach (var result in playerResult)
            {
                var player = Game.GetPlayer(result.ObjectID);
                var blocked = false;

                if (blockTeammates)
                {
                    if (SameTeamRaycast(fromPlayer, player, team))
                        continue;
                    if (smallestTeammateFraction <= result.Fraction)
                        blocked = true;
                }
                if (smallestBlockedFraction < result.Fraction)
                    blocked = true;

                if (!blocked)
                {
                    //Game.DrawArea(player.GetAABB(), Color.Green);
                    yield return result;
                }
            }
        }

        public static IEnumerable<IPlayer> GetFirstPlayerInRange(IPlayer player, float radius, float minAngle = 0, float maxAngle = 0,
            bool blockTeammates = false, PlayerTeam team = PlayerTeam.Independent, IPlayer fromPlayer = null)
        {
            return GetFirstPlayerInRange(player.GetWorldPosition() + Vector2.UnitY * 15, radius, minAngle, maxAngle,
                blockTeammates, team, fromPlayer);
        }

        public static IEnumerable<IPlayer> GetFirstPlayerInRange(Vector2 center, float radius, float minAngle = 0, float maxAngle = 0,
            bool blockTeammates = false, PlayerTeam team = PlayerTeam.Independent, IPlayer fromPlayer = null)
        {
            var filterArea = ScriptHelper.GrowFromCenter(center, radius * 2); 
            var players = Game.GetObjectsByArea<IPlayer>(filterArea)
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), center, radius, minAngle, maxAngle));

            foreach (var player in players)
            {
                if (ScriptHelper.SameTeam(player, fromPlayer) && blockTeammates)
                    continue;

                var playerPosition = player.GetWorldPosition() + Vector2.UnitY * 7;
                foreach (var result in Players(center, playerPosition, blockTeammates, team, fromPlayer))
                {
                    yield return Game.GetPlayer(result.ObjectID);
                    break;
                }
            }
        }
    }
    public static class ScriptHelper
    {
        public static readonly Color Red = new Color(128, 32, 32);
        public static readonly Color Orange = new Color(255, 128, 24);

        public static readonly Color MESSAGE_COLOR = new Color(24, 238, 200);
        public static readonly Color ERROR_COLOR = new Color(244, 77, 77);
        public static readonly Color WARNING_COLOR = new Color(249, 191, 11);

        public static void PrintMessage(string message, Color? color = null)
        {
            Game.ShowChatMessage(message, color ?? MESSAGE_COLOR);
        }

        // TODO: remove once gurt fixes
        // https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=3995
        // https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3994
        public static string ToDisplayString(params object[] values)
        {
            var str = "";

            foreach (var v in values)
            {
                if (v == null)
                    str += " <null>";
                else if (v is float || v is double)
                    str += " " + ((float)v).ToString("0.00");
                else
                    str += " " + v;
            }

            return str;
        }
        public static void LogDebugF(string format, params object[] values)
        {
            if (!Game.IsEditorTest) return;
            Game.WriteToConsoleF(format, values);
        }
        public static void LogDebug(params object[] values)
        {
            if (!Game.IsEditorTest) return;
            Game.WriteToConsole(ToDisplayString(values));
        }
        public static void LogF(string format, params object[] values)
        {
            Game.WriteToConsoleF(format, values);
        }
        public static void Log(params object[] values)
        {
            Game.WriteToConsole(ToDisplayString(values));
        }

        public static void Timeout(Action callback, uint interval)
        {
            Events.UpdateCallback.Start(e => callback.Invoke(), interval, 1);
        }

        public static void RunIn(Action callback, int ms)
        {
            Events.UpdateCallback.Start(e => callback.Invoke(), 0, (ushort)(60 * ms / 1000));
        }

        public static bool IsElapsed(float timeStarted, float timeToElapse)
        {
            return Game.TotalElapsedGameTime - timeStarted >= timeToElapse;
        }

        public static bool SpawnerHasPlayer(IObject spawner, IPlayer[] players)
        {
            // Player position y: -20 || +9
            // => -21 -> +10
            // Player position x: unchange
            foreach (var player in players)
            {
                var playerPosition = player.GetWorldPosition();
                var spawnerPosition = spawner.GetWorldPosition();

                if (spawnerPosition.Y - 21 <= playerPosition.Y && playerPosition.Y <= spawnerPosition.Y + 10
                    && spawnerPosition.X == playerPosition.X)
                    return true;
            }

            return false;
        }

        public static void MakeInvincible(IPlayer player)
        {
            if (player != null)
            {
                var mod = player.GetModifiers();
                mod.FireDamageTakenModifier = 0;
                mod.ImpactDamageTakenModifier = 0;
                mod.MeleeDamageTakenModifier = 0;
                mod.ExplosionDamageTakenModifier = 0;
                mod.ProjectileDamageTakenModifier = 0;
                player.SetModifiers(mod);
            }
        }

        public static bool IsDifferentTeam(IPlayer player1, IPlayer player2)
        {
            return player1.GetTeam() != player2.GetTeam() || player1.GetTeam() == PlayerTeam.Independent;
        }

        private static void NormalizeMinMaxAngle(ref float minAngle, ref float maxAngle, bool smallSector)
        {
            minAngle = MathExtension.NormalizeAngle(minAngle);
            maxAngle = MathExtension.NormalizeAngle(maxAngle);

            if (minAngle > maxAngle)
            {
                var swap = minAngle;
                minAngle = maxAngle;
                maxAngle = swap;
            }

            if (maxAngle - minAngle > MathHelper.PI && smallSector)
            {
                var oldMinAngle = minAngle;
                minAngle = maxAngle;
                maxAngle = oldMinAngle + MathHelper.TwoPI;
            }
        }

        public static bool IntersectCircle(Vector2 position, Vector2 center, float radius,
            float minAngle = 0, float maxAngle = 0, bool smallSector = true)
        {
            NormalizeMinMaxAngle(ref minAngle, ref maxAngle, smallSector);
            var fullCircle = minAngle == 0 && maxAngle == 0;
            var distanceToCenter = Vector2.Distance(position, center);

            if (distanceToCenter <= radius)
            {
                if (!fullCircle)
                {
                    var angle = MathExtension.NormalizeAngle(GetAngle(position - center));

                    if (angle >= minAngle && angle <= maxAngle
                            || angle + MathHelper.TwoPI >= minAngle && angle + MathHelper.TwoPI <= maxAngle)
                        return true;
                }
                else
                    return true;
            }

            return false;
        }

        public static bool IntersectCircle(Area area, Vector2 center, float radius)
        {
            return IntersectCircle(area, center, radius, 0, 0, false);
        }
        public static bool IntersectCircle(Area area, Vector2 center, float radius,
            float minAngle = 0, float maxAngle = 0, bool smallSector = true)
        {
            NormalizeMinMaxAngle(ref minAngle, ref maxAngle, smallSector);
            var fullCircle = minAngle == 0 && maxAngle == 0;
            var lines = new List<Vector2[]>()
            {
                new Vector2[] { area.BottomRight, area.BottomLeft },
                new Vector2[] { area.BottomLeft, area.TopLeft },
                new Vector2[] { area.TopLeft, area.TopRight },
                new Vector2[] { area.TopRight, area.BottomRight },
            };

            foreach (var line in lines)
            {
                var distanceToCenter = FindDistanceToSegment(center, line[0], line[1]);

                if (distanceToCenter <= radius)
                {
                    if (!fullCircle)
                    {
                        var corner = line[0];
                        var angle = MathExtension.NormalizeAngle(GetAngle(corner - center));

                        if (angle >= minAngle && angle <= maxAngle
                            || angle + MathHelper.TwoPI >= minAngle && angle + MathHelper.TwoPI <= maxAngle)
                            return true;
                    }
                    else
                        return true;
                }
            }

            return false;
        }

        // https://stackoverflow.com/a/1501725/9449426
        public static float FindDistanceToSegment(Vector2 point, Vector2 p1, Vector2 p2)
        {
            // Return minimum distance between line segment vw and point point
            var lengthSquare = (float)(Math.Pow(p2.X - p1.X, 2) + Math.Pow(p2.Y - p1.Y, 2));  // i.e. |p2-p1|^2 -  avoid a sqrt
            if (lengthSquare == 0.0) return Vector2.Distance(point, p1);   // p1 == p2 case
            // Consider the line extending the segment, parameterized as p1 + t (p2 - p1).
            // We find projection of point point onto the line. 
            // It falls where t = [(point-p1) . (p2-p1)] / |p2-p1|^2
            // We clamp t from [0,1] to handle points outside the segment vw.
            var t = MathHelper.Clamp(Vector2.Dot(point - p1, p2 - p1) / lengthSquare, 0, 1);
            var projection = p1 + t * (p2 - p1);  // Projection falls on the segment
            return Vector2.Distance(point, projection);
        }

        public static Vector2 GetDirection(float radianAngle)
        {
            return new Vector2()
            {
                X = (float)Math.Cos(radianAngle),
                Y = (float)Math.Sin(radianAngle),
            };
        }

        // https://stackoverflow.com/a/6247163/9449426
        public static float GetAngle(Vector2 direction)
        {
            return (float)Math.Atan2(direction.Y, direction.X);
        }

        public static float[] Flip(float[] angles, FlipDirection direction)
        {
            if (direction == FlipDirection.Horizontal)
            {
                angles[0] = MathExtension.FlipAngleY(angles[0]);
                angles[1] = MathExtension.FlipAngleY(angles[1]);
            }
            else
            {
                angles[0] = MathExtension.FlipAngleX(angles[0]);
                angles[1] = MathExtension.FlipAngleX(angles[1]);
            }

            return new float[]
            {
                Math.Min(angles[0], angles[1]),
                Math.Max(angles[0], angles[1]),
            };
        }

        public static bool SameTeam(IPlayer player1, IPlayer player2)
        {
            if (player1 == null || player2 == null) return false;
            return player1.GetTeam() == player2.GetTeam()
                || player1.GetTeam() == PlayerTeam.Independent && player1.UniqueID == player2.UniqueID;
        }

        public static bool IsIndestructible(IObject o) { return o.GetMaxHealth() == 1; }

        public static Dictionary<string, IUser> GetActiveUsersByAccountID()
        {
            var usersByAccountID = new Dictionary<string, IUser>();

            // NOTE: there can be multiple users with the same AccountID in the Map Editor. wtf moment
            // Anyway, get the first IUser match only
            foreach (var user in Game.GetActiveUsers())
            {
                if (!usersByAccountID.ContainsKey(user.AccountID))
                    usersByAccountID.Add(user.AccountID, user);
            }

            return usersByAccountID;
        }

        public static Area GrowFromCenter(Vector2 center, float width, float height = 0)
        {
            if (height == 0) height = width;
            var halfWidth = width / 2;
            var halfHeight = height / 2;

            return GrowFromCenter(center, halfWidth, halfHeight, halfWidth, halfHeight);
        }

        public static Area GrowFromCenter(Vector2 center, float toLeft, float toTop, float toRight, float toBottom)
        {
            return new Area(
                center.Y + toTop,
                center.X - toLeft,
                center.Y - toBottom,
                center.X + toRight);
        }

        public static System.Reflection.MethodBase GetMethodInfo(int skipFrames)
        {
            return new System.Diagnostics.StackFrame(skipFrames).GetMethod();
        }
        public static void Stopwatch(Func<string> action, int reportThreshold = 1)
        {
            var stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();
            var name = action();
            stopwatch.Stop();

            if (stopwatch.ElapsedMilliseconds >= reportThreshold)
                LogDebugF("-Perf {2,6} {0}:{1}", stopwatch.ElapsedMilliseconds, GetMethodInfo(1).Name, name);
        }

        public static ProjectilePowerup GetPowerup(IProjectile projectile)
        {
            if (projectile.PowerupBounceActive)
                return ProjectilePowerup.Bouncing;

            if (projectile.PowerupFireActive)
                return ProjectilePowerup.Fire;

            return ProjectilePowerup.None;
        }

        public static bool IsMeAlone()
        {
            var users = Game.GetActiveUsers().Where(u => !u.IsBot);
            var i = 0;

            foreach (var u in users)
            {
                if (u.AccountName == "NearHuscarl") i++;
            }
            return users.Count() == i;
        }

        // Never use is keyword to check if IObject is IPlayer. it's extremely slow
        public static bool IsPlayer(IObject obj)
        {
            if (obj == null) return false;
            return obj.GetCollisionFilter().CategoryBits == CategoryBits.Player;
        }
        // A faster cast player (dont use as/is)
        public static IPlayer CastPlayer(IObject obj)
        {
            if (obj == null) return null;
            return Game.GetPlayer(obj.UniqueID);
        }

        public static bool IsDynamicObject(IObject obj)
        {
            var cf = obj.GetCollisionFilter();
            return cf.CategoryBits == CategoryBits.DynamicG1
                || cf.CategoryBits == CategoryBits.DynamicG2
                || cf.CategoryBits == CategoryBits.Dynamic;
        }

        public static bool IsInteractiveObject(IObject obj)
        {
            var cf = obj.GetCollisionFilter();
            return cf.CategoryBits == CategoryBits.DynamicG1
                || cf.CategoryBits == CategoryBits.DynamicG2
                || cf.CategoryBits == CategoryBits.Dynamic
                || cf.CategoryBits == CategoryBits.Player
                || cf.CategoryBits == CategoryBits.DynamicPlatform
                || cf.CategoryBits == CategoryBits.StaticGround;
        }

        public static void Unscrew(IObject o)
        {
            var hitbox = o.GetAABB();
            foreach (var j in Game.GetObjectsByArea<IObjectTargetObjectJoint>(hitbox))
            {
                var to = j.GetTargetObject();
                if (to == null) continue;
                if (to.UniqueID == o.UniqueID)
                {
                    o.SetLinearVelocity(Vector2.Zero);
                    j.SetTargetObject(null);
                    j.Remove();
                }
            }
            foreach (var j in Game.GetObjectsByArea<IObjectWeldJoint>(hitbox))
            {
                j.RemoveTargetObject(o);
            }
            foreach (var j in Game.GetObjectsByArea<IObjectRevoluteJoint>(hitbox))
            {
                var to = j.GetTargetObjectA();
                if (to == null) continue;
                if (to.UniqueID == o.UniqueID)
                    j.SetTargetObjectA(null);
            }
        }

        public static void ExecuteSingleCommand(IPlayer player, PlayerCommandType commandType, uint delay = 10,
            PlayerCommandFaceDirection facingDirection = PlayerCommandFaceDirection.None)
        {
            player.SetInputEnabled(false);
            // some commands like Stagger not working without this line
            player.AddCommand(new PlayerCommand(PlayerCommandType.FaceAt, facingDirection));

            Timeout(() =>
            {
                player.AddCommand(new PlayerCommand(commandType, facingDirection));
                if (delay == 0) return;
                Timeout(() =>
                {
                    player.ClearCommandQueue();
                    player.SetInputEnabled(true);
                }, delay);
            }, 2);
        }
    }
    public static class SFD
    {
        public static IGame Game;
    }
    public static class SharpHelper
    {
        public static T StringToEnum<T>(string str)
        {
            return (T)Enum.Parse(typeof(T), str);
        }
        public static T[] EnumToArray<T>()
        {
            return (T[])Enum.GetValues(typeof(T));
        }

        public static IEnumerable<T> EnumToList<T>()
        {
            var enumArray = EnumToArray<T>();

            foreach (var enumVal in enumArray)
            {
                yield return enumVal;
            }
        }
        // a bit faster than ToString(). https://stackoverflow.com/a/17034624/9449426
        public static string EnumToString<T>(T enumVal)
        {
            return Enum.GetName(typeof(T), enumVal);
        }
        public static bool TryParseEnum<T>(string str, out T result) where T : struct, IConvertible
        {
            result = default(T);

            if (!typeof(T).IsEnum)
            {
                return false;
            }

            int index = -1;
            if (int.TryParse(str, out index))
            {
                if (Enum.IsDefined(typeof(T), index))
                {
                    // https://stackoverflow.com/questions/10387095/cast-int-to-generic-enum-in-c-sharp
                    result = (T)(object)index;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if (!Enum.TryParse(str, ignoreCase: true, result: out result))
                {
                    return false;
                }
            }

            return true;
        }

        public static string GetNamespace<T>()
        {
            return typeof(T).Namespace;
        }

        public static bool IsIntersectRectangle(Vector2 start, Vector2 end, Vector2[] corners)
        {
            if (corners.Length != 4)
                throw new Exception("A rectangle must have 4 corners");

            var normal = Vector2.Normalize(end - start);

            //we don't know yet on which side of the line the rectangle lies
            float rectangleSide = 0;
            foreach (Vector2 corner in corners)
            {
                //cornerSide will be positive if the corner is on the side the normal points to,
                //zero if the corner is exactly on the line, and negative otherwise
                float cornerSide = Vector2.Dot(corner - start, normal);
                if (rectangleSide == 0)
                    //first evaluated corner or all previous corners lie exactly on the line
                    rectangleSide = cornerSide;
                else
                    if (cornerSide != 0 && // ignore corners on the line
                      (cornerSide > 0) != (rectangleSide > 0)) // different sides
                    return true;
            }

            return false;
        }
    }
    enum BlackholeSize { Small, Big }

    class BlackholeProjectile : HoveringProjectile
    {
        private class PulledObjectInfo
        {
            public IObject Object;
            public IObjectPullJoint PullJoint;
            public float OriginalMass;
            public bool UnScrewed = false;
        }

        private static List<Vector2> BlackholeLocations = new List<Vector2>();

        private float ActiveTime = 4000;
        public const float SuckRadius = 150;
        public const float PullRadius = 100;
        public const float EventHorizon = 50;
        public const float DestroyRadius = 25;

        private float m_activeTime = 0f;
        private IObject m_blackhole;
        private List<IObject> m_blackholes = new List<IObject>();

        private IObjectTargetObjectJoint m_magnetJoint;
        private IObjectRevoluteJoint m_revoluteJoint;
        private Dictionary<int, PulledObjectInfo> m_pulledObjects = new Dictionary<int, PulledObjectInfo>();
        private enum Range { Center, EventHorizon, Level2, Level1, Outside, }

        private BlackholeSize m_size;
        public BlackholeSize Size
        {
            get { return m_size; }
            private set
            {
                m_size = value;
                if (value == BlackholeSize.Big)
                {
                    ExplodeRange = 50;
                    ExplodeRange2 = .5f;
                    ActiveTime = Game.IsEditorTest ? 30000 : 4000;
                }
                else
                {
                    ExplodeRange = 0;
                    ExplodeRange2 = 0;
                    ActiveTime = 2000;
                }
            }
        }

        public BlackholeProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Blackhole)
        {
            UpdateDelay = 0;
        }

        protected override bool OnProjectileCreated()
        {
            if (Instance.ProjectileItem == ProjectileItem.BAZOOKA
                || Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || Instance.ProjectileItem == ProjectileItem.SNIPER
                || Instance.ProjectileItem == ProjectileItem.BOW
                || Instance.ProjectileItem == ProjectileItem.FLAREGUN
                || Instance.ProjectileItem == ProjectileItem.MAGNUM)
            {
                Size = BlackholeSize.Big;
            }
            else
                Size = BlackholeSize.Small;
            return true;
        }

        protected override void OnHover()
        {
            base.OnHover();
            Instance.FlagForRemoval();

            // no blackhole too close with other blackholes
            foreach (var hole in BlackholeLocations)
            {
                if (ScriptHelper.GrowFromCenter(hole, DestroyRadius * 2).Contains(HoverPosition))
                {
                    Destroy();
                    return;
                }
            }
            BlackholeLocations.Add(HoverPosition);

            var noCollisionFilter = Game.CreateObject("FarBgBlimp00").GetCollisionFilter();

            if (Size == BlackholeSize.Big)
            {
                Game.RunCommand("/settime .1");
                ScriptHelper.Timeout(() => Game.RunCommand("/settime 1"), 2000);
            }

            m_blackhole = Game.CreateObject("Shadow00A");
            m_blackhole.SetBodyType(BodyType.Dynamic);
            m_blackhole.SetCollisionFilter(noCollisionFilter);
            m_blackhole.SetWorldPosition(HoverPosition);

            ScriptHelper.RunIn(() => Game.DrawCircle(HoverPosition, .5f, Color.Green), 10000);

            for (var i = 1; i < 40; i++)
            {
                var egg = Game.CreateObject("Shadow00A");
                egg.SetAngle(MathHelper.TwoPI * i / 39);
                egg.SetBodyType(BodyType.Static);
                egg.SetCollisionFilter(noCollisionFilter);
                egg.SetWorldPosition(HoverPosition);
                m_blackholes.Add(egg);
            }

            m_magnetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint");
            m_magnetJoint.SetWorldPosition(HoverPosition);
            m_magnetJoint.SetTargetObject(m_blackhole);

            m_revoluteJoint = (IObjectRevoluteJoint)Game.CreateObject("RevoluteJoint");
            m_revoluteJoint.SetWorldPosition(HoverPosition);
            m_revoluteJoint.SetTargetObjectA(m_blackhole);
            //m_revoluteJoint.SetMotorEnabled(true);
            m_revoluteJoint.SetMotorSpeed(3000);
            m_revoluteJoint.SetMaxMotorTorque(50000);

            m_activeTime = Game.TotalElapsedGameTime;
        }

        private Range GetPositionToCenter(IObject o)
        {
            if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, DestroyRadius))
            {
                return Range.Center;
            }
            else if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, EventHorizon))
            {
                return Range.EventHorizon;
            }
            else if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, PullRadius))
            {
                return Range.Level2;
            }
            else if (ScriptHelper.IntersectCircle(o.GetAABB(), HoverPosition, SuckRadius))
            {
                return Range.Level1;
            }
            return Range.Outside;
        }

        private float m_updateDelay = 0f;
        private float m_update2Delay = 0f;
        protected override void UpdateHovering(float elapsed)
        {
            base.UpdateHovering(elapsed);
            DrawDebugging();

            if (ScriptHelper.IsElapsed(m_activeTime, ActiveTime))
            {
                Destroy(); return;
            }

            if (ScriptHelper.IsElapsed(m_updateDelay, 30) && Size == BlackholeSize.Big)
            {
                m_updateDelay = Game.TotalElapsedGameTime;
                UpdateObjectsStatus();
            }

            if (ScriptHelper.IsElapsed(m_update2Delay, 15))
            {
                m_update2Delay = Game.TotalElapsedGameTime;
                UpdateEntities();
            }

            if (Size == BlackholeSize.Big)
                UpdatePulledObjects();
        }

        private void UpdateEntities()
        {
            var projectiles = Game.GetProjectiles()
                .Where(p => ScriptHelper.IntersectCircle(p.Position, HoverPosition, SuckRadius));
            foreach (var projectile in projectiles)
            {
                if (ScriptHelper.IntersectCircle(projectile.Position, HoverPosition, 10))
                {
                    projectile.FlagForRemoval();
                    continue;
                }
                var pf = Vector2.Normalize(HoverPosition - projectile.Position) * GetPullForce(projectile.Position);
                projectile.Direction = projectile.Direction + pf;
            }

            if (Size == BlackholeSize.Small) return;

            var filterArea = ScriptHelper.GrowFromCenter(HoverPosition, SuckRadius * 2);
            var fireNodes = Game.GetFireNodes(filterArea)
                .Where(p => ScriptHelper.IntersectCircle(p.Position, HoverPosition, SuckRadius));
            foreach (var fireNode in fireNodes)
            {
                if (fireNode.AttachedToObjectID != 0 && Game.GetObject(fireNode.AttachedToObjectID).Name == "ItemDebrisFlamethrower01")
                    continue;

                // cannot move fireNode, create object with fireNode and move it instead
                var position = fireNode.Position;
                var objectIgnited = Game.CreateObject("ItemDebrisFlamethrower01", position);

                objectIgnited.SetLinearVelocity(fireNode.Velocity);
                objectIgnited.SetMaxFire();

                Game.EndFireNode(fireNode.InstanceID);
            }
        }

        private void UpdateObjectsStatus()
        {
            var filterArea = ScriptHelper.GrowFromCenter(HoverPosition, SuckRadius * 2);
            var objectsInArea = Game.GetObjectsByArea(filterArea, PhysicsLayer.Active)
                .Where(o => (ScriptHelper.IsDynamicObject(o) || ScriptHelper.IsPlayer(o)));

            if (m_pulledObjects.Count < 10) // lag :(
            {
                var objectInSuckRadius = objectsInArea
                    .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), HoverPosition, SuckRadius));
                foreach (var o in objectInSuckRadius)
                {
                    if (!m_pulledObjects.ContainsKey(o.UniqueID))
                    {
                        Pull(o);
                    }
                }
            }

            var objectsInDestroyedRadius = objectsInArea
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), HoverPosition, DestroyRadius));

            foreach (var o in objectsInDestroyedRadius)
            {
                if (m_pulledObjects.ContainsKey(o.UniqueID))
                {
                    var smallObject = o.GetAABB().Width * o.GetAABB().Height <= 100;
                    var player = ScriptHelper.CastPlayer(o);

                    // TODO: gurt fix please?
                    if (player != null) player.DealDamage(1f);
                    else o.SetHealth(o.GetHealth() - 1f);

                    if (smallObject || o.GetHealth() == 0)
                        o.Destroy();
                }
            }
        }

        private void UpdatePulledObjects()
        {
            var removeList = new List<int>();
            foreach (var kv in m_pulledObjects)
            {
                var objectInfo = kv.Value;
                var o = objectInfo.Object;
                var pos = GetPositionToCenter(o);

                objectInfo.PullJoint.SetForce(GetPullForce(o));

                if (o.IsRemoved || pos == Range.Outside)
                {
                    removeList.Add(kv.Key);
                    StopPulling(objectInfo);
                }

                if (ScriptHelper.IsPlayer(o))
                {
                    var player = Game.GetPlayer(o.UniqueID);

                    if (pos <= Range.EventHorizon)
                    {
                        Game.DrawArea(player.GetAABB(), Color.Red);
                        if (!player.IsFalling)
                            ScriptHelper.ExecuteSingleCommand(player, PlayerCommandType.Fall, 0);
                    }
                    else if (pos == Range.Level2)
                    {
                        Game.DrawArea(player.GetAABB(), Color.Yellow);
                        if (!player.IsStaggering)
                            ScriptHelper.ExecuteSingleCommand(player, PlayerCommandType.Stagger, 0, GetStaggerDirection(player));
                    }

                    if (pos <= Range.Level1)
                    {
                        if (player.IsOnGround || player.IsLayingOnGround)
                        {
                            var playerPos = player.GetWorldPosition();
                            var newPos = playerPos + Vector2.UnitX * 1 * -Math.Sign(playerPos.X - HoverPosition.X);
                            player.SetWorldPosition(newPos);
                        }
                    }
                }
                else
                {
                    if (pos <= Range.EventHorizon)
                    {
                        if (!objectInfo.UnScrewed)
                        {
                            ScriptHelper.Unscrew(o);
                            objectInfo.UnScrewed = true;
                        }
                    }
                    else if (pos == Range.Level2)
                    {
                        if (!objectInfo.UnScrewed && RandomHelper.Percentage(0.01f))
                        {
                            ScriptHelper.Unscrew(o);
                            objectInfo.UnScrewed = true;
                        }
                    }
                }
            }
            foreach (var i in removeList) m_pulledObjects.Remove(i);
        }

        private void DrawDebugging()
        {
            if (Game.IsEditorTest)
            {
                Game.DrawCircle(HoverPosition, SuckRadius, Color.Cyan);
                Game.DrawCircle(HoverPosition, PullRadius, Color.Red);
                Game.DrawCircle(HoverPosition, EventHorizon, Color.Red);
                Game.DrawCircle(HoverPosition, DestroyRadius, Color.Red);
                Game.DrawArea(m_blackhole.GetAABB(), Color.Blue);
                Game.DrawArea(m_magnetJoint.GetAABB(), Color.Magenta);
                foreach (var o in m_pulledObjects.Values) Game.DrawArea(o.Object.GetAABB(), Color.Yellow);
            }
        }

        private float GetPullForce(Vector2 position)
        {
            return .05f * 1 / (float)Math.Pow(Vector2.Distance(position, HoverPosition) / SuckRadius, 1.5);
        }

        private float GetPullForce(IObject o)
        {
            var pullForce = ScriptHelper.IsPlayer(o) ? .1f : .05f;
            return pullForce * 1 /
                (float)Math.Pow(Vector2.Distance(o.GetWorldPosition(), HoverPosition) / SuckRadius, 1.5);
        }

        private PlayerCommandFaceDirection GetStaggerDirection(IPlayer player)
        {
            return player.GetWorldPosition().X > HoverPosition.X
                ? PlayerCommandFaceDirection.Right : PlayerCommandFaceDirection.Left;
        }

        private void Pull(IObject o)
        {
            var player = ScriptHelper.CastPlayer(o);

            if (player != null)
                ScriptHelper.ExecuteSingleCommand(player, PlayerCommandType.Stagger, 20, GetStaggerDirection(player));

            if (o.GetBodyType() == BodyType.Static) o.SetBodyType(BodyType.Dynamic);

            var pullJoint = (IObjectPullJoint)Game.CreateObject("PullJoint");
            var originalMass = o.GetMass();

            o.SetMass(.004f);

            pullJoint.SetWorldPosition(o.GetWorldPosition());
            pullJoint.SetForce(GetPullForce(o));
            pullJoint.SetForcePerDistance(0);
            //if (Game.IsEditorTest) pullJoint.SetLineVisual(LineVisual.DJRope);

            pullJoint.SetTargetObject(o);
            pullJoint.SetTargetObjectJoint(m_magnetJoint);

            m_pulledObjects.Add(o.UniqueID, new PulledObjectInfo()
            {
                Object = o,
                OriginalMass = originalMass,
                PullJoint = pullJoint,
            });
        }

        protected override void Destroy()
        {
            base.Destroy();
            BlackholeLocations.Remove(HoverPosition);

            if (m_blackhole != null) m_blackhole.Remove();
            foreach (var o in m_blackholes) o.Remove();
            if (m_magnetJoint != null) m_magnetJoint.Remove();

            foreach (var objectInfo in m_pulledObjects.Values)
            {
                StopPulling(objectInfo);
            }
        }

        private void StopPulling(PulledObjectInfo objectInfo)
        {
            objectInfo.Object.SetMass(objectInfo.OriginalMass);
            objectInfo.PullJoint.Remove();

            if (ScriptHelper.IsPlayer(objectInfo.Object))
            {
                var player = Game.GetPlayer(objectInfo.Object.UniqueID);
                if (player != null)
                    player.SetInputEnabled(true);
            }
        }
    }
    class BlastBullet : Projectile
    {
        public BlastBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Blast) { }

        protected override bool OnProjectileCreated()
        {
            if (IsExplosiveProjectile)
                return false;

            Instance.DamageDealtModifier = IsShotgunShell ? .35f : .5f;
            return true;
        }

        private IObject GetObject(ProjectileHitArgs args)
        {
            if (args.IsPlayer)
            {
                var player = Game.GetPlayer(args.HitObjectID);

                if (!player.IsFalling)
                {
                    ScriptHelper.ExecuteSingleCommand(player, PlayerCommandType.Fall, 30);
                }

                return player;
            }
            else
            {
                return Game.GetObject(args.HitObjectID);
            }
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            var hitObject = GetObject(args);

            if (!args.IsPlayer && hitObject.GetBodyType() == BodyType.Static) return;

            var angles = new float[] { MathExtension.ToRadians(35), MathExtension.ToRadians(70) };
            var angle = MathExtension.NormalizeAngle(ScriptHelper.GetAngle(Instance.Direction));
            if (angle > MathHelper.PIOver2 && angle <= MathExtension.PI_3Over2)
                angles = ScriptHelper.Flip(angles, FlipDirection.Horizontal);

            var position = Instance.Position;
            var pushDirection = Instance.Direction;
            var upDirection = RandomHelper.Direction(angles[0], angles[1], true);
            var modifiers = GetForceModifier();
            var velocity = hitObject.GetLinearVelocity();

            if (args.IsPlayer)
            {
                velocity += Instance.Direction * 4 + upDirection * 14 * modifiers;
                if (velocity.Length() >= 15)
                    velocity -= Vector2.Normalize(velocity) * (velocity.Length() - 15);
                hitObject.SetLinearVelocity(velocity);
            }
            else
            {
                var mass = hitObject.GetMass();
                var magnitude = MathHelper.Clamp(1f / mass / 7f, 3, 30) * modifiers;
                velocity += Instance.Direction * magnitude + upDirection * magnitude / 10;
                hitObject.SetLinearVelocity(velocity);
                //ScriptHelper.LogDebug(hitObject.Name, mass, magnitude);
            }

            if (Game.IsEditorTest)
            {
                ScriptHelper.RunIn(() =>
                {
                    if (args.IsPlayer)
                        Game.DrawText(modifiers.ToString(), position);
                    Game.DrawLine(position, position + pushDirection * 3);
                    Game.DrawLine(position, position + upDirection * 3, Color.Yellow);
                    Game.DrawLine(position, position + velocity, Color.Green);
                }, 2000);
            }
        }

        private float GetForceModifier()
        {
            // (0,1.25) (70,1) (140, 0.75)
            var ammoModifier = IsShotgunShell ? .3f : 1f;
            var modifier = ammoModifier * (1.25f - 0.00357143f * Instance.TotalDistanceTraveled);
            return Math.Max(modifier, ammoModifier * .5f);
        }
    }
    class CustomProjectile : ProjectileBase
    {
        public IObject Instance { get; private set; }
        public override int ID { get { return Instance.UniqueID; } }
        public override bool IsRemoved
        {
            get { return Instance == null ? true : Instance.IsRemoved; }
            protected set { }
        }

        private Vector2 m_createPosition;
        public float TotalDistanceTraveled { get; private set; }

        public CustomProjectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup)
        {
            Instance = OnProjectileCreated(projectile);
            if (Instance == null) Powerup = RangedWeaponPowerup.None;

            m_createPosition = Instance.GetWorldPosition();
            TotalDistanceTraveled = 0f;
            IsCustomProjectile = true;
        }

        protected static IObject CreateCustomProjectile(IProjectile projectile, string objectID)
        {
            return CreateCustomProjectile(projectile, objectID, projectile.Velocity / 50 + Vector2.UnitY * 3);
        }
        protected static IObject CreateCustomProjectile(IProjectile projectile, string objectID, Vector2 velocity)
        {
            var customBullet = Game.CreateObject(objectID);
            var length = Math.Max(customBullet.GetAABB().Width, customBullet.GetAABB().Height);

            customBullet.SetWorldPosition(projectile.Position + projectile.Direction * (length + 1));
            customBullet.SetLinearVelocity(velocity);
            customBullet.SetFaceDirection(Math.Sign(projectile.Direction.X));
            customBullet.TrackAsMissile(true);

            projectile.FlagForRemoval();

            return customBullet;
        }

        protected virtual IObject OnProjectileCreated(IProjectile projectile) { return null; }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);
            TotalDistanceTraveled = Vector2.Distance(Instance.GetWorldPosition(), m_createPosition);
        }
    }
    class DoubleTroubleProjectile : Projectile
    {
        public DoubleTroubleProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.DoubleTrouble)
        {
        }

        public override bool IsRemoved { get { return true; } }

        protected override bool OnProjectileCreated()
        {
            var owner = Game.GetPlayer(Instance.InitialOwnerPlayerID);
            Vector2 position;
            Vector2 direction;

            if (owner.GetWeaponMuzzleInfo(out position, out direction))
            {
                var secondProjDirection = Vector2.Negate(Instance.Direction);
                var start = position;
                var end = position + secondProjDirection * 20;
                var results = Game.RayCast(end, start, new RayCastInput()
                {
                    FilterOnMaskBits = true,
                    MaskBits = CategoryBits.Player,
                    IncludeOverlap = true,
                });

                foreach (var r in results)
                {
                    if (r.HitObject.UniqueID == owner.UniqueID)
                    {
                        var spawnPosition = r.Position + secondProjDirection * 1f;
                        var projectileItem = Instance.ProjectileItem;
                        var powerup = ScriptHelper.GetPowerup(Instance);

                        // TODO: make a bug report and hope gurt will fix it
                        ScriptHelper.Timeout(() =>
                        {
                            Game.SpawnProjectile(projectileItem, spawnPosition, secondProjDirection, powerup);
                        }, 0);

                        if (Game.IsEditorTest)
                        {
                            ScriptHelper.RunIn(() =>
                            {
                                Game.DrawLine(start, end);
                                Game.DrawArea(owner.GetAABB(), Color.Red);
                                Game.DrawCircle(spawnPosition, .5f, Color.Green);
                            }, 1500);
                        }
                        break;
                    }
                }
            }

            return true;
        }
    }
    class FatigueProjectile : Projectile
    {
        public FatigueProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Fatigue)
        {
        }
    }
    class GravityGun : RangeWpn
    {
        private static readonly Vector2 FarAwayPosition = Game.GetCameraMaxArea().BottomLeft - Vector2.UnitX * 10;

        public GravityGun(IPlayer owner, WeaponItem name, RangedWeaponPowerup powerup) : base(owner, name, powerup)
        {
            if (powerup == RangedWeaponPowerup.GravityDE)
                IsSupercharged = true;
            else if (powerup == RangedWeaponPowerup.Gravity)
                IsSupercharged = false;
            else
                throw new Exception("Unknown powerup for gravity gun: " + powerup);

            m_invisibleMagnet = Game.CreateObject("InvisibleBlockSmall");
            m_invisibleMagnet.SetBodyType(BodyType.Static);
            var farBg = Game.CreateObject("FarBgBlimp00");
            m_invisibleMagnet.SetCollisionFilter(farBg.GetCollisionFilter());
            m_invisibleMagnet.SetWorldPosition(FarAwayPosition);

            m_magnetJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint");
            m_magnetJoint.SetTargetObject(m_invisibleMagnet);

            m_pullJoint = CreatePullJointObject();
        }

        public static readonly float Range = 160;

        public bool IsSupercharged { get; private set; }
        public Area GetStabilizedZone()
        {
            return GetStabilizedZone(GetHoldPosition(true));
        }
        private Area GetStabilizedZone(Vector2 holdPosition)
        {
            return ScriptHelper.GrowFromCenter(holdPosition, 20);
        }

        private IObject m_invisibleMagnet;
        private IObjectTargetObjectJoint m_magnetJoint;

        private IObjectPullJoint m_pullJoint;

        private IObject m_distanceJointObject;
        private IObjectDistanceJoint m_distanceJoint;
        private IObjectTargetObjectJoint m_targetedObjectJoint;

        private IObject m_releasedObject;
        public IObject TargetedObject { get; private set; }

        public bool IsTargetedObjectStabilized { get; private set; }

        public Vector2 GetHoldPosition(bool useOffset)
        {
            var offset = 0f;

            if (TargetedObject != null && useOffset)
            {
                var hitbox = TargetedObject.GetAABB();
                var length = Math.Max(hitbox.Width, hitbox.Height);
                offset = length / 2f;
            }

            Vector2 position;
            Vector2 direction;
            Owner.GetWeaponMuzzleInfo(out position, out direction);

            return position + direction * (6 + offset);
        }

        private Vector2[] GetScanLine()
        {
            var holdPosition = GetHoldPosition(false);
            var end = holdPosition + Owner.AimVector * Range;

            return new Vector2[] { holdPosition, end };
        }

        public override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (Owner.IsManualAiming)
            {
                var holdPosition = GetHoldPosition(true);
                m_invisibleMagnet.SetWorldPosition(holdPosition);
                // m_invisibleMagnet is a static object so the corresponding TargetObjectJoint need to be moved manually too
                m_magnetJoint.SetWorldPosition(holdPosition);

                if (TargetedObject != null)
                {
                    TryStabilizeTargetedObject(holdPosition);
                }

                if (Game.IsEditorTest)
                {
                    var scanLine = GetScanLine();

                    Game.DrawLine(scanLine[0], scanLine[1]);
                    Game.DrawCircle(holdPosition, .5f, Color.Red);

                    //Game.DrawCircle(position, .5f, Color.Blue);
                    //Game.DrawLine(position, position + direction * 6, Color.Yellow);
                    //Game.DrawArea(m_pullJoint.GetAABB(), Color.Cyan);
                    //Game.DrawArea(m_magnetJoint.GetAABB(), Color.Magenta);

                    if (TargetedObject != null)
                        Game.DrawArea(TargetedObject.GetAABB(), Color.Blue);

                    //if (m_distanceJointObject != null)
                    //    Game.DrawArea(m_distanceJointObject.GetAABB(), Color.Green);

                    var to = m_pullJoint.GetTargetObject();
                    if (to != null)
                        Game.DrawArea(to.GetAABB(), Color.Yellow);
                }
            }
            else
            {
                if (IsTargetedObjectStabilized || TargetedObject != null)
                {
                    StopStabilizingTargetedObject();

                    m_invisibleMagnet.SetWorldPosition(FarAwayPosition);
                    m_magnetJoint.SetWorldPosition(FarAwayPosition);
                }
            }
        }

        private void TryStabilizeTargetedObject(Vector2 holdPosition)
        {
            var results = RayCastTargetedObject(false);
            var stabilizedZone = GetStabilizedZone(holdPosition);

            Game.DrawArea(stabilizedZone, Color.Green);

            var targetedObjectFound = false;
            var targetHitbox = TargetedObject.GetAABB();

            if (stabilizedZone.Intersects(targetHitbox))
                targetedObjectFound = true;

            foreach (var result in results)
            {
                if (result.HitObject == null) continue;

                if (result.HitObject.UniqueID == TargetedObject.UniqueID)
                {
                    targetedObjectFound = true;

                    if (stabilizedZone.Intersects(targetHitbox))
                    {
                        if (!IsTargetedObjectStabilized)
                        {
                            StabilizeTargetedObject();
                            IsTargetedObjectStabilized = true;
                        }
                    }
                    break;
                }
            }

            if (!targetedObjectFound)
            {
                StopStabilizingTargetedObject();
            }
            else
            {
                var player = ScriptHelper.CastPlayer(TargetedObject);
                if (player != null && !player.IsStaggering)
                {
                    // Not sure why StaggerInfinite is not infinite!
                    player.AddCommand(new PlayerCommand(PlayerCommandType.StaggerInfinite));
                }
            }
        }

        private void StopStabilizingTargetedObject()
        {
            if (m_distanceJointObject != null)
            {
                m_distanceJointObject.Remove();
                m_distanceJoint.Remove();
                m_targetedObjectJoint.Remove();
            }

            var player = ScriptHelper.CastPlayer(TargetedObject);
            if (player != null)
            {
                player.AddCommand(new PlayerCommand(PlayerCommandType.StopStagger));
                player.SetInputEnabled(true);
            }

            m_pullJoint.SetTargetObject(null);

            if (TargetedObject != null)
            {
                if (Owner.IsBot)
                    TargetedObject.SetCollisionFilter(m_oldCollisionFilter);
                if (TargetedObject.GetCollisionFilter().CategoryBits == CategoryBits.DynamicG2)
                    TargetedObject.TrackAsMissile(true); // must be called after updating CollisionFilter
                TargetedObject.SetMass(m_oldMass);
                TargetedObject = null;
            }
            IsTargetedObjectStabilized = false;
        }

        private void StabilizeTargetedObject()
        {
            TargetedObject.SetLinearVelocity(Vector2.Zero);

            m_distanceJointObject = Game.CreateObject("InvisibleBlockSmall");
            m_distanceJointObject.SetBodyType(BodyType.Dynamic);

            m_distanceJoint = (IObjectDistanceJoint)Game.CreateObject("DistanceJoint");
            m_distanceJoint.SetLineVisual(LineVisual.None);
            m_distanceJoint.SetLengthType(DistanceJointLengthType.Fixed);

            m_targetedObjectJoint = (IObjectTargetObjectJoint)Game.CreateObject("TargetObjectJoint");

            var targetedObjPosition = TargetedObject.GetAABB().Center;
            m_distanceJointObject.SetWorldPosition(targetedObjPosition);
            TargetedObject.SetWorldPosition(targetedObjPosition);
            m_pullJoint.SetWorldPosition(targetedObjPosition);
            m_distanceJoint.SetWorldPosition(targetedObjPosition);
            // if DistanceJoint and TargetObjectJoint is at the same position, weird things may happen
            // uncomment the part below to stop it
            m_targetedObjectJoint.SetWorldPosition(m_distanceJointObject.GetWorldPosition()/* - Vector2.UnitY*/);

            m_pullJoint.SetTargetObject(m_distanceJointObject);
            m_distanceJoint.SetTargetObject(m_distanceJointObject);
            m_distanceJoint.SetTargetObjectJoint(m_targetedObjectJoint);
            m_targetedObjectJoint.SetTargetObject(TargetedObject);
            m_pullJoint.SetForce(15);

            IsTargetedObjectStabilized = true;
        }

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            if (!Owner.IsManualAiming)
                return;

            foreach (var keyInfo in keyInfos)
            {
                if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT)
                {
                    PickupObject();
                }
            }
        }

        public override void OnProjectileCreated(IProjectile projectile)
        {
            // Remove projectile completely since gravity gun only use objects laying around the map as ammunation
            projectile.FlagForRemoval();

            // Cannot use ia 1 because we only want this particular gun to have indefinite ammo
            if (BotManager.GetBot(Owner).CurrentAmmo == 0)
            {
                if (Type == WeaponItemType.Rifle)
                    Owner.SetCurrentPrimaryWeaponAmmo(Owner.CurrentPrimaryWeapon.MaxTotalAmmo - 1);
                if (Type == WeaponItemType.Handgun)
                    Owner.SetCurrentSecondaryWeaponAmmo(Owner.CurrentSecondaryWeapon.MaxTotalAmmo - 1);
            }

            Release();
        }

        // List of objects that are in dynamic collision group but not really interact with other dynamic objects (try for yourself)
        public static readonly HashSet<string> Blacklist = new HashSet<string>()
        {
            "Lamp00",
        };
        private IEnumerable<RayCastResult> RayCastTargetedObject(bool isSearching)
        {
            var scanLine = GetScanLine();
            var rcInput = new RayCastInput()
            {
                FilterOnMaskBits = true,
                MaskBits = (ushort)(IsSupercharged ? CategoryBits.Dynamic + CategoryBits.Player : CategoryBits.Dynamic),
                ClosestHitOnly = isSearching,
            };
            var results = Game.RayCast(scanLine[0], scanLine[1], rcInput);

            foreach (var result in results)
            {
                if (result.HitObject == null || Blacklist.Contains(result.HitObject.Name))
                    continue;

                yield return result;

                if (isSearching) break;
            }
        }

        private IObjectPullJoint CreatePullJointObject()
        {
            var pullJoint = (IObjectPullJoint)Game.CreateObject("PullJoint");

            if (TargetedObject != null)
            {
                TargetedObject.SetMass(.004f);
                pullJoint.SetWorldPosition(TargetedObject.GetWorldPosition());
                pullJoint.SetForce(ScriptHelper.IsPlayer(TargetedObject) ? 15 : 4); // IPlayer doesn't have mass, maybe a bit heavier than normal
                pullJoint.SetForcePerDistance(0);
            }

            pullJoint.SetTargetObject(TargetedObject);
            pullJoint.SetTargetObjectJoint(m_magnetJoint);

            return pullJoint;
        }

        private void MakePlayer(IPlayer player, PlayerCommandType CommandType)
        {
            var faceDirection = player.GetWorldPosition().X > GetHoldPosition(false).X
                ? PlayerCommandFaceDirection.Right : PlayerCommandFaceDirection.Left;
            player.SetInputEnabled(false);
            // some command like Stagger not working without this line
            player.AddCommand(new PlayerCommand(PlayerCommandType.FaceAt, faceDirection));
            ScriptHelper.Timeout(() => player.AddCommand(new PlayerCommand(CommandType)), 2);
        }

        private CollisionFilter m_oldCollisionFilter;
        private float m_oldMass;
        public bool PickupObject()
        {
            if (TargetedObject == null)
            {
                var results = RayCastTargetedObject(true);

                if (results.Count() > 0)
                {
                    var result = results.First();
                    TargetedObject = result.HitObject;
                    m_oldMass = TargetedObject.GetMass();

                    // if is player, make them staggering
                    if (result.IsPlayer)
                    {
                        var player = (IPlayer)TargetedObject;
                        MakePlayer(player, PlayerCommandType.StaggerInfinite);
                    }

                    // destroy Joints so hanging stuff can be pulled
                    ScriptHelper.Unscrew(TargetedObject);

                    // some objects that are in dynamic collision group but is static (SurveillanceCamera)
                    if (TargetedObject.GetBodyType() == BodyType.Static)
                        TargetedObject.SetBodyType(BodyType.Dynamic);

                    // m_targetObjectJoint.Position is fucked up if key input event fires. idk why
                    m_magnetJoint.SetWorldPosition(GetHoldPosition(true));
                    m_pullJoint.Remove();
                    m_pullJoint = CreatePullJointObject();

                    // The AI when using GravityGun is not very good so I give the bots a little edge advantage
                    if (Owner.IsBot)
                    {
                        m_oldCollisionFilter = TargetedObject.GetCollisionFilter();
                        var noStaticCollision = TargetedObject.GetCollisionFilter();
                        // https://www.mythologicinteractiveforums.com/viewtopic.php?t=1012
                        noStaticCollision.CategoryBits = 0x1010; // marker or something
                        noStaticCollision.MaskBits = (ushort)(noStaticCollision.MaskBits & 0x11);
                        TargetedObject.SetCollisionFilter(noStaticCollision);
                    }
                    return true;
                }
            }
            return false;
        }

        public override void Remove()
        {
            base.Remove();
            StopStabilizingTargetedObject();
        }

        private bool m_stopPlayingReleaseEffect = false;
        private void Release()
        {
            if (TargetedObject == null)
            {
                var results = RayCastTargetedObject(true);
                if (results.Count() > 0)
                {
                    var result = results.First();
                    TargetedObject = result.HitObject;
                    if (result.IsPlayer) MakePlayer((IPlayer)result.HitObject, PlayerCommandType.Fall);
                }
            }

            if (TargetedObject != null)
            {
                var velocity = Owner.AimVector * 40;

                TargetedObject.SetLinearVelocity(velocity);

                // PS: I dont like the effects, uncomment if you want to see it
                //m_releasedObject = m_targetedObject;
                //m_stopPlayingReleaseEffect = true;
                //ScriptHelper.RunIn(() =>
                //{
                //    if (m_releasedObject.IsRemoved) return;

                //    Game.PlayEffect(EffectName.BulletSlowmoTrace, m_releasedObject.GetWorldPosition());
                //    for (var i = 0; i < 1; i++)
                //    {
                //        var effectPosition = ScriptHelerp.WithinArea(m_releasedObject.GetAABB());
                //        Game.PlayEffect(EffectName.ItemGleam, effectPosition);
                //    }
                //}, 1);

                StopStabilizingTargetedObject();
            }
        }
    }
    /// <summary>
    /// Credit to DangerRoss for the original idea and most of the code here
    /// </summary>
    class HomingProjectile : Projectile
    {
        public readonly PlayerTeam Team;
        public IPlayer Target { get; private set; }

        public HomingProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Homing)
        {
            // in case the original player is not available when the projectile hits
            Team = Game.GetPlayer(Instance.InitialOwnerPlayerID).GetTeam();
            //if (Game.IsEditorTest) Instance.Velocity /= 20;
        }

        private float m_updateDelay = 0f;
        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (ScriptHelper.IsElapsed(m_updateDelay, 75))
            {
                m_updateDelay = Game.TotalElapsedGameTime;
                SearchTarget();
            }
            if (Target != null) Game.DrawArea(Target.GetAABB());

            Guide();
        }

        private void Guide()
        {
            if (Target == null) return;

            var projectileAngle = ScriptHelper.GetAngle(Instance.Direction);
            var targetAngle = ScriptHelper.GetAngle(Target.GetWorldPosition() - Instance.Position);
            var steerAngle = Math.Sign(MathExtension.DiffAngle(targetAngle, projectileAngle)) * MathExtension.OneDeg * 10;

            Instance.Direction = ScriptHelper.GetDirection(projectileAngle + steerAngle);
        }

        private void SearchTarget()
        {
            var minDistanceToPlayer = float.MaxValue;

            foreach (var player in Game.GetPlayers())
            {
                var playerTeam = player.GetTeam();

                if (Team == playerTeam && Team != PlayerTeam.Independent
                    || Instance.InitialOwnerPlayerID == player.UniqueID
                    || player.IsDead)
                    continue;

                var distanceToPlayer = Vector2.Distance(Instance.Position, player.GetWorldPosition());
                if (minDistanceToPlayer > distanceToPlayer)
                {
                    minDistanceToPlayer = distanceToPlayer;
                    Target = player;
                }
            }
        }
    }
    class HoveringProjectile : Projectile
    {
        protected Vector2 HoverPosition;
        protected float ExplodeRange = 60;
        protected float ExplodeRange2 = 10;

        private enum Direction
        {
            Left,
            Top,
            Right,
            Bottom,
        }

        protected enum State
        {
            Normal,
            Hovering,
            Destroyed,
        }
        protected State CurrentState { get; private set; }

        public override bool IsRemoved { get { return CurrentState == State.Destroyed; } }

        public HoveringProjectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup)
        {
            CurrentState = State.Normal;
        }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            switch (CurrentState)
            {
                case State.Normal:
                {
                    if (CanHover()) Hover();
                    break;
                }
                case State.Hovering:
                {
                    Instance.Position = HoverPosition;
                    Instance.Velocity = new Vector2(0, 100);
                    Instance.Direction = Vector2.Zero;
                    UpdateHovering(elapsed);
                    break;
                }
                case State.Destroyed:
                    break;
            }
        }

        protected virtual void UpdateHovering(float elapsed) { }

        protected void Hover()
        {
            if (Instance.IsRemoved) return;

            CurrentState = State.Hovering;
            HoverPosition = Instance.Position;
            Instance.Velocity = new Vector2(0, 100);
            Instance.Direction = Vector2.Zero;
            OnHover();
        }

        protected virtual void OnHover() { }

        protected virtual void Destroy()
        {
            CurrentState = State.Destroyed;
            Instance.FlagForRemoval();
        }

        private Direction GetHeadingDirection(float angle)
        {
            angle = MathExtension.NormalizeAngle(angle);

            if (angle >= 0 && angle < MathHelper.PIOver4 || angle >= MathExtension.PI_3Over2 && angle <= MathExtension.PIOver2)
                return Direction.Right;
            if (angle >= MathHelper.PIOver4 && angle < MathHelper.PIOver2 + MathHelper.PIOver4)
                return Direction.Top;
            if (angle >= MathHelper.PIOver2 + MathHelper.PIOver4 && angle < MathHelper.PI + MathHelper.PIOver4)
                return Direction.Left;
            return Direction.Bottom;
        }

        private bool CanHover()
        {
            var headingDirection = GetHeadingDirection(ScriptHelper.GetAngle(Instance.Direction));
            var explodeRange = ScriptHelper.GrowFromCenter(Instance.Position,
                headingDirection == Direction.Left ? ExplodeRange : ExplodeRange2,
                headingDirection == Direction.Top ? ExplodeRange : ExplodeRange2,
                headingDirection == Direction.Right ? ExplodeRange : ExplodeRange2,
                headingDirection == Direction.Bottom ? ExplodeRange : ExplodeRange2);
            var os = Game.GetObjectsByArea(explodeRange, PhysicsLayer.Active);

            foreach (var o in os)
            {
                var collisionFilter = o.GetCollisionFilter();
                if ((collisionFilter.BlockExplosions || collisionFilter.CategoryBits == CategoryBits.Player)
                    && Instance.TotalDistanceTraveled >= 100)
                {
                    if (Game.IsEditorTest)
                    {
                        var position = Instance.Position;
                        ScriptHelper.RunIn(() =>
                        {
                            Game.DrawCircle(position, .5f, Color.Red);
                            Game.DrawLine(position, o.GetWorldPosition(), Color.Yellow);
                            Game.DrawArea(o.GetAABB(), Color.Yellow);
                            Game.DrawText(o.Name + " " + headingDirection, position);
                            Game.DrawArea(explodeRange);
                        }, 2000);
                    }
                    return true;
                }
            }

            return false;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            // in case bouncing ammo hit multiple times
            if (CurrentState == State.Normal && args.RemoveFlag)
                Hover();
        }
    }
    enum MeleeWeaponPowerup
    {
        None,
    }
    // Placeholder for now
    class MeleeWpn : Wpn
    {
        public MeleeWeaponPowerup Powerup { get; protected set; }

        public MeleeWpn(IPlayer owner) : base(owner)
        {
            Powerup = MeleeWeaponPowerup.None;
        }

        public void Add(WeaponItem name, MeleeWeaponPowerup powerup)
        {
            Name = name;
            Type = Mapper.GetWeaponItemType(name);
            Powerup = powerup;
        }

        public override void Remove()
        {
            base.Remove();
            Powerup = MeleeWeaponPowerup.None;
        }
    }
    class PlayerWeapon
    {
        public IPlayer Owner { get; private set; }
        public MeleeWpn Melee;
        public RangeWpn Primary { get; set; }
        public RangeWpn Secondary { get; set; }

        public RangeWpn Throwable { get; set; }
        public Wpn Powerup { get; set; }

        public RangeWpn CurrentRangeWeapon
        {
            get
            {
                switch (Owner.CurrentWeaponDrawn)
                {
                    case WeaponItemType.Rifle:
                        return Primary;
                    case WeaponItemType.Handgun:
                        return Secondary;
                    case WeaponItemType.Thrown:
                        return Throwable;
                    default:
                        return null;
                }
            }
        }

        public static PlayerWeapon Empty(IPlayer owner)
        {
            return new PlayerWeapon()
            {
                Owner = owner,
                Melee = new MeleeWpn(owner),
                Primary = new RangeWpn(owner),
                Secondary = new RangeWpn(owner),
                Throwable = new RangeWpn(owner),
                Powerup = new Wpn(owner),
            };
        }
    }
    class PresentBullet : CustomProjectile
    {
        private static readonly List<string> m_presents = new List<string>()
        {
            "XmasPresent00",
            "WpnPistol",
            "WpnPistol45",
            "WpnSilencedPistol",
            "WpnMachinePistol",
            "WpnMagnum",
            "WpnRevolver",
            "WpnPumpShotgun",
            "WpnDarkShotgun",
            "WpnTommygun",
            "WpnSMG",
            "WpnM60",
            "WpnPipeWrench",
            "WpnChain",
            "WpnWhip",
            "WpnHammer",
            "WpnKatana",
            "WpnMachete",
            "WpnChainsaw",
            "WpnKnife",
            "WpnSawedoff",
            "WpnBat",
            "WpnBaton",
            "WpnShockBaton",
            "WpnLeadPipe",
            "WpnUzi",
            "WpnSilencedUzi",
            "WpnBazooka",
            "WpnAxe",
            "WpnAssaultRifle",
            "WpnMP50",
            "WpnSniperRifle",
            "WpnCarbine",
            "WpnFlamethrower",
            "ItemPills",
            "ItemMedkit",
            "ItemSlomo5",
            "ItemSlomo10",
            "ItemStrengthBoost",
            "ItemSpeedBoost",
            "ItemLaserSight",
            "ItemBouncingAmmo",
            "ItemFireAmmo",
            "WpnGrenades",
            "WpnMolotovs",
            "WpnMines",
            "WpnShuriken",
            "WpnBow",
            "WpnFlareGun",
            "WpnGrenadeLauncher",
        };
        private static readonly List<string> m_oofs = new List<string>()
        {
            "WpnGrenadesThrown",
            "WpnMolotovsThrown",
            "WpnMineThrown",
        };

        public PresentBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Present) { }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            switch (projectile.ProjectileItem)
            {
                case ProjectileItem.BAZOOKA:
                case ProjectileItem.GRENADE_LAUNCHER:
                    return null;
                default:
                    return CreateCustomProjectile(projectile, "XmasPresent00");
            }
        }

        public override void OnProjectileHit()
        {
            var position = Instance.GetWorldPosition();

            // normally, the present spawn some random shits upon destroyed. make the present disappeared
            // and spawn something else as a workaround
            Instance.SetWorldPosition(new Vector2(-1000, 1000));
            Game.PlayEffect(EffectName.DestroyCloth, position);

            var rndNum = RandomHelper.Between(0, 100);
            if (rndNum < 1) // big oof
            {
                var player = Game.CreatePlayer(position);
                var owner = Game.GetPlayer(OwnerID);
                var bot = BotManager.SpawnBot(BotType.Santa, player: player,
                    team: owner != null ? owner.GetTeam() : PlayerTeam.Independent,
                    triggerOnSpawn: false);

                bot.Info.SpawnLine = "Surprise motherfucker!";
                BotManager.TriggerOnSpawn(bot);
            }
            if (1 <= rndNum && rndNum < 5)
            {
                Game.CreateObject(RandomHelper.GetItem(m_oofs), position);
            }
            if (5 <= rndNum && rndNum < 30)
            {
                Game.CreateObject(RandomHelper.GetItem(m_presents), position);
            }
        }
    }
    class Projectile : ProjectileBase
    {
        public readonly IProjectile Instance;
        public override int ID { get { return Instance.InstanceID; } }
        public override bool IsRemoved
        {
            get { return Instance.IsRemoved; }
            protected set { }
        }

        public Projectile(IProjectile projectile, RangedWeaponPowerup powerup) : base(projectile, powerup)
        {
            Instance = projectile;

            if (!OnProjectileCreated())
            {
                Powerup = RangedWeaponPowerup.None;
            }

            IsCustomProjectile = false;
        }

        protected virtual bool OnProjectileCreated() { return true; }

        public bool IsShotgunShell
        {
            get
            {
                return Instance.ProjectileItem == ProjectileItem.SHOTGUN
                    || Instance.ProjectileItem == ProjectileItem.DARK_SHOTGUN
                    || Instance.ProjectileItem == ProjectileItem.SAWED_OFF;
            }
        }

        public bool IsExplosiveProjectile
        {
            get
            {
                // TODO: test Flak Cannon
                return Instance.ProjectileItem == ProjectileItem.BAZOOKA
                    || Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER;
            }
        }

        public int ProjectilesPerShell
        {
            get
            {
                if (Instance == null) return 0;

                switch (Instance.ProjectileItem)
                {
                    case ProjectileItem.SHOTGUN:
                        return 6;
                    case ProjectileItem.DARK_SHOTGUN:
                        return 8;
                    case ProjectileItem.SAWED_OFF:
                        return 6;
                    case ProjectileItem.NONE:
                        return 0;
                    default:
                        return 1;
                }
            }
        }
    }
    abstract class ProjectileBase
    {
        public abstract int ID { get; }
        public int OwnerID { get; private set; }
        public abstract bool IsRemoved { get; protected set; }
        public RangedWeaponPowerup Powerup { get; protected set; }
        public bool IsCustomProjectile { get; protected set; }
        protected float UpdateDelay { get; set; }

        public ProjectileBase(IProjectile projectile, RangedWeaponPowerup powerup)
        {
            OwnerID = projectile.InitialOwnerPlayerID;
            Powerup = powerup;
            UpdateDelay = 0f;
        }

        private float m_updateTime = 0f;
        public void OnUpdate(float elapsed)
        {
            if (ScriptHelper.IsElapsed(m_updateTime, UpdateDelay))
            {
                m_updateTime = Game.TotalElapsedGameTime;
                Update(elapsed);
            }
        }
        protected virtual void Update(float elapsed) { }

        public virtual void OnProjectileHit() { }
        public virtual void OnProjectileHit(ProjectileHitArgs args) { }
    }
    class ProjectileFactory
    {
        public static ProjectileBase Create(IProjectile projectile, RangedWeaponPowerup powerup)
        {
            switch (powerup)
            {
                case RangedWeaponPowerup.Blackhole:
                    return new BlackholeProjectile(projectile);
                case RangedWeaponPowerup.Blast:
                    return new BlastBullet(projectile);
                case RangedWeaponPowerup.DoubleTrouble:
                    return new DoubleTroubleProjectile(projectile);
                case RangedWeaponPowerup.Homing:
                    return new HomingProjectile(projectile);
                case RangedWeaponPowerup.Present:
                    return new PresentBullet(projectile);
                case RangedWeaponPowerup.Spinner:
                    return new SpinnerBullet(projectile);
                case RangedWeaponPowerup.StickyBomb:
                    return new StickyBombProjectile(projectile);
                case RangedWeaponPowerup.Stun:
                    return new StunBullet(projectile);
                case RangedWeaponPowerup.Tearing:
                    return new TearingBullet(projectile);
                default:
                    return null;
            }
        }
    }
    class ProjectileManager
    {
        public class PowerupInfo
        {
            public RangedWeaponPowerup RangedPowerup = RangedWeaponPowerup.None;
            public MeleeWeaponPowerup MeleePowerup = MeleeWeaponPowerup.None;
            public bool HasPowerup
            {
                get { return RangedPowerup != RangedWeaponPowerup.None || MeleePowerup != MeleeWeaponPowerup.None; }
            }
        }
        private class WeaponInfo : PowerupInfo
        {
            public WeaponItem Weapon = WeaponItem.NONE;
        }
        private class WeaponObjectInfo : PowerupInfo
        {
            public IObjectWeaponItem Weapon = null;
        }

        private class Weapon
        {
            public Weapon(WeaponObjectInfo info) { WeaponInfo = info; }
            public WeaponObjectInfo WeaponInfo;
            public float EffectTime = 0f;
        }

        private static Dictionary<int, List<WeaponInfo>> m_queuedPowerups = new Dictionary<int, List<WeaponInfo>>();
        private static Dictionary<int, ProjectileBase> m_customProjectiles = new Dictionary<int, ProjectileBase>();
        private static Dictionary<int, ProjectileBase> m_projectiles = new Dictionary<int, ProjectileBase>();
        private static Dictionary<int, Weapon> m_weapons = new Dictionary<int, Weapon>();
        private static Dictionary<int, PlayerWeapon> m_owners = new Dictionary<int, PlayerWeapon>();

        public static void Initialize()
        {
            Events.UpdateCallback.Start(OnUpdate);
            Events.PlayerWeaponAddedActionCallback.Start(OnPlayerPickedUpWeapon);
            Events.PlayerWeaponRemovedActionCallback.Start(OnPlayerDroppedWeapon);
            Events.PlayerDeathCallback.Start(OnPlayerDeath);
            Events.PlayerKeyInputCallback.Start(OnPlayerKeyInput);
            Events.ProjectileCreatedCallback.Start(OnProjectileCreated);
            Events.ProjectileHitCallback.Start(OnProjectileHit);
            Events.ObjectTerminatedCallback.Start(OnObjectTerminated);

            //Events.UpdateCallback.Start((e) =>
            //{
            //    ScriptHelper.LogDebug(
            //        m_owners.Count,
            //        m_queuedPowerups.Count,
            //        m_projectiles.Count,
            //        m_customProjectiles.Count,
            //        m_weapons.Count);
            //}, 30, 0);
        }

        private static float m_lastUpdateTime = 0f;
        private static void OnUpdate(float _)
        {
            var elapsed = Game.TotalElapsedGameTime - m_lastUpdateTime;

            foreach (var item in m_weapons)
            {
                var weapon = item.Value;
                if (weapon.WeaponInfo.HasPowerup)
                {
                    PlayMoreShinyEffect(weapon, elapsed);
                }
            }

            var removeList = new List<int>();
            foreach (var kv in m_projectiles)
            {
                var projectile = kv.Value;
                projectile.OnUpdate(elapsed);
                if (projectile.IsRemoved)
                    removeList.Add(kv.Key); // Projectile.ID was already reset to 0 at this point
            }
            // Projectiles dont have OnProjectileTerminated like how IObjects have OnObjectTerminated
            // So when the projectiles go outside of the map and dont hit anything, it will be removed here
            foreach (var r in removeList)
                m_projectiles.Remove(r);

            foreach (var projectile in m_customProjectiles.Values)
            {
                projectile.OnUpdate(elapsed);
            }

            foreach (var o in m_owners)
            {
                var playerWpn = o.Value;
                var currentRangeWpn = playerWpn.CurrentRangeWeapon;

                if (currentRangeWpn != null)
                    currentRangeWpn.Update(elapsed);
            }

            m_lastUpdateTime = Game.TotalElapsedGameTime;
        }

        private static void OnPlayerDeath(IPlayer player, PlayerDeathArgs args)
        {
            if (args.Removed)
            {
                PlayerWeapon playerWpn;

                if (m_owners.TryGetValue(player.UniqueID, out playerWpn))
                {
                    playerWpn.Melee.Remove();
                    playerWpn.Primary.Remove();
                    playerWpn.Secondary.Remove();
                    playerWpn.Throwable.Remove();
                    playerWpn.Powerup.Remove();
                    m_owners.Remove(player.UniqueID);
                }

                if (m_queuedPowerups.ContainsKey(player.UniqueID))
                {
                    m_queuedPowerups.Remove(player.UniqueID);
                }
            }
        }

        private static void OnPlayerKeyInput(IPlayer player, VirtualKeyInfo[] keyInfos)
        {
            PlayerWeapon playerWpn;

            if (m_owners.TryGetValue(player.UniqueID, out playerWpn))
            {
                var currentRangeWpn = playerWpn.CurrentRangeWeapon;
                if (currentRangeWpn != null)
                    currentRangeWpn.OnPlayerKeyInput(keyInfos);
            }
        }

        private static void PlayMoreShinyEffect(Weapon weapon, float elapsed)
        {
            var weaponObject = weapon.WeaponInfo.Weapon;
            var hitBox = weaponObject.GetAABB();
            weapon.EffectTime += elapsed;

            if (weapon.EffectTime >= 400)
            {
                Game.PlayEffect(EffectName.ItemGleam, new Vector2()
                {
                    X = RandomHelper.Between(hitBox.Left, hitBox.Right),
                    Y = RandomHelper.Between(hitBox.Bottom, hitBox.Top),
                });
                weapon.EffectTime = 0f;
            }
        }

        public static PlayerWeapon GetOrCreatePlayerWeapon(IPlayer owner)
        {
            if (owner.UniqueID == 0) return null;

            PlayerWeapon playerWpn;
            if (!m_owners.TryGetValue(owner.UniqueID, out playerWpn))
            {
                playerWpn = PlayerWeapon.Empty(owner);
                m_owners.Add(owner.UniqueID, playerWpn);
            }
            return playerWpn;
        }

        public static PowerupInfo GetPowerupInfo(int weaponObjectID)
        {
            Weapon weapon;

            if (m_weapons.TryGetValue(weaponObjectID, out weapon))
            {
                return weapon.WeaponInfo;
            }
            return null;
        }

        internal static void SetPowerup(IPlayer player, WeaponItem weaponItem, RangedWeaponPowerup powerup)
        {
            if (!m_queuedPowerups.ContainsKey(player.UniqueID))
                m_queuedPowerups[player.UniqueID] = new List<WeaponInfo>();

            m_queuedPowerups[player.UniqueID].Add(new WeaponInfo
            {
                Weapon = weaponItem,
                RangedPowerup = powerup,
            });
            player.GiveWeaponItem(weaponItem);
        }

        internal static IObjectWeaponItem CreateWeapon(string objectID, MeleeWeaponPowerup powerup)
        {
            var weaponObject = (IObjectWeaponItem)Game.CreateObject(objectID);
            var newWeaponInfo = new WeaponObjectInfo()
            {
                Weapon = weaponObject,
                MeleePowerup = powerup,
            };
            m_weapons.Add(weaponObject.UniqueID, new Weapon(newWeaponInfo));
            return weaponObject;
        }

        internal static IObjectWeaponItem CreateWeapon(string objectID, RangedWeaponPowerup powerup)
        {
            var weaponObject = (IObjectWeaponItem)Game.CreateObject(objectID);
            var newWeaponInfo = new WeaponObjectInfo()
            {
                Weapon = weaponObject,
                RangedPowerup = powerup,
            };
            m_weapons.Add(weaponObject.UniqueID, new Weapon(newWeaponInfo));
            return weaponObject;
        }

        private static void OnPlayerDroppedWeapon(IPlayer player, PlayerWeaponRemovedArg arg)
        {
            // ID == 0 means no weapon was dropped. For example: Activating instant powerup will make it disappeared, not dropped
            if (arg.TargetObjectID == 0) return;

            // player argument may be a null object if the weapon drops right after the player was gibbed
            if (player.UniqueID == 0) return;

            // dropped weapons dont not always have IObjectWeaponItem type. For example thrown grenades have IObject type
            var weaponObject = Game.GetObject(arg.TargetObjectID) as IObjectWeaponItem;
            if (weaponObject == null) return;

            var oldPlayerWpn = GetOrCreatePlayerWeapon(player);
            var newWeaponInfo = new WeaponObjectInfo() { Weapon = weaponObject };

            switch (weaponObject.WeaponItemType)
            {
                case WeaponItemType.Melee:
                    newWeaponInfo.MeleePowerup = oldPlayerWpn.Melee.Powerup;
                    m_owners[player.UniqueID].Melee.Remove();
                    // TODO: add null object
                    break;
                case WeaponItemType.Rifle:
                    newWeaponInfo.RangedPowerup = oldPlayerWpn.Primary.Powerup;
                    m_owners[player.UniqueID].Primary.Remove();
                    m_owners[player.UniqueID].Primary = RangeWeaponFactory.Create(player, WeaponItem.NONE, RangedWeaponPowerup.None);
                    break;
                case WeaponItemType.Handgun:
                    newWeaponInfo.RangedPowerup = oldPlayerWpn.Secondary.Powerup;
                    m_owners[player.UniqueID].Secondary.Remove();
                    m_owners[player.UniqueID].Secondary = RangeWeaponFactory.Create(player, WeaponItem.NONE, RangedWeaponPowerup.None);
                    break;
                case WeaponItemType.Thrown:
                    newWeaponInfo.RangedPowerup = oldPlayerWpn.Throwable.Powerup;
                    m_owners[player.UniqueID].Throwable.Remove();
                    m_owners[player.UniqueID].Throwable = RangeWeaponFactory.Create(player, WeaponItem.NONE, RangedWeaponPowerup.None);
                    break;
            }

            m_weapons.Add(weaponObject.UniqueID, new Weapon(newWeaponInfo));
        }

        private static void OnPlayerPickedUpWeapon(IPlayer player, PlayerWeaponAddedArg arg)
        {
            if (!m_weapons.ContainsKey(arg.SourceObjectID) && !m_queuedPowerups.ContainsKey(player.UniqueID))
                return;

            GetOrCreatePlayerWeapon(player);

            // TODO: gibbed player doesn't fire OnPlayerDropped, so calling m_weapons.GetItem() will throw
            // wait for gurt to fix and remove this line:
            // https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=3999&p=23441#p23441
            if (arg.SourceObjectID != 0 && !m_weapons.ContainsKey(arg.SourceObjectID))
                return;

            var weaponInfo = arg.SourceObjectID == 0 ?
                (PowerupInfo)m_queuedPowerups[player.UniqueID].Where(wi => wi.Weapon == arg.WeaponItem).FirstOrDefault() :
                (PowerupInfo)m_weapons[arg.SourceObjectID].WeaponInfo;
            if (weaponInfo == null) return;

            var createRangedWeapon = new Func<RangeWpn>(
                () => RangeWeaponFactory.Create(player, arg.WeaponItem, weaponInfo.RangedPowerup));

            switch (arg.WeaponItemType)
            {
                case WeaponItemType.Melee:
                    // TODO: create power melee weapon with factory if implement one
                    m_owners[player.UniqueID].Melee.Add(arg.WeaponItem, weaponInfo.MeleePowerup);
                    break;
                case WeaponItemType.Rifle:
                    m_owners[player.UniqueID].Primary = createRangedWeapon();
                    break;
                case WeaponItemType.Handgun:
                    m_owners[player.UniqueID].Secondary = createRangedWeapon();
                    break;
                case WeaponItemType.Thrown:
                    m_owners[player.UniqueID].Throwable = createRangedWeapon();
                    break;
            }

            if (arg.SourceObjectID == 0)
                m_queuedPowerups[player.UniqueID].Remove((WeaponInfo)weaponInfo);
            else
                m_weapons.Remove(arg.SourceObjectID);
        }

        private static void OnProjectileCreated(IProjectile[] projectiles)
        {
            foreach (var projectile in projectiles)
            {
                var ownerID = projectile.InitialOwnerPlayerID;

                // Projectile is not fired from IPlayer, custom weapon with custom powerup is not supported
                if (ownerID == 0) continue;

                var owner = Game.GetPlayer(ownerID);
                var playerWpn = GetOrCreatePlayerWeapon(owner);
                var powerup = RangedWeaponPowerup.None;
                var weaponItem = Mapper.GetWeaponItem(projectile.ProjectileItem);

                if (weaponItem == playerWpn.Primary.Name)
                    powerup = playerWpn.Primary.Powerup;
                if (weaponItem == playerWpn.Secondary.Name)
                    powerup = playerWpn.Secondary.Powerup;

                if (powerup != RangedWeaponPowerup.None)
                {
                    var proj = ProjectileFactory.Create(projectile, powerup);
                    if (proj != null && proj.Powerup != RangedWeaponPowerup.None)
                    {
                        if (proj.IsCustomProjectile)
                            m_customProjectiles.Add(proj.ID, proj);
                        else
                            m_projectiles.Add(proj.ID, proj);
                    }

                    var currentRangeWpn = playerWpn.CurrentRangeWeapon;
                    if (currentRangeWpn != null)
                        playerWpn.CurrentRangeWeapon.OnProjectileCreated(projectile);
                }
            }
        }

        private static void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            if (m_projectiles.ContainsKey(projectile.InstanceID))
            {
                var ownerID = projectile.InitialOwnerPlayerID;

                // Projectile is not fired from IPlayer, custom weapon with custom powerup is not supported
                if (ownerID == 0) return;

                var owner = Game.GetPlayer(ownerID);
                var playerWpn = GetOrCreatePlayerWeapon(owner);
                var proj = m_projectiles[projectile.InstanceID];

                proj.OnProjectileHit(args);

                var currentRangeWpn = playerWpn.CurrentRangeWeapon;
                if (currentRangeWpn != null)
                    playerWpn.CurrentRangeWeapon.OnProjectileHit(projectile, args);

                // NOTE: the reason I dont remove projectile when RemoveFlag = true is because some projectiles
                // like Spinner have longer lifecycle than the original projectile itself
            }
        }

        private static void OnObjectTerminated(IObject[] objs)
        {
            foreach (var obj in objs)
            {
                if (m_customProjectiles.ContainsKey(obj.UniqueID))
                {
                    var proj = m_customProjectiles[obj.UniqueID];

                    // TODO: wrong place to call this
                    proj.OnProjectileHit();
                    m_customProjectiles.Remove(obj.UniqueID);
                }

                var uniqueID = obj.UniqueID;

                // wait and see if the picked-up callback fires and removes first. this callback should only remove m_weapons here
                // if it's despawned
                // because picked-up callback is fired at the end of the update, removing the object now will lead to null
                // exception later on in the picked-up callback
                ScriptHelper.Timeout(() =>
                {
                    if (m_weapons.ContainsKey(uniqueID))
                    {
                        m_weapons.Remove(uniqueID);
                    }
                }, 0);
            }
        }
    }
    public enum RangedWeaponPowerup
    {
        None,
        Blackhole,
        Blast,
        DoubleTrouble,
        Fatigue,
        Homing,
        Gravity,
        GravityDE,
        Present,
        Stun,
        Spinner,
        StickyBomb,
        Tearing,
    }
    static class RangeWeaponFactory
    {
        public static RangeWpn Create(IPlayer owner, WeaponItem name, RangedWeaponPowerup powerup)
        {
            var type = Mapper.GetWeaponItemType(name);
            switch (powerup)
            {
                case RangedWeaponPowerup.Gravity:
                case RangedWeaponPowerup.GravityDE:
                    return new GravityGun(owner, name, powerup);
                default:
                    return new RangeWpn(owner, name, powerup);
            }
        }
    }
    class RangeWpn : Wpn
    {
        public RangedWeaponPowerup Powerup { get; protected set; }

        public RangeWpn(IPlayer owner) : this(owner, WeaponItem.NONE, RangedWeaponPowerup.None) { }
        public RangeWpn(IPlayer owner, WeaponItem name, RangedWeaponPowerup powerup)
            : base(owner, name)
        {
            Powerup = powerup;
        }

        public void Add(WeaponItem name, RangedWeaponPowerup powerup)
        {
            Name = name;
            Type = Mapper.GetWeaponItemType(name);
            Powerup = powerup;
        }

        public override void Remove()
        {
            base.Remove();
            Powerup = RangedWeaponPowerup.None;
        }

        public virtual void Update(float elapsed) { }

        public virtual void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos) { }

        public virtual void OnProjectileCreated(IProjectile projectile) { }
        public virtual void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args) { }
    }
    class SpinnerBullet : HoveringProjectile
    {
        public SpinnerBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Spinner)
        {
            if (projectile.ProjectileItem == ProjectileItem.BAZOOKA
                || projectile.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || projectile.ProjectileItem == ProjectileItem.FLAREGUN
                || projectile.ProjectileItem == ProjectileItem.BOW
                || projectile.ProjectileItem == ProjectileItem.SNIPER)
                UpdateDelay = 0;
            else
                UpdateDelay = 4;
        }

        protected override void OnHover()
        {
            base.OnHover();
            if (Instance.ProjectileItem != ProjectileItem.GRENADE_LAUNCHER)
                Instance.FlagForRemoval();
        }

        private float m_fireTime = 0f;
        private float m_fireAngle = 0f;
        protected override void UpdateHovering(float elapsed)
        {
            if (ScriptHelper.IsElapsed(m_fireTime, 30))
            {
                var totalBullets = 20;
                var angleInBetween = 360 / totalBullets;
                var powerup = ScriptHelper.GetPowerup(Instance);
                var direction = ScriptHelper.GetDirection(MathExtension.ToRadians(m_fireAngle));

                Game.PlaySound("SilencedUzi", HoverPosition);
                Game.SpawnProjectile(ProjectileItem.MAGNUM, HoverPosition, direction, powerup);

                if (m_fireAngle == 360 - angleInBetween)
                    Destroy();

                m_fireTime = Game.TotalElapsedGameTime;
                m_fireAngle += angleInBetween;
            }
        }

        protected override void Destroy()
        {
            base.Destroy();
            if (Instance.ProjectileItem == ProjectileItem.GRENADE_LAUNCHER
                || Instance.ProjectileItem == ProjectileItem.BAZOOKA)
                Game.TriggerExplosion(HoverPosition);
            else
                Game.PlayEffect(EffectName.Block, HoverPosition);
        }
    }
    class StickyBombProjectile : CustomProjectile
    {
        private float m_timeElasped = 0f;
        public IObject TargetedObject { get; private set; }
        public IPlayer TargetedPlayer { get; private set; }

        private Vector2 m_relPlayerPosition;
        public IObjectWeldJoint m_weldJoint;

        public StickyBombProjectile(IProjectile projectile) : base(projectile, RangedWeaponPowerup.StickyBomb)
        {
        }

        protected override IObject OnProjectileCreated(IProjectile projectile)
        {
            Vector2 velocity;

            switch (projectile.ProjectileItem)
            {
                case ProjectileItem.FLAREGUN:
                case ProjectileItem.BOW:
                case ProjectileItem.GRENADE_LAUNCHER:
                    velocity = projectile.Velocity / 30 + Vector2.UnitY * 3;
                    break;
                default:
                    velocity = projectile.Velocity / 20;
                    break;
            }

            return CreateCustomProjectile(projectile, "WpnC4Thrown", velocity);
        }

        protected override void Update(float elapsed)
        {
            base.Update(elapsed);

            if (TargetedObject == null)
                CheckIfCollide();
            
            if (TargetedObject != null) Game.DrawArea(TargetedObject.GetAABB(), Color.Red);
            if (TargetedPlayer != null)
            {
                if (TargetedPlayer.IsOnGround)
                {
                    if (m_weldJoint != null)
                    {
                        Instance.SetBodyType(BodyType.Static);
                        m_weldJoint.Remove();
                        m_weldJoint = null;
                    }

                    if (TargetedPlayer.IsCrouching)
                    {
                        Instance.SetWorldPosition(TargetedPlayer.GetWorldPosition() - m_relPlayerPosition - Vector2.UnitY * 5);
                    }
                    else if (TargetedPlayer.IsRolling)
                    {
                        Instance.SetWorldPosition(TargetedPlayer.GetAABB().Center);
                    }
                    else
                    {
                        Instance.SetWorldPosition(TargetedPlayer.GetWorldPosition() - m_relPlayerPosition);
                    }
                }
                else if (TargetedPlayer.IsInMidAir) // cannot track position accurately when player is in mid air
                {
                    if (m_weldJoint == null)
                    {
                        Instance.SetBodyType(BodyType.Dynamic);
                        m_weldJoint = (IObjectWeldJoint)Game.CreateObject("WeldJoint");
                        m_weldJoint.SetWorldPosition(Instance.GetWorldPosition());
                        m_weldJoint.SetTargetObjects(new List<IObject>() { Instance, TargetedPlayer });
                    }
                }
            }

            if (m_timeElasped != 0 && ScriptHelper.IsElapsed(m_timeElasped, 2000))
            {
                if (m_weldJoint != null) m_weldJoint.Remove();
                Instance.Destroy();
            }
        }

        private Vector2 m_lastVelocity;
        private float m_lastAngle;
        private void CheckIfCollide()
        {
            var currentVec = Instance.GetLinearVelocity();

            if (MathExtension.Diff(currentVec.X, m_lastVelocity.X) >= 5
                || MathExtension.Diff(currentVec.Y, m_lastVelocity.Y) >= 5
                || MathExtension.Diff(Instance.GetAngle(), m_lastAngle) >= MathExtension.OneDeg * 3
                || TotalDistanceTraveled >= 15 && currentVec.Length() <= 1)
            {
                TargetedObject = Game.GetObjectsByArea(Instance.GetAABB())
                    .Where(o => o.UniqueID != Instance.UniqueID && ScriptHelper.IsInteractiveObject(o))
                    .FirstOrDefault();

                if (TargetedObject != null)
                {
                    m_timeElasped = Game.TotalElapsedGameTime;
                    TargetedPlayer = ScriptHelper.CastPlayer(TargetedObject);

                    if (TargetedPlayer != null)
                    {
                        Instance.SetBodyType(BodyType.Static);
                        m_relPlayerPosition = TargetedPlayer.GetWorldPosition() - Instance.GetWorldPosition();
                    }
                    else
                    {
                        m_weldJoint = (IObjectWeldJoint)Game.CreateObject("WeldJoint");
                        m_weldJoint.SetWorldPosition(Instance.GetWorldPosition());
                        m_weldJoint.SetTargetObjects(new List<IObject>() { Instance, TargetedObject });
                    }
                }
            }

            m_lastVelocity = currentVec;
            m_lastAngle = Instance.GetAngle();
        }
    }
    class StunBullet : Projectile
    {
        private static readonly uint StunnedTime = 3000;
        private static readonly float EMPBlastRadius = 15f;

        public StunBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Stun) { }

        public float StunChance { get; private set; }
        public float StunRangeChance { get; private set; }

        protected override bool OnProjectileCreated()
        {
            if (IsExplosiveProjectile)
            {
                StunChance = 0f;
                StunRangeChance = 1f;
            }
            else
            {
                StunChance = .19f;
                StunRangeChance = .01f;

                if (IsShotgunShell) // shotguns have double chance to stun
                {
                    StunChance = StunChance / ProjectilesPerShell * 2;
                    StunRangeChance = StunRangeChance / ProjectilesPerShell * 2;
                }
            }

            return true;
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            var rndNum = RandomHelper.Between(0, 1);
            if (rndNum < StunRangeChance)
            {
                ElectrocuteRange(args.HitPosition);
            }
            if (StunRangeChance <= rndNum && rndNum < StunChance)
            {
                Electrocute(args);
            }
        }

        private void PlayStunEffects(Vector2 position, bool isStunningPlayer)
        {
            Game.PlayEffect(EffectName.Electric, position);
            Game.PlaySound("ElectricSparks", position);

            var sparkFireChance = isStunningPlayer ? .3f : .7f;
            if (RandomHelper.Percentage(sparkFireChance))
            {
                Game.SpawnFireNode(position, Vector2.Zero);
                Game.PlayEffect(EffectName.FireTrail, position);
            }
        }

        private void StunBot(Bot bot) { StunBot(bot, bot.Position); }
        private void StunBot(Bot bot, Vector2 hitPosition)
        {
            if (!CanBeStunned(bot)) return;

            PlayStunEffects(hitPosition, true);
            Game.PlayEffect(EffectName.CustomFloatText, hitPosition, "stunned");

            bot.Stun(StunnedTime, (e) =>
            {
                var position = bot.Position;
                position.X += RandomHelper.Between(-10, 10);
                position.Y += RandomHelper.Between(-10, 10);

                Game.PlayEffect(EffectName.Electric, position);
            }, 400);
        }

        private void ElectrocuteRange(Vector2 position)
        {
            foreach (var bot in BotManager.GetBots())
            {
                var player = bot.Player;
                if (ScriptHelper.IntersectCircle(player.GetAABB(), position, EMPBlastRadius))
                {
                    StunBot(bot);
                }
            }

            for (var i = 0; i < 360; i += 72) // Play electric effect 5 times in circle (360 / 5 = 72)
            {
                var direction = ScriptHelper.GetDirection(MathExtension.ToRadians(i));

                Game.PlayEffect(EffectName.Electric, position + direction * EMPBlastRadius);
                Game.PlaySound("ElectricSparks", position);
            }

            if (Game.IsEditorTest)
            {
                Events.UpdateCallback.Start((e) => Game.DrawCircle(position, EMPBlastRadius, Color.Cyan),
                    0, 60 * 2);
            }
        }

        private void Electrocute(ProjectileHitArgs args)
        {
            var position = args.HitPosition;

            if (args.IsPlayer)
            {
                var player = Game.GetPlayer(args.HitObjectID);
                var bot = BotManager.GetBot(player);

                if (bot != Bot.None)
                {
                    StunBot(bot, position);
                }
            }
            else
                PlayStunEffects(position, false);
        }

        private bool CanBeStunned(Bot bot)
        {
            var player = bot.Player;
            return !player.IsRemoved && !player.IsDead && !bot.IsStunned;
        }
    }
    class TearingBullet : Projectile
    {
        public TearingBullet(IProjectile projectile) : base(projectile, RangedWeaponPowerup.Tearing)
        {
        }

        public float TearingChance { get; private set; }
        public float Tearing2Chance { get; private set; }

        protected override bool OnProjectileCreated()
        {
            if (IsExplosiveProjectile)
            {
                TearingChance = .9f;
                Tearing2Chance = .33f;
            }
            else
            {
                TearingChance = .25f;
                Tearing2Chance = 0f;

                if (IsShotgunShell)
                {
                    TearingChance = TearingChance / ProjectilesPerShell * 1.5f;
                    Tearing2Chance = TearingChance;
                }
            }

            TearingChance = MathHelper.Clamp(TearingChance * Instance.DamageDealtModifier, 0, 1);
            Tearing2Chance = MathHelper.Clamp(Tearing2Chance * Instance.DamageDealtModifier, 0, 1);

            return base.OnProjectileCreated();
        }

        public override void OnProjectileHit(ProjectileHitArgs args)
        {
            base.OnProjectileHit(args);

            if (IsExplosiveProjectile)
            {
                var explosiveArea = ScriptHelper.GrowFromCenter(args.HitPosition, Constants.ExplosionRadius * 2);
                var playersInRadius = Game.GetObjectsByArea<IPlayer>(explosiveArea)
                    .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), args.HitPosition, Constants.ExplosionRadius));

                foreach (var player in playersInRadius)
                    Strip(player);
            }
            else
            {
                if (!args.IsPlayer)
                    return;

                var player = Game.GetPlayer(args.HitObjectID);
                Strip(player);
            }
        }

        private void Strip(IPlayer player)
        {
            if (player.IsBurnedCorpse || player.IsRemoved) return;

            var profile = player.GetProfile();
            var stripeableClothingTypes = StrippeableClothingTypes(profile);

            if (RandomHelper.Percentage(TearingChance))
            {
                StripPlayerClothingItem(player, stripeableClothingTypes);
            }
            if (RandomHelper.Percentage(Tearing2Chance))
            {
                StripPlayerClothingItem(player, stripeableClothingTypes);
            }

            var extraDamage = (8 - stripeableClothingTypes.Count) * 1;
            if (!HaveUnderwear(profile)) extraDamage++;
            player.DealDamage(extraDamage);
        }

        private void StripPlayerClothingItem(IPlayer player, List<ClothingType> clothingTypes)
        {
            var profile = player.GetProfile();
            if (!clothingTypes.Any() && !HaveUnderwear(profile)) return;

            if (!clothingTypes.Any())
            {
                var strippedProfile = StripUnderwear(profile);
                player.SetProfile(strippedProfile);
                player.SetBotName("Naked " + player.Name);
            }
            else
            {
                var clothingTypeToStrip = RandomHelper.GetItem(clothingTypes);
                var strippedProfile = Strip(profile, clothingTypeToStrip);

                player.SetProfile(strippedProfile);
            }
        }

        private enum ClothingType
        {
            Accesory,
            ChestOver,
            ChestUnder,
            Feet,
            Hands,
            Head,
            Legs,
            Waist,
        }

        private bool HaveUnderwear(IProfile profile)
        {
            var skin = profile.Skin;
            var noUnderwear = skin.Color1 == "Skin1" && skin.Color2 == "ClothingBrown"
                || skin.Color1 == "Skin2" && skin.Color2 == "ClothingPink"
                || skin.Color1 == "Skin3" && skin.Color2 == "ClothingLightPink"
                || skin.Color1 == "Skin4" && skin.Color2 == "ClothingLightPink"
                || skin.Color1 == "Skin5" && skin.Color2 == "ClothingLightGray";
            return !noUnderwear;
        }

        private IProfile StripUnderwear(IProfile profile)
        {
            var skin = profile.Skin;
            if (skin.Color1 == "Skin1") profile.Skin.Color2 = "ClothingBrown";
            if (skin.Color1 == "Skin2") profile.Skin.Color2 = "ClothingPink";
            if (skin.Color1 == "Skin3") profile.Skin.Color2 = "ClothingLightPink";
            if (skin.Color1 == "Skin4") profile.Skin.Color2 = "ClothingLightPink";
            if (skin.Color1 == "Skin5") profile.Skin.Color2 = "ClothingLightGray";
            return profile;
        }

        private List<ClothingType> StrippeableClothingTypes(IProfile profile)
        {
            var strippeableClothingTypes = new List<ClothingType>();

            if (profile.Accesory != null && CanBeStripped(ClothingType.Accesory, profile.Accesory.Name))
                strippeableClothingTypes.Add(ClothingType.Accesory);
            if (profile.ChestOver != null && CanBeStripped(ClothingType.ChestOver, profile.ChestOver.Name))
                strippeableClothingTypes.Add(ClothingType.ChestOver);
            if (profile.ChestUnder != null && CanBeStripped(ClothingType.ChestUnder, profile.ChestUnder.Name))
                strippeableClothingTypes.Add(ClothingType.ChestUnder);
            if (profile.Feet != null && CanBeStripped(ClothingType.Feet, profile.Feet.Name))
                strippeableClothingTypes.Add(ClothingType.Feet);
            if (profile.Hands != null && CanBeStripped(ClothingType.Hands, profile.Hands.Name))
                strippeableClothingTypes.Add(ClothingType.Hands);
            if (profile.Head != null && CanBeStripped(ClothingType.Head, profile.Head.Name))
                strippeableClothingTypes.Add(ClothingType.Head);
            if (profile.Legs != null && CanBeStripped(ClothingType.Legs, profile.Legs.Name))
                strippeableClothingTypes.Add(ClothingType.Legs);
            if (profile.Waist != null && CanBeStripped(ClothingType.Waist, profile.Waist.Name))
                strippeableClothingTypes.Add(ClothingType.Waist);

            return strippeableClothingTypes;
        }

        private bool CanBeStripped(ClothingType type, string clothingItem)
        {
            switch (type)
            {
                case ClothingType.Head:
                {
                    switch (clothingItem)
                    {
                        // TODO: add female cases?
                        case "Afro":
                        case "Buzzcut":
                        case "Mohawk":
                            return false;
                    }
                    break;
                }
                case ClothingType.Accesory:
                {
                    switch (clothingItem)
                    {
                        case "ClownMakeup":
                        case "ClownMakeup_fem":
                        case "Moustache":
                        case "Small Moustache":
                            return false;
                    }
                    break;
                }
            }

            return true;
        }

        private IProfile Strip(IProfile profile, ClothingType clothingType)
        {
            if (clothingType == ClothingType.Accesory)
                profile.Accesory = null;
            if (clothingType == ClothingType.ChestOver)
                profile.ChestOver = null;
            if (clothingType == ClothingType.ChestUnder)
                profile.ChestUnder = null;
            if (clothingType == ClothingType.Feet)
                profile.Feet = null;
            if (clothingType == ClothingType.Hands)
                profile.Hands = null;
            if (clothingType == ClothingType.Head)
                profile.Head = null;
            if (clothingType == ClothingType.Legs)
                profile.Legs = null;
            if (clothingType == ClothingType.Waist)
                profile.Waist = null;
            return profile;
        }
    }
    // Placeholder for now
    class ThrowWpn
    {
        public WeaponItem Name { get; set; }
        public RangedWeaponPowerup Powerup { get; set; }

        public ThrowWpn()
        {
            Name = WeaponItem.NONE;
            Powerup = RangedWeaponPowerup.None;
        }
    }
    class Wpn
    {
        public WeaponItem Name { get; protected set; }
        public WeaponItemType Type { get; protected set; }
        public IPlayer Owner { get; protected set; }

        public Wpn(IPlayer owner, WeaponItem name = WeaponItem.NONE)
        {
            Name = name;
            Type = Mapper.GetWeaponItemType(name);
            Owner = owner;
        }

        public virtual void Remove()
        {
            Name = WeaponItem.NONE;
            Type = WeaponItemType.NONE;
        }
    }
    public class BabybearBot : Bot
    {
        private TeddybearBot m_mommy = null;
        private IPlayer m_offender;
        private static Queue<string> Names = new Queue<string>(new[] { "Timmy", "Jimmy" });

        public BabybearBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetBotName(Names.Dequeue());
        }

        private bool m_trackRocketRidingOffender = false;
        private float m_findDelay = -2000f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (m_mommy == null)
            {
                if (ScriptHelper.IsElapsed(m_findDelay, 2000))
                {
                    m_findDelay = Game.TotalElapsedGameTime;
                    FindMommy();
                }
            }

            if (Player.IsRocketRiding && !m_trackRocketRidingOffender)
            {
                var projectile = Game.GetProjectile(Player.RocketRidingProjectileInstanceID);
                m_offender = Game.GetPlayer(projectile.InitialOwnerPlayerID);
                m_trackRocketRidingOffender = true;
            }
            else
            {
                m_trackRocketRidingOffender = false;
            }
        }

        private void FindMommy()
        {
            foreach (var bot in BotManager.GetBots())
            {
                if (bot.Type == BotType.Teddybear)
                {
                    m_mommy = (TeddybearBot)bot;
                    m_mommy.Player.SetBotName("Mommy Bear");
                    break;
                }
            }
            Player.SetGuardTarget(m_mommy.Player);
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);
            m_offender = attacker;
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (!args.Removed)
                if (RandomHelper.Percentage(.75f)) Game.PlaySound("CartoonScream", Position);

            if (m_offender == null)
                m_offender = FindClosestTarget();

            m_mommy.Enrage(m_offender);
        }

        private IPlayer FindClosestTarget()
        {
            IPlayer target = null;

            foreach (var player in Game.GetPlayers())
            {
                var result = ScriptHelper.IsDifferentTeam(player, Player);
                if (player.IsDead || player.IsRemoved || !ScriptHelper.IsDifferentTeam(player, Player))
                    continue;

                if (target == null) target = player;

                var targetDistanceSq = Vector2.DistanceSquared(target.GetWorldPosition(), Position);
                var potentialTargetDistanceSq = Vector2.DistanceSquared(player.GetWorldPosition(), Position);

                if (potentialTargetDistanceSq < targetDistanceSq)
                {
                    target = player;
                }
            }

            return target;
        }
    }
    class BalistaBot : Bot
    {
        public BalistaBot(BotArgs args) : base(args) { }

        private int m_rifleReloadTime = 0;
        private bool m_fireReloadEvent = false;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            LogDebug(m_rifleReloadTime);

            if (Player.IsReloading && !m_fireReloadEvent)
            {
                OnReload();
                m_fireReloadEvent = true;
            }
            if (!Player.IsReloading && m_fireReloadEvent)
                m_fireReloadEvent = false;

            if (Player.IsDead) return;
            if (IsUsingPowerupWpn && Player.CurrentPrimaryWeapon.TotalAmmo == 0)
                ProjectileManager.SetPowerup(Player, WeaponItem.ASSAULT, RangedWeaponPowerup.None);
            else if (!IsUsingPowerupWpn && (m_rifleReloadTime >= 1 || Player.CurrentPrimaryWeapon.TotalAmmo == 0))
                ProjectileManager.SetPowerup(Player, WeaponItem.GRENADE_LAUNCHER, RangedWeaponPowerup.Spinner);
        }

        private bool IsUsingPowerupWpn
        {
            get
            {
                var playerWpn = ProjectileManager.GetOrCreatePlayerWeapon(Player);
                return playerWpn.Primary.Name == WeaponItem.GRENADE_LAUNCHER
                    && playerWpn.Primary.Powerup == RangedWeaponPowerup.Spinner;
            }
        }

        private void OnReload()
        {
            if (Player.CurrentWeaponDrawn == WeaponItemType.Rifle)
                m_rifleReloadTime++;
        }

        public override void OnPickedupWeapon(PlayerWeaponAddedArg arg)
        {
            base.OnPickedupWeapon(arg);
            m_rifleReloadTime = 0;
        }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (arg.WeaponItemType != WeaponItemType.Rifle)
                return;

            var weaponObject = Game.GetObject(arg.TargetObjectID);

            if (!Player.IsDead)
            {
                if (weaponObject != null)
                    weaponObject.SetHealth(0);
            }
            else
            {
                // always drops powerup weapon as a reward for players
                var powerupWpn = ProjectileManager.CreateWeapon("WpnGrenadeLauncher", RangedWeaponPowerup.Spinner);

                powerupWpn.SetWorldPosition(weaponObject.GetWorldPosition());
                powerupWpn.SetLinearVelocity(weaponObject.GetLinearVelocity());
                powerupWpn.SetAngularVelocity(weaponObject.GetAngularVelocity());
                weaponObject.Remove();
            }
        }
    }
    class BoffinBot : Bot
    {
        RangedWeaponPowerup m_currentPowerup;

        public BoffinBot(BotArgs args) : base(args)
        {
            m_currentPowerup = GetWeapons(Type).First().PrimaryPowerup;
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.GetHealth() <= 80 && m_currentPowerup != RangedWeaponPowerup.GravityDE)
            {
                Game.PlayEffect(EffectName.Electric, Position);
                Game.PlaySound("ElectricSparks", Position);
                Game.CreateDialogue("You underestimate the gravity of the situation", DialogueColor, Player, duration: 3500, showInChat: false);
                m_currentPowerup = RangedWeaponPowerup.GravityDE;
                ResetWeapon();
                Player.SetStrengthBoostTime(1000 * 60 * 1);

                var mod = Player.GetModifiers();
                mod.MeleeForceModifier = MeleeForce.Strong;
                SetModifiers(mod);
            }
        }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (arg.WeaponItemType == WeaponItemType.Rifle && !Player.IsDead)
            {
                if (arg.TargetObjectID != 0)
                {
                    Game.GetObject(arg.TargetObjectID).Remove();
                }
                ResetWeapon();
            }
        }

        private void ResetWeapon()
        {
            var weaponSet = GetWeapons(Type).First();
            ProjectileManager.SetPowerup(Player, weaponSet.Primary, m_currentPowerup);
        }
    }
    public class Bot
    {
        public static readonly Bot None;
        static Bot() { None = new Bot(); }

        public static Color DialogueColor
        {
            get { return new Color(128, 32, 32); }
        }
        public BotBehaviorSet BotBehaviorSet { get; private set; }
        public IPlayer Player { get; set; }
        public BotType Type { get; set; }
        public BotFaction Faction { get; set; }
        public BotInfo Info { get; set; }
        public int UpdateDelay { get; set; }
        public Vector2 Position
        {
            get { return Player.GetWorldPosition(); }
            set { Player.SetWorldPosition(value); }
        }

        private Bot_GravityGunAI m_botGravityGunAI;

        private Bot(IPlayer player = null)
        {
            m_botGravityGunAI = new Bot_GravityGunAI(this);
            Player = player;
            InfectTeam = player != null ? player.GetTeam() : BotManager.BotTeam;
            UpdateDelay = 0;
            BotBehaviorSet = player != null ? player.GetBotBehaviorSet() : null;
        }
        public Bot(IPlayer player, BotType type, BotFaction faction) : this(player)
        {
            Type = type;
            Faction = faction;
            Info = new BotInfo(player);
            UpdateDelay = 100;
        }
        public Bot(BotArgs args) : this(args.Player)
        {
            Type = args.BotType;
            Faction = args.BotFaction;
            Info = args.Info;
        }

        private void SaySpawnLine()
        {
            if (Info == null) return;

            var spawnLine = Info.SpawnLine;
            var spawnLineChance = Info.SpawnLineChance;

            if (!string.IsNullOrWhiteSpace(spawnLine) && RandomHelper.Percentage(spawnLineChance))
                Game.CreateDialogue(spawnLine, DialogueColor, Player, duration: 3000f);
        }

        public void SayDeathLine()
        {
            if (Info == null) return;

            var deathLine = Info.DeathLine;
            var deathLineChance = Info.DeathLineChance;

            if (!string.IsNullOrWhiteSpace(deathLine) && RandomHelper.Percentage(deathLineChance))
                Game.CreateDialogue(deathLine, DialogueColor, Player, duration: 3000f);
        }

        private List<WeaponItem> m_prevWeapons = new List<WeaponItem>()
        {
            WeaponItem.NONE,
            WeaponItem.NONE,
            WeaponItem.NONE,
            WeaponItem.NONE,
            WeaponItem.NONE,
            WeaponItem.NONE,
        };

        private List<float> m_prevAmmo = new List<float>()
        {
            0, // makeshift
            0, // melee 'ammo' is durability of melee weapon
            0, // primary
            0, // secondary
            0, // throwable
            0, // powerup - should always be 0
        };

        private float m_lastUpdateElapsed = 0f;
        public void Update(float elapsed)
        {
            m_lastUpdateElapsed += elapsed;

            if (m_lastUpdateElapsed >= UpdateDelay)
            {
                OnUpdate(m_lastUpdateElapsed);
                m_lastUpdateElapsed = 0;
            }
            UpdateWeaponStatus();
            UpdateCustomWeaponAI(elapsed);
            UpdateInfectedEffect(elapsed);

            if (IsStunned && !Player.IsDeathKneeling)
                Player.AddCommand(new PlayerCommand(PlayerCommandType.DeathKneelInfinite));
        }

        public void LogDebug(params object[] messages)
        {
            if (Game.IsEditorTest)
            {
                Game.DrawText(ScriptHelper.ToDisplayString(messages), Position);
            }
        }

        protected virtual void OnUpdate(float elapsed) { }

        public virtual void OnPickedupWeapon(PlayerWeaponAddedArg arg) { }
        public virtual void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            var gun = GetGravityGun();
            if (gun != null)
                m_botGravityGunAI.OnDroppedWeapon(arg);
        }

        private int CurrentWeaponIndex
        {
            get
            {
                switch (Player.CurrentWeaponDrawn)
                {
                    case WeaponItemType.Melee:
                        if (Player.CurrentMeleeMakeshiftWeapon.WeaponItem != WeaponItem.NONE)
                            return 0;
                        return 1;
                    case WeaponItemType.Rifle:
                        return 2;
                    case WeaponItemType.Handgun:
                        return 3;
                    case WeaponItemType.Thrown:
                        return 4;
                    case WeaponItemType.Powerup:
                        return 5;
                }
                return -1;
            }
        }
        public WeaponItem CurrentWeapon
        {
            get { return GetCurrentWeapon(CurrentWeaponIndex); }
        }
        public float CurrentAmmo
        {
            get { return GetCurrentAmmo(CurrentWeaponIndex); }
            set { SetCurrentAmmo(CurrentWeaponIndex, value); }
        }

        private WeaponItem GetCurrentWeapon(int index)
        {
            switch (index)
            {
                case 0:
                    return Player.CurrentMeleeMakeshiftWeapon.WeaponItem;
                case 1:
                    return Player.CurrentMeleeWeapon.WeaponItem;
                case 2:
                    return Player.CurrentPrimaryWeapon.WeaponItem;
                case 3:
                    return Player.CurrentSecondaryWeapon.WeaponItem;
                case 4:
                    return Player.CurrentThrownItem.WeaponItem;
                case 5:
                    return Player.CurrentPowerupItem.WeaponItem;
            }
            return WeaponItem.NONE;
        }
        public float GetCurrentAmmo(int index)
        {
            switch (index)
            {
                case 0:
                    return Player.CurrentMeleeMakeshiftWeapon.Durability;
                case 1:
                    return Player.CurrentMeleeWeapon.Durability;
                case 2:
                    return Player.CurrentPrimaryWeapon.TotalAmmo;
                case 3:
                    return Player.CurrentSecondaryWeapon.TotalAmmo;
                case 4:
                    return Player.CurrentThrownItem.CurrentAmmo;
            }
            return 0;
        }
        public void SetCurrentAmmo(int currentWeaponIndex, float value)
        {
            switch (currentWeaponIndex)
            {
                case 0:
                    Player.SetCurrentMeleeMakeshiftDurability(value);
                    break;
                case 1:
                    Player.SetCurrentMeleeDurability(value);
                    break;
                case 2:
                    Player.SetCurrentPrimaryWeaponAmmo((int)value);
                    break;
                case 3:
                    Player.SetCurrentSecondaryWeaponAmmo((int)value);
                    break;
                case 4:
                    Player.SetCurrentThrownItemAmmo((int)value);
                    break;
            }
        }

        private void UpdateWeaponStatus()
        {
            for (var i = 0; i < m_prevWeapons.Count; i++)
            {
                if (GetCurrentWeapon(i) != m_prevWeapons[i])
                {
                    m_prevWeapons[i] = GetCurrentWeapon(i);
                }
            }

            for (var i = 0; i < m_prevAmmo.Count; i++)
            {
                m_prevAmmo[i] = GetCurrentAmmo(i);
            }
        }

        private GravityGun GetGravityGun()
        {
            var playerWeapon = ProjectileManager.GetOrCreatePlayerWeapon(Player);
            if (playerWeapon == null) return null;

            if (playerWeapon.Primary.Powerup == RangedWeaponPowerup.Gravity
                || playerWeapon.Primary.Powerup == RangedWeaponPowerup.GravityDE)
                return (GravityGun)playerWeapon.Primary;
            if (playerWeapon.Secondary.Powerup == RangedWeaponPowerup.Gravity
                || playerWeapon.Secondary.Powerup == RangedWeaponPowerup.GravityDE)
                return (GravityGun)playerWeapon.Secondary;

            return null;
        }

        private void UpdateCustomWeaponAI(float elapsed)
        {
            if (!Player.IsBot || IsStunned || (Game.StartupSequenceEnabled && Game.TotalElapsedRealTime <= 3000)) return;

            // TODO: Avoid disabling input because it's error-prone
            // Equip the weapon and ammo manually and remove the IObjectWeaponItem
            // if gurt adds this https://www.mythologicinteractiveforums.com/viewtopic.php?f=31&t=3986
            //foreach (var nearbyWeapon in m_nearbyWeapons)
            //{
            //    Game.DrawArea(nearbyWeapon.GetAABB(), Color.Grey);
            //    if (Info.SpecificSearchItems.Contains(nearbyWeapon.WeaponItem)
            //        && !Player.IsStaggering && !Player.IsStunned && Player.IsOnGround)
            //    {
            //        Player.SetInputEnabled(false);
            //        Player.AddCommand(new PlayerCommand(PlayerCommandType.Activate, nearbyWeapon.UniqueID));
            //        ScriptHelper.Timeout(() =>
            //        {
            //            Player.ClearCommandQueue();
            //            Player.SetInputEnabled(true);
            //        }, 10);
            //        break;
            //    }
            //}

            var botBehaviorSet = Player.GetBotBehaviorSet();

            if (botBehaviorSet.RangedWeaponMode != BotBehaviorRangedWeaponMode.HipFire)
            {
                var gun = GetGravityGun();
                if (gun != null)
                    m_botGravityGunAI.Update(elapsed, gun);
            }
        }

        private float m_bloodEffectElapsed = 0;
        private void UpdateInfectedEffect(float elapsed)
        {
            if (Info.ZombieStatus == ZombieStatus.Infected && !Player.IsRemoved && !Player.IsBurnedCorpse)
            {
                m_bloodEffectElapsed += elapsed;

                if (m_bloodEffectElapsed > 300)
                {
                    Game.PlayEffect(EffectName.BloodTrail, Position);
                    m_bloodEffectElapsed = 0;
                }
            }
        }

        public virtual void OnSpawn() { SaySpawnLine(); }
        public virtual void OnMeleeDamage(IPlayer attacker, PlayerMeleeHitArg arg) { }
        public virtual void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            UpdateInfectedStatus(attacker, args);
        }

        public virtual void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            var player = Game.GetPlayer(projectile.InitialOwnerPlayerID);

            if (player == null) return;

            var bot = BotManager.GetBot(player) as CowboyBot;

            if (bot != null)
            {
                if (args.IsCrit)
                {
                    var destroyWeapon = RandomHelper.Percentage(bot.DestroyWeaponWhenCritDisarmChance);
                    if (RandomHelper.Percentage(bot.CritDisarmChance))
                        Disarm(projectile.Direction, destroyWeapon);
                }
                else
                {
                    var destroyWeapon = RandomHelper.Percentage(bot.DestroyWeaponWhenDisarmChance);
                    if (RandomHelper.Percentage(bot.DisarmChance))
                        Disarm(projectile.Direction, destroyWeapon);
                }
            }
        }
        public virtual void OnDeath(PlayerDeathArgs args)
        {
            if (args.Killed) SayDeathLine();
        }

        public virtual void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos) { }

        public bool CanInfect { get { return Info.ZombieStatus != ZombieStatus.Human; } }
        public bool CanBeInfected { get { return !CanInfect && !Info.ImmuneToInfect && !Player.IsBurnedCorpse; } }
        public bool IsInfectedByZombie { get { return Info.ZombieStatus == ZombieStatus.Infected; } }
        private void UpdateInfectedStatus(IPlayer attacker, PlayerDamageArgs args)
        {
            if (CanBeInfected && attacker != null)
            {
                var directContact = args.DamageType == PlayerDamageEventType.Melee
                    && attacker.CurrentWeaponDrawn == WeaponItemType.NONE
                    && !attacker.IsKicking && !attacker.IsJumpKicking;
                var attackerBot = BotManager.GetBot(attacker);

                if (attackerBot.CanInfect && directContact)
                {
                    Infect(attackerBot.InfectTeam);
                    Game.ShowChatMessage(attacker.Name + " infected " + Player.Name);
                }
            }
        }

        public PlayerTeam InfectTeam { get; private set; }
        public void Infect(PlayerTeam team)
        {
            if (CanBeInfected)
            {
                InfectTeam = team;
                Game.PlayEffect(EffectName.CustomFloatText, Position, "infected");
                Info.ZombieStatus = ZombieStatus.Infected;
            }
        }

        public void Disarm(Vector2 projDirection, bool destroyWeapon = false)
        {
            if (Player.CurrentWeaponDrawn == WeaponItemType.NONE) return;

            var velocity =
                    Vector2.UnitX * RandomHelper.Between(.25f, 2.5f) * Math.Sign(projDirection.X) +
                    Vector2.UnitY * RandomHelper.Between(.25f, 2.5f);

            if (Math.Sign(projDirection.X) == Math.Sign(Player.GetLinearVelocity().X))
                velocity += Vector2.UnitX * (Player.GetLinearVelocity().X / 2);

            Game.PlayEffect(EffectName.CustomFloatText, Position + Vector2.UnitY * 15, "Disarmed");

            // TODO: check if gurt fixed grenade diarm bug
            // https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=3991
            var weapon = Player.Disarm(Player.CurrentWeaponDrawn, velocity, false);
            if (destroyWeapon)
                weapon.SetHealth(0);
        }

        public bool IsStunned { get; private set; }
        private Events.UpdateCallback m_effect;
        public void Stun(uint stunnedTime, Action<float> effect, uint effectTime = 0)
        {
            IsStunned = true;
            Player.SetInputEnabled(false);
            Player.AddCommand(new PlayerCommand(PlayerCommandType.DeathKneelInfinite));

            m_effect = Events.UpdateCallback.Start(effect, effectTime);

            ScriptHelper.Timeout(() =>
            {
                Player.AddCommand(new PlayerCommand(PlayerCommandType.StopDeathKneel));
                Player.SetInputEnabled(true);
                IsStunned = false;
                Events.UpdateCallback.Stop(m_effect);
                m_effect = null;
            }, stunnedTime);
        }

        // set modifiers without changing current health and energy
        public void SetModifiers(PlayerModifiers modifiers, bool permanent = false)
        {
            modifiers.CurrentHealth = Player.GetHealth();
            modifiers.CurrentEnergy = Player.GetEnergy();
            Player.SetModifiers(modifiers);
            if (permanent) Info.Modifiers = modifiers;
        }
        public void ResetModifiers() { SetModifiers(Info.Modifiers); }

        public void SetBotBehaviorSet(BotBehaviorSet botBehaviorSet, bool permanent = false)
        {
            Player.SetBotBehaviorSet(botBehaviorSet);
            if (permanent) BotBehaviorSet = botBehaviorSet;
        }
        public void ResetBotBehaviorSet() { Player.SetBotBehaviorSet(BotBehaviorSet); }
    }
    public class BotArgs
    {
        public IPlayer Player;
        public BotType BotType = BotType.None;
        public BotFaction BotFaction = BotFaction.None;
        public BotInfo Info;
    }

    public static class BotFactory
    {
        public static Bot Create(IPlayer player, BotType botType, BotFaction faction)
        {
            Bot bot = null;
            var args = new BotArgs
            {
                Player = player,
                BotType = botType,
                BotFaction = faction,
                Info = GetInfo(botType),
            };

            switch (botType)
            {
                case BotType.Balista:
                    bot = new BalistaBot(args);
                    break;

                case BotType.Boffin:
                    bot = new BoffinBot(args);
                    break;

                case BotType.Cindy:
                    bot = new CindyBot(args);
                    break;

                case BotType.Cowboy:
                case BotType.ClownCowboy:
                    bot = new CowboyBot(args);
                    break;

                case BotType.Cyborg:
                    bot = new CyborgBot(args);
                    break;

                case BotType.Sheriff:
                    bot = new SheriffBot(args);
                    break;

                case BotType.Engineer:
                    bot = new EngineerBot(args, player.IsBot ? new EngineerBot_Controller() : null);
                    break;

                case BotType.Funnyman:
                    bot = new FunnymanBot(args, player.IsBot ? new FunnymanBot_Controller() : null);
                    break;

                case BotType.Hacker:
                    bot = new HackerBot(args);
                    break;

                case BotType.Incinerator:
                    bot = new IncineratorBot(args);
                    break;

                case BotType.Kingpin:
                    bot = new KingpinBot(args, player.IsBot ? new KingpinBot_Controller() : null);
                    break;

                case BotType.Kriegbär:
                    bot = new KriegbärBot(args);
                    break;

                case BotType.Mecha:
                    bot = new MechaBot(args, player.IsBot ? new MechaBot_Controller() : null);
                    break;

                case BotType.MirrorMan:
                    bot = new MirrorManBot(args);
                    break;

                case BotType.SurvivorBiker:
                case BotType.SurvivorCrazy:
                case BotType.SurvivorNaked:
                case BotType.SurvivorRifleman:
                case BotType.SurvivorRobber:
                case BotType.SurvivorTough:
                    bot = new SurvivorBot(args);
                    break;

                case BotType.Stripper:
                    bot = new StripperBot(args);
                    break;

                case BotType.Teddybear:
                    bot = new TeddybearBot(args);
                    break;

                case BotType.Babybear:
                    bot = new BabybearBot(args);
                    break;

                case BotType.ZombieFat:
                    bot = new ZombieFatBot(args);
                    break;

                case BotType.ZombieFlamer:
                    bot = new ZombieFlamerBot(args);
                    break;

                default:
                    bot = new Bot(args);
                    break;
            }

            return bot;
        }
    }
    class Bot_GravityGunAI
    {
        private enum State
        {
            Normal,
            Drawing,
            Reloading,
            AimingTargetedObject,
            Retrieving,
            AimingEnemy,
            Cooldown,
        }
        private State m_state = State.Normal;
        private readonly Bot Bot;
        private IObjectText m_debugText;
        private IPlayer Player { get { return Bot.Player; } }

        private bool m_executeOnce = false;
        private float m_cooldownTime = 0f;
        private float m_timeout = 0f; // in case bot gets stuck in a state
        private float m_shootDelayTime = 0f;
        private float m_shootDelayTimeThisTurn = 0f;
        private float m_stateDelay = 0f;

        private bool m_nearestObjectIsPlayer;
        private IObject m_nearestObject;
        private IObject NearestObject
        {
            get { return m_nearestObject; }
            set
            {
                m_nearestObject = value;
                m_nearestObjectIsPlayer = ScriptHelper.IsPlayer(m_nearestObject);
            }
        }

        private IPlayer m_targetEnemy;
        private static readonly float CooldownTime = Game.IsEditorTest ? 1000 : 1000;

        public Bot_GravityGunAI(Bot bot)
        {
            Bot = bot;
            if (Constants.IS_ME_ALONE)
            {
                m_debugText = (IObjectText)Game.CreateObject("Text");
                m_debugText.SetTextScale(.5f);
            }
        }

        public void OnDroppedWeapon(PlayerWeaponRemovedArg arg) { Stop("Drop weapon"); }

        public void Update(float elapsed, GravityGun gun)
        {
            if (Constants.IS_ME_ALONE)
            {
                m_debugText.SetWorldPosition(Player.GetWorldPosition());
                m_debugText.SetText(ScriptHelper.ToDisplayString(m_state + "\n", Player.IsInputEnabled + "\n",
                    Player.GetBotBehaviorSet().RangedWeaponUsage + "\n", GetNeareastObject(gun) == null));
            }
            else
                Bot.LogDebug(m_state, Player.IsInputEnabled, Player.GetBotBehaviorSet().RangedWeaponUsage);

            if (m_state == State.Normal || m_state == State.Cooldown)
            {
                // Trick the bot to use this weapon only when there are objects around
                // and stop using it when there is nothing to shoot with
                UpdateWeaponUsage(gun);
            }
            else
            {
                m_timeout += elapsed;

                if (m_timeout >= 3000f)
                    Stop("State timeout");
                if (Player.IsStaggering || Player.IsStunned || !Player.IsOnGround || Player.IsBurningInferno)
                    Stop("Player is stunned");
            }

            if (Game.IsEditorTest)
            {
                var o = GetNeareastObject(gun);
                if (o != null)
                    Game.DrawArea(o.GetAABB(), Color.Red);
                if (NearestObject != null)
                    Game.DrawArea(NearestObject.GetAABB(), Color.Magenta);
                foreach (var p in SearchedEnemies)
                    Game.DrawArea(p.GetAABB(), Color.Cyan);
                if (m_targetEnemy != null)
                    Game.DrawArea(m_targetEnemy.GetAABB(), Color.Green);
                Game.DrawArea(DangerArea, Color.Red);
                Game.DrawCircle(gun.GetHoldPosition(false), GravityGun.Range);
                Game.DrawArea(GetMimimumRange(), Color.Cyan);
            }

            //ScriptHelper.Stopwatch(() =>
            //{
            switch (m_state)
            {
                case State.Normal:
                {
                    if (!ScriptHelper.IsElapsed(m_stateDelay, 30))
                        break;

                    m_stateDelay = Game.TotalElapsedGameTime;
                    if (EnemiesNearby())
                    {
                        if (!Player.IsInputEnabled) Player.SetInputEnabled(true);
                        break;
                    }

                    var enemies = SearchedEnemies;
                    if (enemies.Count() > 0 && NearestObject == null)
                    {
                        NearestObject = gun.IsSupercharged ? enemies.First() : GetNeareastObject(gun);
                    }

                    if (NearestObject != null && !m_executeOnce && Player.IsOnGround
                        && !Player.IsStaggering && !Player.IsStunned && !Player.IsHoldingPlayerInGrab)
                    {
                        Player.SetInputEnabled(false);

                        if (Player.CurrentWeaponDrawn != gun.Type)
                        {
                            if (gun.Type == WeaponItemType.Rifle)
                                Player.AddCommand(new PlayerCommand(PlayerCommandType.DrawRifle));
                            if (gun.Type == WeaponItemType.Handgun)
                                Player.AddCommand(new PlayerCommand(PlayerCommandType.DrawHandgun));
                            ChangeState(State.Drawing);
                            break;
                        }

                        if (GetCurrentAmmo(gun) == 0)
                        {
                            Player.AddCommand(new PlayerCommand(PlayerCommandType.Reload));
                            ChangeState(State.Reloading);
                            break;
                        }

                        Player.AddCommand(new PlayerCommand(PlayerCommandType.StartAimAtPrecise, NearestObject.UniqueID));
                        m_executeOnce = true;
                    }

                    if (NearestObject != null && Player.CurrentWeaponDrawn == gun.Type && GetCurrentAmmo(gun) > 0)
                    {
                        ChangeState(State.AimingTargetedObject);
                    }
                    break;
                }
                case State.Drawing:
                {
                    if (!Player.IsDrawingWeapon) ChangeState(State.Normal);
                    break;
                }
                case State.Reloading:
                {
                    if (!Player.IsReloading) ChangeState(State.Normal);
                    break;
                }
                case State.AimingTargetedObject:
                {
                    var rangeLimit = GetRangeLimit();
                    var holdPosition = gun.GetHoldPosition(false);

                    if (NearestObject.IsRemoved ||
                        !ScriptHelper.IntersectCircle(NearestObject.GetAABB(), holdPosition, GravityGun.Range,
                        rangeLimit[0], rangeLimit[1]))
                    {
                        Stop("NearestObject not in range");
                        break;
                    }

                    if (Player.IsManualAiming && MaybeLockTarget(gun, NearestObject) && IsObjectInRange(gun, NearestObject))
                    {
                        gun.PickupObject();
                        ChangeState(State.Retrieving);
                    }
                    break;
                }
                case State.Retrieving:
                {
                    if (gun.TargetedObject == null || IsObjectStuck(gun.TargetedObject))
                    {
                        Stop(gun.TargetedObject == null ? "TargetedObject = null" : "TargetedObject is stuck");
                        break;
                    }
                    if (gun.IsTargetedObjectStabilized && gun.TargetedObject.GetLinearVelocity().Length() < 1)
                    {
                        var enemies = SearchedEnemies;
                        if (enemies.Count() > 0 || m_nearestObjectIsPlayer)
                        {
                            if (enemies.Count() > 1 && m_nearestObjectIsPlayer)
                            {
                                foreach (var enemy in enemies)
                                {
                                    if (enemy.UniqueID != NearestObject.UniqueID)
                                    {
                                        m_targetEnemy = enemy; break;
                                    }
                                }
                            }
                            else if (enemies.Count() > 0)
                                m_targetEnemy = enemies.First();

                            if (m_targetEnemy != null)
                                Player.AddCommand(new PlayerCommand(PlayerCommandType.StartAimAtPrecise, m_targetEnemy.UniqueID));
                            ChangeState(State.AimingEnemy);
                            var botBehaviorSet = Player.GetBotBehaviorSet();
                            m_shootDelayTimeThisTurn = RandomHelper.Between(
                                botBehaviorSet.RangedWeaponPrecisionAimShootDelayMin,
                                botBehaviorSet.RangedWeaponPrecisionAimShootDelayMax);
                        }
                        else
                            Stop("No enemies to shoot");
                    }
                    break;
                }
                case State.AimingEnemy:
                {
                    if (gun.TargetedObject == null || m_targetEnemy != null && (m_targetEnemy.IsDead || m_targetEnemy.IsRemoved))
                    {
                        Stop(gun.TargetedObject == null ? "Already Shot" : "Enemy already dead");
                        break;
                    }
                    if (IsPlayerInRange(gun, m_targetEnemy) || m_nearestObjectIsPlayer)
                    {
                        m_shootDelayTime += elapsed;

                        if (m_shootDelayTime >= m_shootDelayTimeThisTurn)
                        {
                            if (!m_nearestObjectIsPlayer && NearestObject.GetLinearVelocity().Length() < 1
                                || m_nearestObjectIsPlayer)
                            {
                                Player.AddCommand(new PlayerCommand(PlayerCommandType.AttackOnce));
                                m_shootDelayTime = 0f;
                            }
                        }
                    }
                    break;
                }
                case State.Cooldown:
                {
                    if (ScriptHelper.IsElapsed(m_cooldownTime, CooldownTime))
                    {
                        ChangeState(State.Normal);
                    }
                    break;
                }
            }

            //    return m_state.ToString();
            //});
        }

        private void UpdateWeaponUsage(GravityGun gun)
        {
            var botBehaviorSet = Player.GetBotBehaviorSet();

            if (GetNeareastObject(gun) == null || m_state == State.Cooldown)
            {
                // the old solution was to set ammo to 0 to disable using this gun. But the bot
                // will always sheathe weapon when running out of ammo and switch back, which
                // is very slow and distracting
                // Forbidden bot to use ranged weapon for a while will not make it switch weapon back and forth
                if (botBehaviorSet.RangedWeaponUsage)
                {
                    botBehaviorSet.RangedWeaponUsage = false;
                    Player.SetBotBehaviorSet(botBehaviorSet);
                }
            }
            else
            {
                if (!botBehaviorSet.RangedWeaponUsage)
                {
                    botBehaviorSet.RangedWeaponUsage = true;
                    Player.SetBotBehaviorSet(botBehaviorSet);
                }
            }
        }

        private Area DangerArea
        {
            get { return ScriptHelper.GrowFromCenter(Player.GetAABB().Center, 50, 30); }
        }

        private bool EnemiesNearby()
        {
            foreach (var player in Game.GetPlayers())
            {
                if (!ScriptHelper.SameTeam(Player, player))
                {
                    if (DangerArea.Intersects(player.GetAABB()))
                        return true;
                }
            }
            return false;
        }

        private void ChangeState(State state, string reason = "")
        {
            var objName = NearestObject != null ? NearestObject.Name : "";
            var eneName = m_targetEnemy != null ? m_targetEnemy.Name : "";

            ScriptHelper.Log(m_state, "->", state, "[", objName, ",", eneName, "]", reason);
            m_timeout = 0f;
            m_state = state;
            m_executeOnce = false;
            m_stateDelay = Game.TotalElapsedGameTime;
            m_objStuckCheckTime = Game.TotalElapsedGameTime;
            m_oldObjPosition = Vector2.Zero;
            m_aimCheckTime = Game.TotalElapsedGameTime;
            m_aimDirection = Vector2.Zero;
    }

        private void Stop(string reason)
        {
            ChangeState(State.Cooldown, reason);
            m_cooldownTime = Game.TotalElapsedGameTime;
            NearestObject = null;
            m_targetEnemy = null;
            Bot.Player.SetInputEnabled(true);
        }

        private int GetCurrentAmmo(GravityGun gun)
        {
            return gun.Type == WeaponItemType.Rifle ?
                Player.CurrentPrimaryWeapon.CurrentAmmo
                :
                Player.CurrentSecondaryWeapon.CurrentAmmo;
        }

        private float[] GetRangeLimit()
        {
            var offset = Player.FacingDirection > 0 ? -MathExtension.OneDeg : MathExtension.OneDeg;

            return new float[] { -MathHelper.PIOver2, MathHelper.PIOver2 + offset };
        }

        private Area GetMimimumRange()
        {
            var h = Player.GetAABB();
            h.Grow(10, 8);
            h.Move(Vector2.UnitY * 5);
            return h;
        }

        private float m_checkNeareastObjectTime = 0f;
        private IObject m_neareastObject;
        private IObject GetNeareastObject(GravityGun gun)
        {
            if (ScriptHelper.IsElapsed(m_checkNeareastObjectTime, 30))
            {
                m_checkNeareastObjectTime = Game.TotalElapsedGameTime;
                m_neareastObject = SearchNearestObject(gun);
            }
            return m_neareastObject;
        }

        private IObject SearchNearestObject(GravityGun gun)
        {
            var holdPosition = gun.GetHoldPosition(false);
            var filterArea = ScriptHelper.GrowFromCenter(
                holdPosition + Vector2.UnitX * Player.FacingDirection * GravityGun.Range / 2, GravityGun.Range);
            IObject nearestObject = null;

            foreach (var obj in Game.GetObjectsByArea(filterArea))
            {
                var rangeLimit = GetRangeLimit();
                var objPosition = obj.GetWorldPosition();

                if (ScriptHelper.IsDynamicObject(obj)
                    && !GravityGun.Blacklist.Contains(obj.Name)
                    && ScriptHelper.IntersectCircle(obj.GetAABB(), holdPosition, GravityGun.Range, rangeLimit[0], rangeLimit[1])
                    && !GetMimimumRange().Intersects(obj.GetAABB())
                    && (nearestObject == null || Rank(nearestObject, obj) == 1))
                {
                    var rcInput = new RayCastInput()
                    {
                        ClosestHitOnly = true,
                        FilterOnMaskBits = true,
                        MaskBits = CategoryBits.StaticGround,
                    };
                    var results = Game.RayCast(holdPosition, objPosition, rcInput);

                    if (results.Count() > 0 && results.First().HitObject != null)
                    {
                        var result = results.First();
                        var closestStaticObjPosition = result.Position;

                        if (Vector2.DistanceSquared(holdPosition, objPosition) <
                            Vector2.DistanceSquared(holdPosition, closestStaticObjPosition))
                        {
                            nearestObject = obj;
                        }
                    }
                    else
                        nearestObject = obj;
                }
            }

            return nearestObject;
        }

        // Higher weight means the object with that collision group deals more damage generally
        private static readonly Dictionary<ushort, int> CollisionCategoryWeight = new Dictionary<ushort, int>()
        {
            { CategoryBits.DynamicG2, 0 },
            { CategoryBits.Dynamic, 1 },
            { CategoryBits.DynamicG1, 2 },
        };

        private int Rank(IObject o1, IObject o2)
        {
            var o1c = o1.GetCollisionFilter().CategoryBits;
            var o2c = o2.GetCollisionFilter().CategoryBits;
            var s1 = o1.GetAABB().Width * o1.GetAABB().Height;
            var s2 = o2.GetAABB().Width * o2.GetAABB().Height;

            if (CollisionCategoryWeight[o1c] < CollisionCategoryWeight[o2c])
                return 1;
            if (o2.GetMass() > o1.GetMass())
                return 1;
            if (s2 > s1)
                return 1;
            return -1;
        }

        private float m_aimCheckTime;
        private Vector2 m_aimDirection = Vector2.Zero;
        private bool MaybeLockTarget(GravityGun gun, IObject obj)
        {
            if (m_aimDirection == Vector2.Zero)
            {
                m_aimDirection = Player.AimVector;
                return false; // init
            }

            if (ScriptHelper.IsElapsed(m_aimCheckTime, 15))
            {
                var aimDirection = Player.AimVector;
                if (Math.Abs(ScriptHelper.GetAngle(aimDirection) - ScriptHelper.GetAngle(m_aimDirection)) < MathExtension.OneDeg)
                {
                    return true;
                }
                m_aimDirection = aimDirection;
                m_aimCheckTime = Game.TotalElapsedGameTime;
            }
            return false;
        }

        private bool IsObjectInRange(GravityGun gun, IObject obj)
        {
            var holdPosition = gun.GetHoldPosition(false);
            var rcInput = new RayCastInput()
            {
                MaskBits = (ushort)(gun.IsSupercharged ? CategoryBits.Dynamic + CategoryBits.Player : CategoryBits.Dynamic),
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(holdPosition, holdPosition + Player.AimVector * GravityGun.Range, rcInput);
            Game.DrawLine(holdPosition, holdPosition + Player.AimVector * GravityGun.Range);

            foreach (var result in results)
            {
                if (result.ObjectID == obj.UniqueID)
                    return true;
            }
            return false;
        }

        private float m_objStuckCheckTime;
        private Vector2 m_oldObjPosition = Vector2.Zero;
        private bool IsObjectStuck(IObject obj)
        {
            if (m_oldObjPosition == Vector2.Zero)
            {
                m_oldObjPosition = obj.GetWorldPosition();
                return false; // init
            }

            if (ScriptHelper.IsElapsed(m_objStuckCheckTime, 60))
            {
                var currentPosition = obj.GetWorldPosition();
                if (Vector2.Distance(currentPosition, m_oldObjPosition) < .5f)
                {
                    return true;
                }
                m_oldObjPosition = currentPosition;
                m_objStuckCheckTime = Game.TotalElapsedGameTime;
            }
            return false;
        }

        private bool IsPlayerInRange(GravityGun gun, IPlayer player)
        {
            if (player == null) return false;

            var holdPosition = gun.GetHoldPosition(false);
            var rcInput = new RayCastInput()
            {
                MaskBits = CategoryBits.Player,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(Bot.Position, Bot.Position + Player.AimVector * GravityGun.Range * 4, rcInput);
            foreach (var result in results)
            {
                if (result.ObjectID == player.UniqueID)
                    return true;
            }
            return false;
        }

        private float m_checkEnemyTime = 0f;
        private IEnumerable<IPlayer> m_searchedEnemies = new List<IPlayer>();
        private IEnumerable<IPlayer> SearchedEnemies
        {
            get
            {
                if (ScriptHelper.IsElapsed(m_checkEnemyTime, 80))
                {
                    m_checkEnemyTime = Game.TotalElapsedGameTime;
                    var rangeLimit = GetRangeLimit();

                    m_searchedEnemies = RayCastHelper.GetFirstPlayerInRange(Player, GravityGun.Range * 4, rangeLimit[0], rangeLimit[1],
                        true, Player.GetTeam(), Player);
                }
                return m_searchedEnemies;
            }
        }
    }
    class CindyBot : Bot
    {
        public CindyBot(BotArgs args) : base(args) { }

        public override void OnPickedupWeapon(PlayerWeaponAddedArg arg)
        {
            base.OnPickedupWeapon(arg);

            if (arg.WeaponItemType == WeaponItemType.Handgun
                && ProjectileManager.GetOrCreatePlayerWeapon(Player).Secondary.Powerup != RangedWeaponPowerup.Stun)
            {
                ProjectileManager.SetPowerup(Player, arg.WeaponItem, RangedWeaponPowerup.Stun);
            }
        }
    }
    public abstract class Controller<T> where T : Bot
    {
        public T Actor { get; set; }
        public IPlayer Player { get { return Actor.Player; } }
        public abstract void OnUpdate(float elapsed);
        public virtual void OnDamage(IPlayer attacker, PlayerDamageArgs args) { }
    }
    class CowboyBot : Bot
    {
        public float DisarmChance { get; set; }
        public float CritDisarmChance { get; set; }
        public float DestroyWeaponWhenDisarmChance { get; set; }
        public float DestroyWeaponWhenCritDisarmChance { get; set; }

        public CowboyBot(BotArgs args) : base(args)
        {
            if (Info.IsBoss)
            {
                DisarmChance = Game.IsEditorTest ? 1f : .35f;
                CritDisarmChance = Game.IsEditorTest ? 1f : .65f;
                DestroyWeaponWhenDisarmChance = Game.IsEditorTest ? 0f : .15f;
                DestroyWeaponWhenCritDisarmChance = Game.IsEditorTest ? 0f : .35f;
            }
            else
            {
                DisarmChance = Game.IsEditorTest ? 1f : .15f;
                CritDisarmChance = Game.IsEditorTest ? 1f : .15f;
                DestroyWeaponWhenDisarmChance = Game.IsEditorTest ? 1f : 0f;
                DestroyWeaponWhenCritDisarmChance = .01f;
            }
        }
    }
    class CyborgBot : RobotBot
    {
        public CyborgBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            ChangeStatusColor("ClothingLightGreen");
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);
            UpdateHealthStatusColor();
        }

        private string m_healthColor = "";
        private void UpdateHealthStatusColor()
        {
            var mod = Player.GetModifiers();
            var healthLeft = mod.CurrentHealth / mod.MaxHealth;

            if (healthLeft > .4f && healthLeft <= .6f)
            {
                if (m_healthColor != "ClothingLightYellow") ChangeStatusColor("ClothingLightYellow");
            }
            else if (healthLeft > .2f && healthLeft <= .4f)
            {
                if (m_healthColor != "ClothingLightOrange") ChangeStatusColor("ClothingLightOrange");
            }
            else if (healthLeft <= .2f)
                if (m_healthColor != "ClothingLightRed") ChangeStatusColor("ClothingLightRed");
        }

        private void ChangeStatusColor(string color)
        {
            var profile = Player.GetProfile();
            profile.Accesory.Color2 = color;
            Player.SetProfile(profile);
            m_healthColor = color;
        }
    }
    class EngineerBot : Bot
    {
        private static readonly HashSet<WeaponItem> BuildItems = new HashSet<WeaponItem>()
        {
            WeaponItem.LEAD_PIPE,
            WeaponItem.PIPE,
            WeaponItem.HAMMER,
        };

        public static readonly float CreateNewCooldownTime = Game.IsEditorTest ? 3000 : 12000;

        private EngineerBot_Controller m_controller;
        private TurretPlaceholder m_placeholder;

        public EngineerBot(BotArgs args, EngineerBot_Controller controller) : base(args)
        {
            UpdateDelay = 0;

            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        private bool m_notifyCooldownOver = false;
        private float m_createNewTurretCooldown = 0f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);

            if (m_createNewTurretCooldown < CreateNewCooldownTime)
            {
                m_createNewTurretCooldown += elapsed;
            }
            else if (!m_notifyCooldownOver)
            {
                NotifyCooldownOver();
            }

            if (MaybeIsBuildingTurret())
            {
                UpdateBuildingProgress();
            }
            if (m_placeholder != null)
            {
                Game.DrawArea(m_placeholder.GetAABB());
                // Edge cases: player can be moved when standing on dynamic platforms
                if (!m_placeholder.GetAABB().Intersects(Player.GetAABB()) || m_placeholder.IsRemoved)
                    StopOccupying();
            }

            m_prevTotalAttackSwings = Player.Statistics.TotalMeleeAttackSwings;
        }

        private void NotifyCooldownOver()
        {
            var profile = Player.GetProfile();
            var originalColor = profile.Head.Color1;
            var flashCount = 20;

            for (uint i = 0; i < flashCount; i++)
            {
                var ii = i;

                ScriptHelper.Timeout(() =>
                {
                    var color = profile.Head.Color1;

                    if (color == "ClothingLightYellow")
                        color = "ClothingLightGray";
                    else
                        color = "ClothingLightYellow";

                    if (ii == flashCount-1)
                        color = originalColor;

                    profile.Head.Color1 = color;
                    Player.SetProfile(profile);
                }, 75 * ii);
            }
            m_notifyCooldownOver = true;
        }

        private int m_prevTotalAttackSwings = 0;
        private bool MaybeIsBuildingTurret()
        {
            if (Player.IsCrouching
                && m_prevTotalAttackSwings != Player.Statistics.TotalMeleeAttackSwings
                && IsHoldingEquipment)
            {
                return true;
            }
            return false;
        }

        public bool HasEnoughEnergy
        {
            get { return m_createNewTurretCooldown >= CreateNewCooldownTime; }
        }

        public bool HasEquipment { get { return BuildItems.Contains(Player.CurrentMeleeWeapon.WeaponItem); } }
        private bool IsHoldingEquipment
        {
            get
            {
                return HasEquipment
                    && Player.CurrentWeaponDrawn == WeaponItemType.Melee
                    && Player.CurrentMeleeMakeshiftWeapon.WeaponItem == WeaponItem.NONE;
            }
        }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (m_controller != null)
                m_controller.OnDroppedWeapon(arg);
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            if (m_controller != null)
                m_controller.OnDamage(attacker, args);
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);
            StopOccupying();
        }

        private bool IsNearEdge()
        {
            var start = Position;
            var scanLines = new List<Vector2[]>();
            var deg70 = 1.22173f;

            scanLines.Add(new Vector2[] { start, start - Vector2.UnitY * 5 });
            scanLines.Add(new Vector2[] { start, start - Vector2.UnitY * 5 + Vector2.UnitX * (float)(5 / Math.Cos(deg70)) });
            scanLines.Add(new Vector2[] { start, start - Vector2.UnitY * 5 - Vector2.UnitX * (float)(5 / Math.Cos(deg70)) });

            var rayCastInput = new RayCastInput()
            {
                MaskBits = CategoryBits.StaticGround,
                FilterOnMaskBits = true,
            };

            var hitCount = 0;
            foreach (var l in scanLines)
            {
                var results = Game.RayCast(l[0], l[1], rayCastInput);
                Game.DrawLine(l[0], l[1]);

                foreach (var result in results)
                {
                    if (result.HitObject.GetBodyType() == BodyType.Static
                        && ScriptHelper.IsIndestructible(result.HitObject)
                        && !RayCastHelper.ObjectsBulletCanDestroy.Contains(result.HitObject.Name))
                    {
                        hitCount++;break;
                    }
                }
            }
            return hitCount < 3;
        }

        public bool CanBuildTurretHere()
        {
            if (IsNearEdge())
                return false;

            return true;
        }

        public bool CreateNewTurret()
        {
            if (HasEnoughEnergy)
            {
                if (!CanBuildTurretHere())
                {
                    Game.PlayEffect(EffectName.CustomFloatText, Position, "Cannot build here");
                    return false;
                }

                var direction = Player.FacingDirection == -1 ? TurretDirection.Left : TurretDirection.Right;
                m_placeholder = WeaponManager.CreateTurretPlaceholder(Player, direction);
                m_createNewTurretCooldown = 0f;
                m_notifyCooldownOver = false;
                return true;
            }
            else
            {
                Game.PlayEffect(EffectName.CustomFloatText, Position, "Not enough energy");
                return false;
            }
        }

        public bool IsOccupying { get { return m_placeholder != null; } }

        private void StopOccupying()
        {
            m_buildProgress = 0;

            if (m_placeholder != null)
            {
                WeaponManager.RemoveBuilderFromTurretPlaceholder(m_placeholder.UniqueID);
                m_placeholder = null;
            }
        }

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            foreach (var keyInfo in keyInfos)
            {
                if (Player.KeyPressed(VirtualKey.CROUCH_ROLL_DIVE))
                {
                    if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT)
                    {
                        if (BuildItems.Contains(Player.CurrentMeleeWeapon.WeaponItem))
                            CreateNewTurret();
                    }
                }
            }
        }

        private float m_hitCooldown = 0f; // Prevent player spamming attack combo to speedup building progress
        private int m_buildProgress = 0;
        private static readonly int MaxProgress = Game.IsEditorTest ? 8 : 6;
        public float BuildProgress { get { return m_buildProgress / (float)MaxProgress ; } }
        private void UpdateBuildingProgress()
        {
            if (!MakeSurePlaceHolderExists())
                return;

            if (ScriptHelper.IsElapsed(m_hitCooldown, 500))
            {
                m_hitCooldown = Game.TotalElapsedGameTime;

                if (m_placeholder == null)
                    return;

                var hitPosition = Position + Vector2.UnitX * Player.GetFaceDirection() * 12;
                Game.PlayEffect(EffectName.BulletHitMetal, hitPosition);
                Game.PlaySound("ImpactMetal", hitPosition);

                m_buildProgress++;
                m_placeholder.BuildProgress = BuildProgress;

                if (m_buildProgress >= MaxProgress)
                {
                    WeaponManager.SpawnTurret(Player, m_placeholder.Position, m_placeholder.Direction);

                    if (m_controller != null)
                        m_controller.OnBuildCompleted();

                    m_placeholder.Remove();
                    StopOccupying();
                }
            }
        }

        private bool MakeSurePlaceHolderExists()
        {
            if (m_placeholder != null) return true;

            var untouchPlaceholders = WeaponManager.GetUntouchedTurretPlaceholders();

            if (untouchPlaceholders.Count() > 0)
            {
                foreach (var p in untouchPlaceholders)
                {
                    if (p.Value.Placeholder.GetAABB().Intersects(Player.GetAABB()))
                    {
                        m_placeholder = p.Value.Placeholder;
                        m_buildProgress = (int)Math.Round(m_placeholder.BuildProgress * MaxProgress);
                        WeaponManager.AddBuilderToTurretPlaceholder(m_placeholder.UniqueID, Player);
                        return true;
                    }
                }
            }

            return false;
        }
    }
    class EngineerBot_Controller : Controller<EngineerBot>
    {
        public bool IsBuilding { get { return m_state == EngineerState.Building; } }

        private Area DangerArea
        {
            get
            {
                return new Area(
                    Actor.Position - Vector2.UnitX * 30 - Vector2.UnitY * 5,
                    Actor.Position + Vector2.UnitX * 30 + Vector2.UnitY * 18);
            }
        }

        private Vector2[] ScanLine(float angle)
        {
            var start = Actor.Position + Vector2.UnitY * 9; // same height as turret's tip
            var end = start + ScriptHelper.GetDirection(angle) * 200;
            return new Vector2[] { start, end };
        }

        private List<Vector2[]> ScanLines
        {
            get
            {
                return new List<Vector2[]>()
                {
                    ScanLine(0),
                    ScanLine(MathHelper.PI),
                };
            }
        }

        enum EngineerState
        {
            Normal,
            Analyzing,
            GoingToPlaceholder,
            PreBuilding,
            Building,
        }
        private EngineerState m_state = EngineerState.Normal;

        private enum AvailableTurretDirection
        {
            None,
            Left,
            Right,
        }

        private AvailableTurretDirection m_availableDirection = AvailableTurretDirection.None;

        public void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            if (!Actor.HasEquipment)
            {
                StopBuilding();
            }
        }

        private float m_analyzePlaceCooldown = 0f;

        public override void OnUpdate(float elapsed)
        {
            Actor.LogDebug(m_state, Actor.BuildProgress);

            switch (m_state)
            {
                case EngineerState.Normal:
                    if (Actor.HasEnoughEnergy && Actor.HasEquipment)
                        m_state = EngineerState.Analyzing;
                    break;
                case EngineerState.Analyzing:
                    if (ScriptHelper.IsElapsed(m_analyzePlaceCooldown, 300))
                    {
                        m_analyzePlaceCooldown = Game.TotalElapsedGameTime;

                        if (CheckExistingPlaceholder())
                            GoToExistingPlaceholder();
                        else if (ShouldBuildTurretHere())
                            StartBuildingTurret();
                    }
                    break;
                case EngineerState.GoingToPlaceholder:
                    CheckArriveTargetPlaceholder();
                    break;
                case EngineerState.PreBuilding:
                    UpdatePrebuilding(elapsed);
                    break;
                case EngineerState.Building:
                    UpdateBuildingTurret();
                    break;
            }
        }

        private float m_damageTakenWhileBuilding = 0f;
        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            if (IsBuilding)
            {
                m_damageTakenWhileBuilding += args.Damage;

                if (m_damageTakenWhileBuilding >= 20)
                {
                    StopBuilding();
                    m_damageTakenWhileBuilding = 0;
                }
            }
        }

        private bool IsAttacked
        {
            get
            {
                return Player.IsStaggering || Player.IsCaughtByPlayerInDive || Player.IsStunned
                    || Player.IsFalling || Player.IsBurningInferno;
            }
        }
        private bool IsInactive
        {
            get { return (Player.IsIdle || Player.IsWalking) && !Player.IsInMidAir && !IsAttacked; }
        }
        private bool CanBuildTurretNow { get { return Actor.HasEquipment && IsInactive; } }
        private bool ShouldBuildTurretHere()
        {
            if (!CanBuildTurretNow)
                return false;

            if (!Actor.CanBuildTurretHere())
                return false;

            m_availableDirection = AvailableTurretDirection.None;
            var prioritizedDirection = Player.FacingDirection == 1 ? AvailableTurretDirection.Right : AvailableTurretDirection.Left;
            for (var i = 0; i < ScanLines.Count; i++)
            {
                var scanLine = ScanLines[i];
                Game.DrawLine(scanLine[0], scanLine[1], Color.Yellow);
                if (RayCastHelper.ImpassableObjects(scanLine[0], scanLine[1]).Count() == 0)
                {
                    m_availableDirection = i == 0 ? AvailableTurretDirection.Right : AvailableTurretDirection.Left;
                    if (m_availableDirection == prioritizedDirection)
                        break;
                }
            }
            if (m_availableDirection == AvailableTurretDirection.None) return false;

            // Uncomment if Engineer is too OP
            // foreach (var bot in BotManager.GetBots<EngineerBot>())
            // {
            //     if (bot.IsBuilding) return false;
            // }

            // Don't build turret when enemies are nearby
            foreach (var bot in BotManager.GetBots())
            {
                if (!ScriptHelper.SameTeam(Player, bot.Player))
                {
                    if (DangerArea.Intersects(bot.Player.GetAABB()))
                        return false;
                }
            }

            foreach (var turret in WeaponManager.GetWeapons<Turret>())
            {
                if (turret.Broken) continue;

                var area = new Area(
                    turret.Position + Vector2.UnitX * 32 * turret.Direction + Vector2.UnitY * 7,
                    turret.Position - Vector2.UnitX * 20 * turret.Direction - Vector2.UnitY * 14);
                area.Normalize();
                Game.DrawArea(area);
                //ScriptHelper.LogDebug(area, area.Intersects(player.GetAABB()));
                if (area.Intersects(Player.GetAABB()))
                    return false;

                if (ScriptHelper.IntersectCircle(Actor.Position, turret.Position, 275, turret.MinAngle, turret.MaxAngle))
                    return false;
            }

            return true;
        }

        private TurretPlaceholder m_targetPlaceholder = null;
        private bool CheckExistingPlaceholder()
        {
            var untouchPlaceholders = WeaponManager.GetUntouchedTurretPlaceholders();

            if (untouchPlaceholders.Count() > 0)
            {
                var minDistanceToPlaceholder = float.PositiveInfinity;
                foreach (var p in untouchPlaceholders)
                {
                    var distanceToPlayer = Vector2.Distance(p.Value.Placeholder.Position, Actor.Position);
                    if (minDistanceToPlaceholder > distanceToPlayer)
                    {
                        minDistanceToPlaceholder = distanceToPlayer;
                        m_targetPlaceholder = p.Value.Placeholder;
                    }
                }
            }

            return m_targetPlaceholder != null;
        }

        private void GoToExistingPlaceholder()
        {
            var bs = Player.GetBotBehaviorSet();

            Player.SetGuardTarget(m_targetPlaceholder.RepresentedObject);
            bs.GuardRange = 1f;
            bs.ChaseRange = 1f;
            Player.SetBotBehaviorSet(bs);
            m_state = EngineerState.GoingToPlaceholder;
        }

        private void CheckArriveTargetPlaceholder()
        {
            if (m_targetPlaceholder.GetAABB().Intersects(Player.GetAABB()) && Actor.HasEquipment)
            {
                // At the time the builder arrives, another builder may arrived first and already started building
                if (!WeaponManager.GetUntouchedTurretPlaceholders()
                    .Where((p) => p.Key == m_targetPlaceholder.UniqueID)
                    .Any())
                {
                    if (!IsInactive)
                    {
                        m_state = EngineerState.Analyzing;
                    }
                    else
                    {
                        if (!ShouldBuildTurretHere())
                        {
                            Player.SetGuardTarget(null);
                            m_state = EngineerState.Normal;
                        }
                    }
                }
                else
                    StartBuildingTurret(m_targetPlaceholder.Direction);
            }
        }

        private void StartBuildingTurret()
        {
            if (m_availableDirection == AvailableTurretDirection.None) return;
            var direction = m_availableDirection == AvailableTurretDirection.Left ? TurretDirection.Left : TurretDirection.Right;
            StartBuildingTurret(direction);
        }
        private void StartBuildingTurret(TurretDirection direction)
        {
            Player.SetInputEnabled(false);
            if (Player.CurrentWeaponDrawn != WeaponItemType.Melee)
                Player.AddCommand(new PlayerCommand(PlayerCommandType.DrawMelee));
            Player.AddCommand(new PlayerCommand(PlayerCommandType.Walk, direction == TurretDirection.Left ?
                PlayerCommandFaceDirection.Left : PlayerCommandFaceDirection.Right, 10));

            m_state = EngineerState.PreBuilding;
        }

        private float m_prepareTimer = 0f;
        private void UpdatePrebuilding(float elapsed)
        {
            if (IsAttacked)
                StopBuilding();

            if (Player.IsIdle)
            {
                // Wait for the player to walk to position. If execute StartCrouch immediately, player will roll instead
                // WaitDestinationReached not working btw
                m_prepareTimer += elapsed;
                if (m_prepareTimer >= 150)
                {
                    Player.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch));

                    if (m_targetPlaceholder == null)
                    {
                        m_state = EngineerState.Building;
                        m_prepareTimer = 0f;
                        Actor.CreateNewTurret();
                    }
                    else
                    {
                        // Execute first hit before changing state to occupy placeholder
                        Player.AddCommand(new PlayerCommand(PlayerCommandType.AttackOnce));
                        ScriptHelper.Timeout(() =>
                        {
                            m_state = EngineerState.Building;
                            m_prepareTimer = 0f;
                        }, HitTime);
                    }
                }
            }
        }

        private void StopBuilding()
        {
            m_hitTimer = 0f;
            m_targetPlaceholder = null;

            Player.AddCommand(new PlayerCommand(PlayerCommandType.StopCrouch));
            Player.SetInputEnabled(true);
            m_state = EngineerState.Normal;
        }

        private float m_hitTimer = 0f;
        private static readonly uint HitTime = 700;
        private void UpdateBuildingTurret()
        {
            if (IsAttacked || !Actor.IsOccupying)
            {
                StopBuilding(); return;
            }

            if (ScriptHelper.IsElapsed(m_hitTimer, HitTime))
            {
                Player.AddCommand(new PlayerCommand(PlayerCommandType.AttackOnce));
                m_hitTimer = Game.TotalElapsedGameTime;
            }
        }

        public void OnBuildCompleted() { StopBuilding(); }
    }
    class FunnymanBot : Bot
    {
        private Controller<FunnymanBot> m_controller;

        public FunnymanBot(BotArgs args, Controller<FunnymanBot> controller) : base(args)
        {
            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);
        }
    }
    class FunnymanBot_Controller : Controller<FunnymanBot>
    {
        private Area SafeArea(Vector2 spawnPosition) { return ScriptHelper.GrowFromCenter(spawnPosition, 60, 30); }
        private IObject m_targetLocation = null;

        enum State
        {
            Normal,
            Fleeing,
        }
        private State m_state;
        private float m_stateDelay = 0f;
        private float m_totalDamage = 0f;

        public override void OnUpdate(float elapsed)
        {
            switch (m_state)
            {
                case State.Normal:
                {
                    if (ScriptHelper.IsElapsed(m_stateDelay, 2000))
                    {
                        if (Player.Statistics.TotalDamageTaken - m_totalDamage >= (Game.IsEditorTest ? 1 : 30))
                        {
                            TryToFlee();
                        }

                        m_stateDelay = Game.TotalElapsedGameTime;
                        m_totalDamage = Player.Statistics.TotalDamageTaken;
                    }
                    break;
                }
                case State.Fleeing:
                {
                    if (!ScriptHelper.IsElapsed(m_stateDelay, 30))
                        break;
                    m_stateDelay = Game.TotalElapsedGameTime;

                    if (EnemiesInArea(SafeArea(m_targetLocation.GetWorldPosition())))
                    {
                        TryToFlee(); // search for a new location
                        break;
                    }

                    if (Player.GetAABB().Intersects(m_targetLocation.GetAABB()))
                    {
                        if (EnemiesInArea(DangerArea))
                            TryToFlee();
                        else
                            StopFleeing();
                    }
                    break;
                }
            }

            Actor.LogDebug(m_state, Player.Statistics.TotalDamageTaken - m_totalDamage);
            if (m_targetLocation != null)
            {
                Game.DrawArea(m_targetLocation.GetAABB(), Color.Green);
                //Game.DrawArea(SafeArea(m_targetLocation.GetWorldPosition()), Color.Red);
            }
            Game.DrawArea(DangerArea, Color.Cyan);
        }

        private void ChangeState(State state)
        {
            m_state = state;
            m_stateDelay = Game.TotalElapsedGameTime;
        }

        private static readonly PlayerModifiers RunningModifiers;
        static FunnymanBot_Controller()
        {
            RunningModifiers = GetInfo(BotType.Funnyman).Modifiers;
            RunningModifiers.RunSpeedModifier = Speed.Fast;
            RunningModifiers.SprintSpeedModifier = Speed.Fast;
            RunningModifiers.EnergyConsumptionModifier = 0;
        }

        private Area DangerArea
        {
            get { return ScriptHelper.GrowFromCenter(Player.GetAABB().Center, 50, 30); }
        }

        private bool EnemiesInArea(Area area)
        {
            foreach (var player in Game.GetPlayers())
            {
                if (!ScriptHelper.SameTeam(Player, player))
                {
                    if (area.Intersects(player.GetAABB()))
                        return true;
                }
            }
            return false;
        }

        private static int removeme = 0;
        private void TryToFlee()
        {
            m_targetLocation = null;

            foreach (var spawner in Game.GetObjectsByName("SpawnPlayer"))
            {
                var safeArea = SafeArea(spawner.GetWorldPosition());
                var enemiesNearSpawner = Game.GetObjectsByArea<IPlayer>(safeArea).Any(p => !ScriptHelper.SameTeam(Player, p));

                if (!enemiesNearSpawner)
                {
                    var pathNode = Game.GetSingleObjectByArea<IObjectPathNode>(spawner.GetAABB(), PhysicsLayer.Background);
                    if (pathNode == null) continue;

                    Game.DrawArea(safeArea, Color.Magenta);
                    if (m_targetLocation == null)
                        m_targetLocation = pathNode;
                    else if (m_targetLocation != null && Vector2.DistanceSquared(m_targetLocation.GetWorldPosition(), Actor.Position)
                        > Vector2.DistanceSquared(pathNode.GetWorldPosition(), Actor.Position))
                        m_targetLocation = pathNode;
                }
            }

            if (m_targetLocation != null)
            {
                var runningBehavior = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.FunnymanRunning);

                runningBehavior.GuardRange = 1f;
                runningBehavior.ChaseRange = 1f;
                Player.SetBotBehaviorSet(runningBehavior);
                Actor.SetModifiers(RunningModifiers);
                Player.SetGuardTarget(m_targetLocation);
                ChangeState(State.Fleeing);
            }
        }

        private void StopFleeing()
        {
            Actor.ResetBotBehaviorSet();
            Actor.ResetModifiers();
            Player.SetGuardTarget(null);
            m_targetLocation = null;
            ChangeState(State.Normal);
        }
    }
    public class HackerBot : Bot
    {
        public HackerBot(BotArgs args) : base(args)
        {
            UpdateDelay = 200;
        }

        protected override void OnUpdate(float elapsed)
        {
            if (Player.IsRemoved) return;

            base.OnUpdate(elapsed);

            var profile = Player.GetProfile();
            var currentColor = profile.Head.Color2;
            var newColor = "";

            switch (currentColor)
            {
                case "ClothingLightRed":
                    newColor = "ClothingLightOrange";
                    break;
                case "ClothingLightOrange":
                    newColor = "ClothingLightYellow";
                    break;
                case "ClothingLightYellow":
                    newColor = "ClothingLightGreen";
                    break;
                case "ClothingLightGreen":
                    newColor = "ClothingLightCyan";
                    break;
                case "ClothingLightCyan":
                    newColor = "ClothingLightBlue";
                    break;
                case "ClothingLightBlue":
                    newColor = "ClothingLightPurple";
                    break;
                case "ClothingLightPurple":
                    newColor = "ClothingLightRed";
                    break;
                default:
                    newColor = "ClothingLightCyan";
                    break;
            }
            profile.Head.Color2 = newColor;
            profile.ChestOver.Color2 = newColor;
            profile.Feet.Color1 = newColor;
            Player.SetProfile(profile);
        }
    }
    public class IncineratorBot : Bot
    {
        public IncineratorBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();

            // TODO: move to BotBehavior
            var behavior = Player.GetBotBehaviorSet();
            behavior.SearchForItems = false;
            behavior.RangedWeaponPrecisionInterpolateTime = 0f;
            Player.SetBotBehaviorSet(behavior);
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (Player.CurrentPrimaryWeapon.WeaponItem == WeaponItem.FLAMETHROWER)
            {
                Game.SpawnFireNodes(Position, 20, 5f, FireNodeType.Flamethrower);
                Game.TriggerFireplosion(Position, 60f);
                Game.TriggerExplosion(Position);
            }
        }
    }
    public class KingpinBot : Bot
    {
        private Controller<KingpinBot> m_controller;
        private List<Bot> m_bodyguards = new List<Bot>();
        private const int BodyguardCount = 2;

        public KingpinBot(BotArgs args, Controller<KingpinBot> controller) : base(args)
        {
            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        private float m_crushEnemyTime = 0f;
        private float m_searchBodyguardTime = 0f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead) return;

            if (Game.IsEditorTest)
            {
                foreach (var bodyguard in m_bodyguards) Game.DrawArea(bodyguard.Player.GetAABB(), Color.Blue);
                LogDebug(m_bodyguards.Count);
            }

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);

            if (m_bodyguards.Count < BodyguardCount && ScriptHelper.IsElapsed(m_searchBodyguardTime, 975))
            {
                m_searchBodyguardTime = Game.TotalElapsedGameTime;
                SearchBodyguards();
            }

            foreach (var bodyguard in m_bodyguards.ToList()) if (bodyguard.Player.IsDead) m_bodyguards.Remove(bodyguard);

            // crush enemy while grabbing
            if (Player.IsHoldingPlayerInGrab && ScriptHelper.IsElapsed(m_crushEnemyTime, 120))
            {
                var enemy = Game.GetPlayer(Player.HoldingPlayerInGrabID);

                if (enemy != null)
                {
                    enemy.DealDamage(1.5f);
                    Game.PlayEffect(EffectName.MeleeHitBlunt, enemy.GetWorldPosition());
                    m_crushEnemyTime = Game.TotalElapsedGameTime;
                }
            }
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            foreach (var bodyguard in m_bodyguards) bodyguard.Player.SetGuardTarget(null);
        }

        private void SearchBodyguards()
        {
            Func<Bot, bool> isBodyguard = (Bot b) => b.Type == BotType.Bodyguard || b.Type == BotType.Bodyguard2 || b.Type == BotType.GangsterHulk;
            var bodyguards = BotManager.GetBots()
                .Where(b => !b.Player.IsDead && isBodyguard(b))
                .Take(BodyguardCount);

            foreach (var bodyguard in bodyguards)
            {
                var modifiers = bodyguard.Player.GetModifiers();
                modifiers.RunSpeedModifier += .1f;
                modifiers.SprintSpeedModifier += .1f;
                bodyguard.SetModifiers(modifiers, true);

                var bs = bodyguard.Player.GetBotBehaviorSet();
                bs.GuardRange = 30f;
                bs.ChaseRange = 32f;
                bodyguard.SetBotBehaviorSet(bs, true);
                bodyguard.Player.SetGuardTarget(Player);

                m_bodyguards.Add(bodyguard);
            }
        }
    }
    class KingpinBot_Controller : Controller<KingpinBot>
    {
        public override void OnUpdate(float elapsed)
        {
            if (Player.IsHoldingPlayerInGrab && Player.IsInputEnabled)
            {
                Player.SetInputEnabled(false);
            }

            if (Player.IsHoldingPlayerInGrab)
            {
                var grabbedPlayer = Game.GetPlayer(Player.HoldingPlayerInGrabID);
                if (grabbedPlayer == null || grabbedPlayer.IsDead)
                    Player.SetInputEnabled(true);
            }
            else
            {
                if (!Player.IsInputEnabled)
                    Player.SetInputEnabled(true);
            }
        }
    }
    public class KriegbärBot : Bot
    {
        public KriegbärBot(BotArgs args) : base(args) { }
        // TODO: add throwing ability
    }
    public class MechaBot : RobotBot
    {
        private static readonly List<string> DebrisList = new List<string> {
            "MetalDebris00A",
            "MetalDebris00B",
            "MetalDebris00C",
            "MetalDebris00D",
            "MetalDebris00E",
            "ItemDebrisDark00",
            "ItemDebrisDark01",
            "ItemDebrisShiny00",
            "ItemDebrisShiny01",
        };
        private static readonly List<string> WiringTubeList = new List<string> {
            "WiringTube00A",
            "WiringTube00A_D",
            "WiringTube00B",
        };

        enum MechaState
        {
            Normal,
            PreparingSupercharge,
            Supercharging,
            DealthKneeling,
        }

        private MechaState m_state;
        private Controller<MechaBot> m_controller;

        public MechaBot(BotArgs args, MechaBot_Controller controller) : base(args)
        {
            UpdateDelay = 0;
            m_state = MechaState.Normal;

            if (controller != null)
            {
                m_controller = controller;
                m_controller.Actor = this;
            }
        }

        public override void OnSpawn()
        {
            base.OnSpawn();

            var behavior = Player.GetBotBehaviorSet();
            behavior.SearchForItems = false;
            behavior.DefensiveAvoidProjectilesLevel = 0f;
            behavior.DefensiveBlockLevel = 0f;
            behavior.MeleeWeaponUsage = false;
            behavior.RangedWeaponUsage = false;

            Player.SetBotBehaviorSet(behavior);
        }

        protected override void OnUpdate(float elapsed)
        {
            if (Player == null || Player.IsRemoved) return;

            base.OnUpdate(elapsed);

            UpdateChargeStatusColor();

            if (m_controller != null)
                m_controller.OnUpdate(elapsed);

            switch (m_state)
            {
                case MechaState.Normal:
                    UpdateSuperChargeEnergy(elapsed);
                    break;
                case MechaState.PreparingSupercharge:
                    UpdatePrepareSuperCharge(elapsed);
                    break;
                case MechaState.Supercharging:
                    UpdateSuperCharging(elapsed);
                    break;
                case MechaState.DealthKneeling:
                    UpdateDealthKneeling(elapsed);
                    break;
            }
        }

        private float m_lastChargeEnergy;
        private void UpdateChargeStatusColor()
        {
            if (m_lastChargeEnergy < EnergyToCharge && m_superchargeEnergy >= EnergyToCharge)
            {
                var profile = Player.GetProfile();
                profile.Skin.Color2 = "ClothingLightGreen";
                Player.SetProfile(profile);
            }
            if (m_lastChargeEnergy > m_superchargeEnergy)
            {
                var profile = Player.GetProfile();
                profile.Skin.Color2 = "ClothingLightRed";
                Player.SetProfile(profile);
            }
            m_lastChargeEnergy = m_superchargeEnergy;
        }

        public readonly float EnergyToCharge = Game.IsEditorTest ? 3000f : 9000f;
        public bool IsSuperCharging { get { return m_state == MechaState.Supercharging || m_state == MechaState.PreparingSupercharge; } }
        private float m_superchargeEnergy = 0f;
        private float m_chargeTimer = 0f;
        private void UpdateSuperChargeEnergy(float elapsed)
        {
            if (m_superchargeEnergy < EnergyToCharge)
                m_superchargeEnergy += elapsed;

            Game.DrawText(string.Format("{0}/{1}", m_superchargeEnergy, EnergyToCharge), Position + Vector2.UnitY * 30);
        }

        private HashSet<int> chargedPlayers = new HashSet<int>();
        private HashSet<int> chargedObjects = new HashSet<int>();
        private void UpdateSuperCharging(float elapsed)
        {
            foreach (var player in Game.GetPlayers())
            {
                if (player == Player) continue;

                var position = player.GetWorldPosition();
                var angles = new float[] { MathExtension.ToRadians(25), MathExtension.ToRadians(65) };
                if (Player.FacingDirection < 0)
                    angles = ScriptHelper.Flip(angles, FlipDirection.Horizontal);

                if (ScriptHelper.IntersectCircle(player.GetAABB(), Position, ChargeHitRange)
                    && !chargedPlayers.Contains(player.UniqueID))
                {
                    Game.PlayEffect(EffectName.Electric, position);
                    Game.PlaySound("ElectricSparks", position);
                    var direction = RandomHelper.Direction(angles[0], angles[1], true);
                    player.SetLinearVelocity(direction * 15f);
                    ScriptHelper.ExecuteSingleCommand(player, PlayerCommandType.Fall);
                    chargedPlayers.Add(player.UniqueID);
                }
            }

            var area = Player.GetAABB();
            area.Grow(4);
            foreach (var obj in Game.GetObjectsByArea(area))
            {
                if (obj.UniqueID == Player.UniqueID || chargedObjects.Contains(obj.UniqueID) || ScriptHelper.IsPlayer(obj))
                    continue;

                if (ScriptHelper.IsDynamicObject(obj) || RayCastHelper.ObjectsBulletCanDestroy.Contains(obj.Name))
                {
                    if (ScriptHelper.IntersectCircle(obj.GetWorldPosition(), Position, ChargeHitRange))
                    {
                        var v = obj.GetLinearVelocity();
                        obj.SetLinearVelocity(v + Vector2.UnitX * Player.FacingDirection * 25);
                        obj.SetHealth(obj.GetHealth() - 3);
                        chargedObjects.Add(obj.UniqueID);
                    }
                }
            }

            Game.PlayEffect(EffectName.FireNodeTrailAir, Position + new Vector2(-4, -4));
            Game.PlayEffect(EffectName.FireNodeTrailAir, Position + new Vector2(4, -4));

            m_chargeTimer += elapsed;
            if (m_chargeTimer >= 1500)
            {
                StopSuperCharge();
                m_chargeTimer = 0f;
            }
        }

        public bool CanSuperCharge()
        {
            return m_state == MechaState.Normal && m_superchargeEnergy >= EnergyToCharge && !Player.IsInMidAir;
        }

        public static readonly float ChargeHitRange = 25f;

        public override void OnPlayerKeyInput(VirtualKeyInfo[] keyInfos)
        {
            base.OnPlayerKeyInput(keyInfos);

            foreach (var keyInfo in keyInfos)
            {
                if (keyInfo.Event == VirtualKeyEvent.Pressed && keyInfo.Key == VirtualKey.SPRINT
                    && Player.KeyPressed(VirtualKey.CROUCH_ROLL_DIVE))
                {
                    ExecuteSupercharge();
                }
            }
        }

        public void ExecuteSupercharge()
        {
            if (CanSuperCharge())
                PrepareSuperCharge();
            else if (m_superchargeEnergy < EnergyToCharge)
                Game.PlayEffect(EffectName.CustomFloatText, Position, "Not enough fuel");
        }

        private void PrepareSuperCharge()
        {
            m_state = MechaState.PreparingSupercharge;
            Player.SetInputEnabled(false);
            Player.AddCommand(new PlayerCommand(PlayerCommandType.StartCrouch));
        }

        private float m_kneelPrepareTime = 0f;
        private float m_kneelPrepareEffectTime = 0f;
        private void UpdatePrepareSuperCharge(float elapsed)
        {
            m_kneelPrepareTime += elapsed;

            if (m_kneelPrepareTime >= 500)
            {
                Player.AddCommand(new PlayerCommand(PlayerCommandType.StopCrouch));
                m_kneelPrepareTime = 0f;

                StartSuperCharge();
            }
            else
            {
                m_kneelPrepareEffectTime += elapsed;
                if (m_kneelPrepareEffectTime >= 90)
                {
                    var pos = Position + Vector2.UnitX * -Player.FacingDirection * 10;
                    Game.PlayEffect(EffectName.Electric, pos);
                    Game.PlaySound("ElectricSparks", pos);
                    m_kneelPrepareEffectTime = 0f;
                }
            }
        }

        private void StartSuperCharge()
        {
            Player.SetLinearVelocity(Vector2.UnitY * 6);
            ScriptHelper.Timeout(() => Player.SetLinearVelocity(
                Vector2.UnitX * Player.FacingDirection * 16f +
                Vector2.UnitY * 3), 30);

            Game.PlayEffect(EffectName.FireNodeTrailGround, Position + new Vector2(-4, -4));
            Game.PlaySound("Flamethrower", Position);
            m_state = MechaState.Supercharging;
        }

        private void StopSuperCharge()
        {
            Player.SetInputEnabled(true);
            m_superchargeEnergy = 0f;
            chargedPlayers.Clear();
            chargedObjects.Clear();
            m_state = MechaState.Normal;
        }

        public override void OnDamage(IPlayer attacker, PlayerDamageArgs args)
        {
            base.OnDamage(attacker, args);

            var mod = Player.GetModifiers();
            var currentHealth = mod.CurrentHealth;
            var maxHealth = mod.MaxHealth;

            if (currentHealth / maxHealth <= 0.25f)
            {
                Game.PlayEffect(EffectName.Electric, Position);
                Game.PlaySound("ElectricSparks", Position);
            }
        }

        // After the player died, a double body is used for death animation and is the actual body after that
        // the original body is Removed since you cannot "unkill" a player to add additional commands for death animation
        private bool m_useDoubleBody = false;
        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            if (Player == null) return;

            var selfDestructed = false;

            if (args.Removed)
            {
                SelfDestruct(); selfDestructed = true;
            }
            else
            {
                if (RandomHelper.Boolean())
                {
                    SelfDestruct(); selfDestructed = true;
                }
            }
            if (!m_useDoubleBody && !selfDestructed)
            {
                var doubleBody = Game.CreatePlayer(Position);

                Decorate(doubleBody);
                var newMod = doubleBody.GetModifiers();
                newMod.CurrentHealth = newMod.MaxHealth;

                doubleBody.SetModifiers(newMod);
                doubleBody.SetValidBotEliminateTarget(false);
                doubleBody.SetStatusBarsVisible(false);
                doubleBody.SetNametagVisible(false);
                doubleBody.SetFaceDirection(Player.GetFaceDirection());

                // reset CustomID so when call Player.Remove() it will not called OnDeath() again for the old body
                doubleBody.CustomID = Player.CustomID;
                Player.CustomID = "";
                Player.Remove();
                Player = doubleBody;

                m_useDoubleBody = true;
                StartDeathKneeling();
            }
        }

        private void Decorate(IPlayer existingPlayer)
        {
            existingPlayer.SetProfile(Player.GetProfile());

            existingPlayer.GiveWeaponItem(Player.CurrentMeleeWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentMeleeMakeshiftWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentPrimaryWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentSecondaryWeapon.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentThrownItem.WeaponItem);
            existingPlayer.GiveWeaponItem(Player.CurrentPowerupItem.WeaponItem);

            existingPlayer.SetTeam(Player.GetTeam());
            existingPlayer.SetModifiers(Player.GetModifiers());
            existingPlayer.SetHitEffect(Player.GetHitEffect());
        }

        private void SelfDestruct()
        {
            var effects = new List<Tuple<string, int>>() {
                    Tuple.Create(EffectName.BulletHitMetal, 1),
                    Tuple.Create(EffectName.Steam, 2),
                    Tuple.Create(EffectName.Electric, 4),
                };

            foreach (var effect in effects)
            {
                var effectName = effect.Item1;
                var count = effect.Item2;

                for (var i = 0; i < count; i++)
                {
                    var position = RandomHelper.WithinArea(Player.GetAABB());
                    Game.PlayEffect(effectName, position);
                }
            }

            Game.TriggerExplosion(Position);

            for (var i = 0; i < 4; i++)
            {
                var debrisLinearVelocity = RandomHelper.Direction(15, 165) * 10;
                var debris = Game.CreateObject(RandomHelper.GetItem(DebrisList),
                    Position,
                    0f,
                    debrisLinearVelocity,
                    0f);
                debris.SetMaxFire();

                Game.CreateObject(RandomHelper.GetItem(DebrisList),
                    Position,
                    0f,
                    debrisLinearVelocity * -Vector2.UnitX,
                    0f);

                if (RandomHelper.Boolean())
                {
                    Game.CreateObject(RandomHelper.GetItem(WiringTubeList),
                        Position,
                        0f,
                        RandomHelper.Direction(0, 180) * 6,
                        0f);
                }
            }
        }

        private void StartDeathKneeling()
        {
            if (Player == null) return;

            ScriptHelper.MakeInvincible(Player);
            Player.ClearCommandQueue();
            Player.SetBotBehaviorActive(false);
            Player.AddCommand(new PlayerCommand(PlayerCommandType.DeathKneelInfinite));
            m_state = MechaState.DealthKneeling;
        }
        private void StopKneelingAndDie()
        {
            // Make player damageable again, so it can be exploded when overkilled
            Player.SetModifiers(new PlayerModifiers(defaultValues: true)
            {
                SizeModifier = Info.Modifiers.SizeModifier,
            });
            Player.AddCommand(new PlayerCommand(PlayerCommandType.StopDeathKneel));
            Player.SetBotBehaviorActive(true);
            Player.Kill();
        }

        private float m_kneelingTime = 0f;
        private bool m_hasShotGrenades = false;
        private void UpdateDealthKneeling(float elapsed)
        {
            if (Player.IsDeathKneeling)
            {
                m_kneelingTime += elapsed;
                if (m_kneelingTime >= 600 && !m_hasShotGrenades)
                {
                    var grenadeDirection = new Vector2(Player.GetFaceDirection(), 1f);

                    for (uint i = 1; i <= 3; i++)
                    {
                        ScriptHelper.Timeout(() =>
                        {
                            if (Player.IsRemoved) return;
                            Game.PlaySound("GLauncher", Position);
                            Game.SpawnProjectile(ProjectileItem.GRENADE_LAUNCHER, Position + new Vector2(-5, 20), grenadeDirection);
                            grenadeDirection.X *= 2f;
                        }, 300 * i);
                    }
                    m_hasShotGrenades = true;
                }

                if (m_kneelingTime >= 2500)
                {
                    StopKneelingAndDie();
                }
            }
            else
            {
                if (!m_hasShotGrenades)
                {
                    StartDeathKneeling();
                    m_kneelingTime = 0f;
                }
                else
                {
                    StopKneelingAndDie();
                }
            }
        }
    }
    public class MechaBot_Controller : Controller<MechaBot>
    {
        private static readonly float ChargeMinimumRange = 30f;
        private static readonly float ChargeRange = 60;

        public override void OnUpdate(float elapsed)
        {
            if (Actor.CanSuperCharge())
            {
                if (ShouldSuperCharge())
                {
                    Actor.ExecuteSupercharge();
                }
            }

            DrawDebugging();
        }

        private Vector2[] GetLineOfSight()
        {
            var lineStart = Actor.Position + Vector2.UnitY * 12f;

            return new Vector2[]
            {
                lineStart,
                lineStart + Player.AimVector * (ChargeMinimumRange + ChargeRange),
            };
        }

        private bool ShouldSuperCharge()
        {
            return (Player.IsSprinting || Player.IsIdle || Player.IsWalking || Player.IsRunning)
                && HasTargetToCharge();
        }

        private bool HasTargetToCharge()
        {
            var los = GetLineOfSight();
            var lineStart = los[0];
            var lineEnd = los[1];

            foreach (var result in RayCastHelper.Players(lineStart, lineEnd))
            {
                var player = Game.GetPlayer(result.ObjectID);
                var inMinimumRange = ScriptHelper.IntersectCircle(
                    player.GetAABB(),
                    Actor.Position,
                    ChargeMinimumRange);

                if (!inMinimumRange && !player.IsDead && !player.IsInMidAir && !ScriptHelper.SameTeam(player, Player))
                {
                    return true;
                }
            }

            return false;
        }

        private void DrawDebugging()
        {
            if (!Game.IsEditorTest) return;
            var los = GetLineOfSight();

            Game.DrawCircle(Actor.Position, ChargeMinimumRange, Color.Red);
            Game.DrawCircle(Actor.Position, MechaBot.ChargeHitRange, Color.Cyan);
            if (Actor.CanSuperCharge())
            {
                Game.DrawLine(los[0], los[1], Color.Green);
            }
            else
                Game.DrawLine(los[0], los[1], Color.Red);
        }
    }
    class MirrorManBot : Bot
    {
        public MirrorManBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetHitEffect(PlayerHitEffect.Metal);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            PlayShinyEffect(elapsed);

            var primaryWeapon = Player.CurrentPrimaryWeapon;
            var secondaryWeapon = Player.CurrentSecondaryWeapon;

            if (primaryWeapon.PowerupBouncingRounds == 0 && primaryWeapon.TotalAmmo > 0)
            {
                Player.SetCurrentPrimaryWeaponAmmo(primaryWeapon.TotalAmmo, ProjectilePowerup.Bouncing);
            }
            if (secondaryWeapon.PowerupBouncingRounds == 0 && secondaryWeapon.TotalAmmo > 0)
            {
                Player.SetCurrentSecondaryWeaponAmmo(secondaryWeapon.TotalAmmo, ProjectilePowerup.Bouncing);
            }
        }

        private List<float> m_effectTimes = new List<float>() { 0, 0 };
        private void PlayShinyEffect(float elapsed)
        {
            for (var i = 0; i < m_effectTimes.Count; i++)
            {
                m_effectTimes[i] += elapsed;
                if (m_effectTimes[i] >= 400)
                {
                    if (RandomHelper.Boolean())
                    {
                        Game.PlayEffect(EffectName.ItemGleam, RandomHelper.WithinArea(Player.GetAABB()));
                        m_effectTimes[i] = 0;
                    }
                    else
                        m_effectTimes[i] = RandomHelper.Between(0, 400);
                }
            }
        }

        public override void OnProjectileHit(IProjectile projectile, ProjectileHitArgs args)
        {
            base.OnProjectileHit(projectile, args);

            if (RandomHelper.Between(0, 100) < 90)
            {
                DeflectBullet(projectile, args.HitNormal);
            }
        }

        private void DeflectBullet(IProjectile projectile, Vector2 normal)
        {
            var reflectVec = Vector2.Reflect(projectile.Direction, normal)
                + RandomHelper.Direction(-65, 65);
            var direction = projectile.Direction.X > 0 ? 1 : -1;
            var position = projectile.Position - direction * Vector2.UnitX * 5;
            var powerup = ProjectilePowerup.None;

            if (projectile.PowerupBounceActive)
                powerup = ProjectilePowerup.Bouncing;
            if (projectile.PowerupFireActive)
                powerup = ProjectilePowerup.Fire;

            Game.SpawnProjectile(projectile.ProjectileItem, position, reflectVec, powerup);
        }
    }
    public class RobotBot : Bot
    {
        private float m_electricElapsed = 0f;

        public RobotBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetHitEffect(PlayerHitEffect.Metal);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Player.IsDead)
            {
                UpdateCorpse(elapsed);
            }
            else
            {
                var mod = Player.GetModifiers();
                var healthLeft = mod.CurrentHealth / mod.MaxHealth;

                if (healthLeft <= 0.4f)
                    UpdateNearDeathEffects(elapsed, healthLeft);
            }
        }

        private void UpdateNearDeathEffects(float elapsed, float healthLeft)
        {
            m_electricElapsed += elapsed;

            if (m_electricElapsed >= 700)
            {
                if (RandomHelper.Boolean())
                {
                    var position = RandomHelper.WithinArea(Player.GetAABB());

                    if (healthLeft <= 0.2f)
                    {
                        Game.PlayEffect(EffectName.Fire, position);
                        Game.PlaySound("Flamethrower", position);
                    }
                    if (healthLeft <= 0.3f)
                    {
                        Game.PlayEffect(EffectName.Sparks, position);
                    }
                    if (healthLeft <= 0.4f)
                    {
                        if (RandomHelper.Boolean())
                        {
                            Game.PlayEffect(EffectName.Steam, position);
                            Game.PlayEffect(EffectName.Steam, position);
                        }
                        Game.PlayEffect(EffectName.Electric, position);
                        Game.PlaySound("ElectricSparks", position);
                    }
                    m_electricElapsed = 0f;
                }
                else
                {
                    m_electricElapsed -= RandomHelper.Between(0, m_electricElapsed);
                }
            }
        }

        private void UpdateCorpse(float elapsed)
        {
            if (!Player.IsDead) return; // Safeguard
            m_electricElapsed += elapsed;

            if (m_electricElapsed >= 1000)
            {
                if (RandomHelper.Boolean())
                {
                    var position = Player.GetWorldPosition();
                    position.X += RandomHelper.Between(-10, 10);
                    position.Y += RandomHelper.Between(-10, 10);

                    Game.PlayEffect(EffectName.Electric, position);

                    if (RandomHelper.Boolean())
                    {
                        Game.PlayEffect(EffectName.Steam, position);
                        Game.PlayEffect(EffectName.Steam, position);
                        Game.PlayEffect(EffectName.Steam, position);
                    }
                    if (RandomHelper.Boolean())
                        Game.PlayEffect(EffectName.Sparks, position);
                    if (RandomHelper.Boolean())
                        Game.PlayEffect(EffectName.Fire, position);

                    Game.PlaySound("ElectricSparks", position);
                    m_electricElapsed = 0f;
                }
                else
                {
                    m_electricElapsed -= RandomHelper.Between(0, m_electricElapsed);
                }
            }
        }
    }
    class SheriffBot : CowboyBot
    {
        public SheriffBot(BotArgs args) : base(args) { }

        public override void OnDroppedWeapon(PlayerWeaponRemovedArg arg)
        {
            base.OnDroppedWeapon(arg);

            if (!Player.IsDead)
            {
                // Don't give primary weapon again. it's OP
                if (arg.WeaponItemType == WeaponItemType.Rifle)
                {
                    Player.GiveWeaponItem(WeaponItem.REVOLVER);
                }
                else
                    Player.GiveWeaponItem(arg.WeaponItem);
            }
        }
    }
    class StripperBot : Bot
    {
        private static HashSet<int> m_occupiedBouncerIDs = new HashSet<int>();
        private IPlayer m_bouncer;
        private readonly float BouncerCheckTime = 1000f;
        private float m_bouncerCheckTime = 0f;

        public StripperBot(BotArgs args) : base(args)
        {
            BouncerCheckTime = RandomHelper.Between(800, 1200);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (ScriptHelper.IsElapsed(m_bouncerCheckTime, BouncerCheckTime))
            {
                m_bouncerCheckTime = Game.TotalElapsedGameTime;

                if (m_bouncer == null)
                {
                    FindBouncer();
                }
            }
        }

        private void FindBouncer()
        {
            foreach (var bot in BotManager.GetBots())
            {
                var isBodyguard = bot.Type == BotType.Bodyguard
                    || bot.Type == BotType.BikerHulk
                    || bot.Type == BotType.GangsterHulk
                    || bot.Type == BotType.PunkHulk
                    || bot.Type == BotType.ThugHulk;

                if (isBodyguard && ScriptHelper.SameTeam(bot.Player, Player) && !m_occupiedBouncerIDs.Contains(bot.Player.UniqueID))
                {
                    m_bouncer = bot.Player;
                    m_occupiedBouncerIDs.Add(m_bouncer.UniqueID);

                    var bs = m_bouncer.GetBotBehaviorSet();
                    bs.GuardRange = 10f;
                    bs.ChaseRange = 11.5f;
                    bot.SetBotBehaviorSet(bs, true);

                    m_bouncer.SetGuardTarget(Player);
                    m_bouncer.SetBotName("Bouncer");

                    if (Game.IsEditorTest)
                    {
                        var color = RandomHelper.GetItem(Color.Red, Color.Yellow, Color.Blue, Color.Green, Color.Magenta, Color.Cyan);

                        ScriptHelper.RunIn(() =>
                        {
                            Game.DrawArea(m_bouncer.GetAABB(), color);
                            Game.DrawLine(m_bouncer.GetWorldPosition(), Player.GetWorldPosition(), color);
                            Game.DrawArea(Player.GetAABB(), color);
                        }, 2000);
                    }
                    break;
                }
            }
        }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);
            if (m_bouncer != null)
            {
                m_bouncer.SetGuardTarget(null);
                m_occupiedBouncerIDs.Remove(m_bouncer.UniqueID);
            }
        }
    }
    class SurvivorBot : Bot
    {
        public SurvivorBot(BotArgs args) : base (args) { }

        private int m_actualMaxHealth = 100;
        public override void OnSpawn()
        {
            base.OnSpawn();
            // Fake blood on the face to make it look like the infected
            // NOTE: Don't modify modifiers in ctor. modifiers will be applied after ctor call and before OnSpawn call
            var modifiers = Player.GetModifiers();
            m_actualMaxHealth = (int)Player.GetMaxHealth();
            modifiers.MaxHealth = m_actualMaxHealth * 100;
            SetModifiers(modifiers, true);
        }

        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            var currentHealth = Player.GetHealth();
            if (currentHealth >= m_actualMaxHealth)
            {
                Player.SetHealth(m_actualMaxHealth);
            }
        }
    }
    public class TeddybearBot : Bot
    {
        public const int EnrageTime = 30000;

        public bool IsEnraged { get; private set; }
        private static readonly List<string> PlayerEnrageReactions = new List<string>()
        {
            "Oh no",
            "Fuck",
            "Guess I will die",
            "Wait. I'm sorry",
            "It's not my fault",
        };

        public TeddybearBot(BotArgs args) : base(args) { IsEnraged = false; }

        private float m_enrageTimeElasped = 0f;
        protected override void OnUpdate(float elapsed)
        {
            base.OnUpdate(elapsed);

            if (Game.IsEditorTest)
                LogDebug(m_enrageTimeElasped, m_enrageTime,
                    Player.GetModifiers().RunSpeedModifier, Player.GetBotBehaviorSet().SearchItems);

            if (IsEnraged)
            {
                ChaseOffender();

                m_enrageTimeElasped += elapsed;
                if (m_enrageTimeElasped >= m_enrageTime)
                {
                    StopEnraging();
                    m_enrageTimeElasped = 0f;
                }
            }
        }

        private float oldDistance = 0f;
        private void ChaseOffender()
        {
            if (m_offender == null || m_offender.IsDead) return;

            // This is a workaround to make a bot target specific IPlayer
            // The thing is if the bot is guarding another target, that target will not be enemy even if they're from different teams
            // So the workaround is to set target to null when the target is close
            // Need these 2 lines for it to work
            // behavior.GuardRange = 1f;
            // behavior.ChaseRange = 1f;
            Game.DrawCircle(m_offender.GetWorldPosition(), 75);

            var distanceToTarget = Vector2.Distance(Position, m_offender.GetWorldPosition());
            if (distanceToTarget < 35 && oldDistance >= 35)
            {
                Player.SetGuardTarget(null);
                oldDistance = distanceToTarget;
            }
            if (distanceToTarget >= 35 && oldDistance < 35)
            {
                var behavior = Player.GetBotBehaviorSet();
                behavior.GuardRange = 1f;
                behavior.ChaseRange = 1f;
                SetBotBehaviorSet(behavior);
                Player.SetGuardTarget(m_offender);
                oldDistance = distanceToTarget;
            }
        }

        private int m_enrageTime = 0;
        private IPlayer m_offender;
        public void Enrage(IPlayer offender)
        {
            if (Player.IsRemoved || Player == null) return;

            var hasAlreadyEnraged = IsEnraged;
            m_enrageTime = EnrageTime;
            m_enrageTimeElasped = 0;

            if (hasAlreadyEnraged)
            {
                m_enrageTime *= 2;
                Game.CreateDialogue("GRRRRRRRROOAAR!", ScriptHelper.Red, Player);
            }
            else
                Game.CreateDialogue("GRRRRRR", ScriptHelper.Orange, Player);
            Player.SetGuardTarget(offender);

            Game.CreateDialogue(RandomHelper.GetItem(PlayerEnrageReactions), offender);
            
            var enrageModifiers = Player.GetModifiers();
            enrageModifiers.MeleeStunImmunity = Constants.TOGGLE_ON;
            enrageModifiers.RunSpeedModifier = hasAlreadyEnraged ? Speed.ExtremelyFast : Speed.VeryFast;
            enrageModifiers.SprintSpeedModifier = hasAlreadyEnraged ? Speed.ExtremelyFast : Speed.VeryFast;
            enrageModifiers.MeleeForceModifier = MeleeForce.ExtremelyStrong;
            enrageModifiers.EnergyConsumptionModifier = .25f;
            SetModifiers(enrageModifiers);

            var bs = GetBehaviorSet(BotAI.RagingHulk);
            bs.SearchItems = hasAlreadyEnraged ? SearchItems.Melee | SearchItems.Makeshift : SearchItems.Makeshift;
            SetBotBehaviorSet(bs);
            Player.SetStrengthBoostTime(float.MaxValue);

            IsEnraged = true;
            m_offender = offender;
        }

        private void StopEnraging()
        {
            Player.SetGuardTarget(null);
            ResetModifiers();
            ResetBotBehaviorSet();
            Player.SetStrengthBoostTime(0);
            IsEnraged = false;
            m_offender = null;
            m_enrageTime = 0;
        }
    }
    public class ZombieFatBot : Bot
    {
        private static readonly int InfectRadius = 30;
        private static readonly List<string> Giblets = new List<string>()
        {
            "Giblet00",
            "Giblet01",
            "Giblet02",
            "Giblet03",
            "Giblet04",
        };

        public ZombieFatBot(BotArgs args) : base(args) { }

        public override void OnDeath(PlayerDeathArgs args)
        {
            base.OnDeath(args);

            var center = Position + Vector2.UnitY * 5;
            var hitbox = Player.GetAABB();

            if (Game.IsEditorTest)
                ScriptHelper.RunIn(() => Game.DrawCircle(center, InfectRadius, Color.Cyan), 3000);

            foreach (var bot in BotManager.GetBots())
            {
                if (ScriptHelper.IntersectCircle(bot.Player.GetAABB(), center, InfectRadius))
                {
                    bot.Infect(InfectTeam);
                    Game.ShowChatMessage(bot.Player.Name + " is infected");
                }
            }

            Game.TriggerExplosion(Position);

            for (var i = 0; i < 5; i++)
            {
                Game.CreateObject(RandomHelper.GetItem(Giblets), RandomHelper.WithinArea(hitbox),
                    RandomHelper.Between(0, MathHelper.TwoPI));
                Game.PlayEffect(EffectName.Gib, RandomHelper.WithinArea(hitbox));
            }
        }
    }
    public class ZombieFlamerBot : Bot
    {
        public ZombieFlamerBot(BotArgs args) : base(args) { }

        public override void OnSpawn()
        {
            base.OnSpawn();
            Player.SetMaxFire();
        }
    }
    /// <summary>
    /// A wrapper around IObject just like Bot is a wrapper around IPlayer
    /// </summary>
    class Component
    {
        public bool RemoveWhenDestroyed { get; set; }
        public IObject Object { get; private set; }

        public string CustomID
        {
            get { return Object.CustomID; }
            set { Object.CustomID = value; }
        }

        private float m_maxHealth = 0;
        public float MaxHealth
        {
            get { return m_maxHealth == 0 ? Object.GetMaxHealth() : m_maxHealth; }
            set
            {
                m_maxHealth = value;
                Health = value;
                Object.SetHealth(value);
            }
        }

        private float m_health;
        public float Health
        {
            get { return m_health; }
            set { m_health = MathHelper.Clamp(value, 0, MaxHealth); }
        }

        public Component(string objectID, Vector2 worldPosition)
        {
            Object = Game.CreateObject(objectID, worldPosition);
            RemoveWhenDestroyed = true;
        }

        public void OnDamage(ObjectDamageArgs args)
        {
            Health -= args.Damage; // IObject.GetHealth() is already recalculated when this event is fired

            if (Object.GetHealth() == 0 && Health > 0)
            {
                Object.SetHealth(Math.Min(Object.GetMaxHealth(), Health));
            }

            if (Health == 0)
            {
                if (RemoveWhenDestroyed)
                    Object.Remove();
                else
                    Object.SetHealth(Object.GetMaxHealth());
            }
        }
    }
    enum TurretDirection
    {
        Left,
        Right,
    }

    enum TurretDamage
    {
        None = 0,
        SensorDamaged = 1, // Shoot everyone
        ControllerDamaged = 2, // Rotate randomly (if rotor is not damaged)
        RotorDamaged = 4, // Cant rotate
        BarrelDamaged = 8, // Cant shoot
    }


    //var area = new Area(-140, 280f, -170, 330f);
    //Events.UpdateCallback.Start((e) => Game.DrawArea(area));
    //var turrentComps = Game.GetObjectsByArea(area);
    //var rotationPointPos = turrentComps.Where(c => c.CustomID == "TurretRotationPoint").Single().GetWorldPosition();
    //foreach (var comp in turrentComps)
    //{
    //    if (comp.CustomID == "") continue;
    //    var pos = comp.GetWorldPosition();
    //    var xDecimal = pos.X - Math.Truncate(pos.X);
    //    var x = xDecimal >= .9 || xDecimal <= .1 ? Math.Round(pos.X) : pos.X;
    //    var yDecimal = pos.Y - Math.Truncate(pos.Y);
    //    var y = yDecimal >= .9 || yDecimal <= .1 ? Math.Round(pos.Y) : pos.Y;

    //    Game.WriteToConsole(string.Format("x:{0:0.0} y:{1:0.0} {2:0.0}",
    //        x - rotationPointPos.X, y - rotationPointPos.Y, comp.CustomID));
    //}

    class Turret : Weapon
    {
        public int UniqueID { get { return m_tip.UniqueID; } }
        public IPlayer Owner { get; private set; }

        public PlayerTeam Team { get; private set; }

        private Dictionary<string, IObject> m_components = new Dictionary<string, IObject>();
        public override IEnumerable<IObject> Components { get { return m_components.Values; } }

        public override bool IsDestroyed { get; protected set; }

        private List<Component> m_damageableComponents = new List<Component>();

        private IObject m_tip;
        private Component m_rotor;
        private Component m_controller;
        private Component m_barrel;
        private Component m_sensor;
        private TurretDamage m_damage = TurretDamage.None;
        public bool Broken { get { return m_damage != TurretDamage.None; } }

        public override Vector2 Position { get { return RotationCenter; } }

        private Vector2 RotationCenter { get; set; }
        private IObjectWeldJoint m_bodyJoint;
        private IObjectAlterCollisionTile m_alterCollisionTile;
        private IObject m_ground;

        public static readonly int TotalAmmo = Game.IsEditorTest ? 1000 : 300; // TODO: Remove
        private int m_currentAmmo = TotalAmmo;
        public int CurrentAmmo { get { return m_currentAmmo == -1 ? 0 : m_currentAmmo; } }

        private IPlayer m_currentTarget;
        public IPlayer CurrentTarget
        {
            get { return m_currentTarget; }
            private set
            {
                if (CurrentTarget == null || CurrentTarget.UniqueID != value.UniqueID)
                {
                    m_currentTarget = value;
                }
            }
        }

        private int m_direction = -1;
        public int Direction
        {
            get { return m_direction; }
            private set { m_direction = value; }
        }

        public Vector2 AimVector { get { return ScriptHelper.GetDirection(Angle); } }

        private static readonly float _Deg30 = -0.523599f; // -30deg
        public float MinAngle
        {
            get
            {
                return Direction > 0 ?
                    _Deg30
                    :
                    MathHelper.PI - MathHelper.PIOver4;
            }
        }
        public float MaxAngle
        {
            get
            {
                return Direction > 0 ?
                    MathHelper.PIOver4
                    :
                    MathHelper.PI - _Deg30;
            }
        }

        private float[] NormalizeMinMaxAngle(float min, float max)
        {
            // make sure it's in -45deg -> 45deg range instead of 320deg -> 45deg
            if (Math.Abs(max - min) > MathHelper.PI)
            {
                min = (float)MathExtension.NormalizeAngle(min);
                max = (float)MathExtension.NormalizeAngle(max);

                if (Math.Abs(max - min) > MathHelper.PI)
                    return new float[] { max - MathHelper.TwoPI, min };
            }
            return new float[] { min, max };
        }
        private float NormalizeAngle(float angle)
        {
            angle = (float)MathExtension.NormalizeAngle(angle);

            if (angle <= MathHelper.TwoPI && angle >= MathExtension.PI_3Over2)
                angle -= MathHelper.TwoPI;

            return angle;
        }
        public float Angle
        {
            get
            {
                if (Direction > 0)
                    return m_rotor.Object.GetAngle();
                return m_rotor.Object.GetAngle() + MathHelper.PI;
            }
            private set
            {
                var minCompAngle = Direction > 0 ? MinAngle : MinAngle - MathHelper.PI;
                var maxCompAngle = Direction > 0 ? MaxAngle : MaxAngle - MathHelper.PI;
                var minMax = NormalizeMinMaxAngle(minCompAngle, maxCompAngle);
                var angle = NormalizeAngle(Direction > 0 ? value : value - MathHelper.PI);

                //ScriptHelper.LogDebug(
                //    minMax[0] * 180 / Math.PI,
                //    minMax[1] * 180 / Math.PI,
                //    angle * 180 / Math.PI,
                //    m_targetAngle * 180 / Math.PI,
                //    CurrentTarget != null ? CurrentTarget.Name : "None"
                //    );

                angle = MathHelper.Clamp(angle, minMax[0], minMax[1]);
                m_rotor.Object.SetAngle(angle, updateConnectedObjects: true);
                // muzzle effect's angle is m_tip's Angle. I blame Gurt for this
                m_tip.SetAngle(Direction > 0 ? angle : angle - MathHelper.PI);
                // background object's angle must be set manually
                m_components["TurretTeamIndicator"].SetAngle(angle + -Direction * MathHelper.PIOver2);
            }
        }

        private Vector2 FirePosition
        {
            get { return RotationCenter + AimVector * 22; }
        }

        private TurretState m_state = TurretState.Idle;

        enum TurretState
        {
            Idle,
            Firing,
        }

        private string GetColor(PlayerTeam team)
        {
            switch (team)
            {
                case PlayerTeam.Team1:
                    return "BgBlue";
                case PlayerTeam.Team2:
                    return "BgRed";
                case PlayerTeam.Team3:
                    return "BgGreen";
                case PlayerTeam.Team4:
                    return "BgYellow";
                default:
                    return "BgLightGray";
            }
        }

        public Turret(Vector2 worldPosition, TurretDirection direction, IPlayer owner = null)
        {
            Direction = (direction == TurretDirection.Left) ? -1 : 1;
            Owner = owner;
            Team = owner.GetTeam();
            IsDestroyed = false;

            var ux = Vector2.UnitX * -Direction;
            var uy = Vector2.UnitY;

            // worldPosition works best when get from TurretPlaceholder.Position
            RotationCenter = worldPosition;
            var legLeft1Position = RotationCenter - ux * 4 + uy * 1;
            var legLeft2Position = RotationCenter - ux * 7 - uy * 5;
            var legRight1Position = RotationCenter + ux * 0 - uy * 5;
            var legRight2Position = RotationCenter + ux * 4 - uy * 13;
            var legMiddle1Position = RotationCenter - ux * 2.8f - uy * 3;
            var legMiddle2Position = RotationCenter - ux * 2.8f - uy * 6;
            var ammoPosition = RotationCenter + ux * 2 - uy * 2;
            var comp1Position = RotationCenter - ux * 5 + uy * 2;
            var controllerPosition = RotationCenter + ux * 0 + uy * 1;
            var sensorPosition = RotationCenter + ux * 5 + uy * 2;
            var rotorPosition = RotationCenter + ux * 0 - uy * 1;
            var barrelSolid1Position = RotationCenter - ux * 8 - uy * 2;
            var barrelSolid2Position = RotationCenter - ux * 16 - uy * 2;
            var barrelPosition = RotationCenter - ux * 6 + uy * 2;
            var tipPosition = RotationCenter - ux * 24 + uy * 0;
            var teamIndicatorPosition = RotationCenter - ux * 11f - uy * 1;

            // Object creation order is important. It will determine the z-layer the object will be located to
            var teamIndicator = Game.CreateObject("BgBottle00D", teamIndicatorPosition, -Direction * MathHelper.PIOver2);
            teamIndicator.SetColor1(GetColor(owner.GetTeam()));

            var legMiddle1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle1Position, -Direction * 0.41f);
            var legMiddle2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle2Position, -Direction * 0.41f);
            var legLeft1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft1Position);
            var legLeft2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft2Position);
            var legRight1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight1Position, MathHelper.PI);
            var legRight2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight2Position, MathHelper.PI);
            var ammo = (IObjectActivateTrigger)Game.CreateObject("AmmoStash00", ammoPosition);

            var comp1 = Game.CreateObject("ItemDebrisDark00", comp1Position);
            m_controller = new Component("ItemDebrisShiny00", controllerPosition);
            m_sensor = new Component("ItemDebrisDark00", sensorPosition);
            m_rotor = new Component("MetalDebris00A", rotorPosition);

            var barrel1 = Game.CreateObject("MetalPlat01A", barrelSolid1Position);
            var barrel2 = Game.CreateObject("MetalPlat01B", barrelSolid2Position);
            m_barrel = new Component("JusticeStatue00Scales", barrelPosition);
            m_tip = Game.CreateObject("LedgeGrab", tipPosition);
            m_ground = GetGround(RotationCenter);

            legMiddle1.SetEnabled(false);
            legMiddle2.SetEnabled(false);
            legLeft1.SetEnabled(false);
            legLeft2.SetEnabled(false);
            legRight1.SetEnabled(false);
            legRight2.SetEnabled(false);
            ammo.SetEnabled(false);

            legLeft1.SetFaceDirection(-Direction);
            legLeft2.SetFaceDirection(-Direction);
            legRight1.SetFaceDirection(Direction);
            legRight2.SetFaceDirection(Direction);
            legMiddle1.SetFaceDirection(-Direction);
            legMiddle2.SetFaceDirection(-Direction);

            ammo.SetFaceDirection(-Direction);
            barrel1.SetFaceDirection(-Direction);
            barrel2.SetFaceDirection(-Direction);
            m_barrel.Object.SetFaceDirection(-Direction);
            m_tip.SetFaceDirection(-Direction);
            comp1.SetFaceDirection(-Direction);
            m_controller.Object.SetFaceDirection(-Direction);
            m_sensor.Object.SetFaceDirection(-Direction);
            m_rotor.Object.SetFaceDirection(-Direction);
            teamIndicator.SetFaceDirection(-Direction);

            m_bodyJoint = (IObjectWeldJoint)Game.CreateObject("WeldJoint");
            m_alterCollisionTile = (IObjectAlterCollisionTile)Game.CreateObject("AlterCollisionTile");

            legMiddle1.CustomID = "TurretLegMiddle1";
            legMiddle2.CustomID = "TurretLegMiddle2";
            legLeft1.CustomID = "TurretLegLeft1";
            legLeft2.CustomID = "TurretLegLeft2";
            legRight1.CustomID = "TurretLegRight1";
            legRight2.CustomID = "TurretLegRight2";
            ammo.CustomID = "TurretAmmo";
            barrel1.CustomID = "TurretBarrel1";
            barrel2.CustomID = "TurretBarrel2";
            m_barrel.CustomID = "TurretBarrel3";
            m_tip.CustomID = "TurretTip";
            teamIndicator.CustomID = "TurretTeamIndicator";
            comp1.CustomID = "TurretComp1";
            m_controller.CustomID = "TurretController";
            m_sensor.CustomID = "TurretSensor";
            m_rotor.CustomID = "TurretRotor";

            m_components.Add(legMiddle1.CustomID, legMiddle1); 
            m_components.Add(legMiddle2.CustomID, legMiddle2);
            m_components.Add(legLeft1.CustomID, legLeft1);
            m_components.Add(legLeft2.CustomID, legLeft2);
            m_components.Add(legRight1.CustomID, legRight1);
            m_components.Add(legRight2.CustomID, legRight2);
            m_components.Add(ammo.CustomID, ammo);
            m_components.Add(barrel1.CustomID, barrel1);
            m_components.Add(barrel2.CustomID, barrel2);
            m_components.Add(m_barrel.CustomID, m_barrel.Object);
            m_components.Add(m_tip.CustomID, m_tip);
            m_components.Add(teamIndicator.CustomID, teamIndicator);
            m_components.Add(comp1.CustomID, comp1);
            m_components.Add(m_controller.CustomID, m_controller.Object);
            m_components.Add(m_sensor.CustomID, m_sensor.Object);
            m_components.Add(m_rotor.CustomID, m_rotor.Object);

            // The reason I randomize health for each part is because bullets will likely shoot
            // through all the parts at once, so part with lowest hp will be destroyed first,
            // which is predictable, which is bad
            var healths = RandomHelper.Shuffle(new List<float>() { 50, 100, 125, 150 });
            m_barrel.MaxHealth = healths[0];
            m_rotor.MaxHealth = healths[1];
            m_sensor.MaxHealth = healths[2];
            m_controller.MaxHealth = healths[3];

            m_damageableComponents.Add(m_barrel);
            m_damageableComponents.Add(m_rotor);
            m_damageableComponents.Add(m_sensor);
            m_damageableComponents.Add(m_controller);

            foreach (var dc in m_damageableComponents)
                dc.RemoveWhenDestroyed = false;

            foreach (var component in m_components.Values)
                RegisterComponent(component);

            m_alterCollisionTile.SetDisableCollisionTargetObjects(true);
            RotateTo(Direction > 0 ? 0 : MathHelper.PI);
        }

        private void RegisterComponent(IObject obj)
        {
            if (!obj.CustomID.StartsWith("TurretLeg"))
            {
                m_bodyJoint.AddTargetObject(obj);
            }

            m_alterCollisionTile.AddTargetObject(obj);
        }

        public static IObject GetGround(Vector2 position)
        {
            var start = position - Vector2.UnitY * 13;
            var end = position - Vector2.UnitY * 15;
            var rayCastInput = new RayCastInput()
            {
                MaskBits = CategoryBits.StaticGround + CategoryBits.DynamicPlatform,
                FilterOnMaskBits = true,
            };
            var results = Game.RayCast(start, end, rayCastInput);

            foreach (var result in results)
            {
                var o = result.HitObject;
                if (o.GetBodyType() == BodyType.Static
                    && ScriptHelper.IsIndestructible(o)
                    && !RayCastHelper.ObjectsBulletCanDestroy.Contains(o.Name))
                {
                    return o;
                }
            }
            throw new Exception("I don't have the high ground");
        }

        private float m_fireCooldown = 0;
        public override void Update(float elapsed)
        {
            Game.DrawText(string.Format("{0}/{1}", CurrentAmmo, TotalAmmo), RotationCenter - Vector2.UnitY * 15);

            if (m_ground.GetBodyType() == BodyType.Dynamic)
                Destroy();

            UpdateRotation(elapsed);
            UpdateBrokenEffects(elapsed);

            switch (m_state)
            {
                case TurretState.Idle:
                    if (CurrentAmmo > 0)
                        ScanTargets(elapsed);
                    break;
                case TurretState.Firing:
                    if (CurrentAmmo > 0)
                        ScanTargets(elapsed);

                    m_fireCooldown += elapsed;
                    if (m_fireCooldown >= 75)
                    {
                        if (m_currentAmmo > 0)
                            Fire();
                        if (m_currentAmmo == 0)
                        {
                            m_currentAmmo--;
                            Game.PlayEffect(EffectName.CustomFloatText, FirePosition, "Out of ammo");
                            Game.PlaySound("OutOfAmmoHeavy", FirePosition);

                            for (uint i = 1; i <= 6; i++)
                            {
                                ScriptHelper.Timeout(() => Game.PlaySound("OutOfAmmoHeavy", FirePosition), 75 * i);
                            }
                            StopFiring();
                        }
                        m_fireCooldown = 0;
                    }
                    break;
            }

        }

        private float m_sparkEffectTime = 0f;
        private float m_smokeEffectTime = 0f;
        private void UpdateBrokenEffects(float elapsed)
        {
            if (HasDamage(TurretDamage.SensorDamaged)
                || HasDamage(TurretDamage.RotorDamaged)
                || HasDamage(TurretDamage.ControllerDamaged))
            {
                var effectTime = 1500;
                if (HasDamage(TurretDamage.SensorDamaged)) effectTime -= 200;
                if (HasDamage(TurretDamage.RotorDamaged)) effectTime -= 200;
                if (HasDamage(TurretDamage.ControllerDamaged)) effectTime -= 200;

                m_sparkEffectTime += elapsed;
                if (m_sparkEffectTime >= effectTime)
                {
                    if (RandomHelper.Boolean()) m_sparkEffectTime -= RandomHelper.Between(0, 1500);
                    else
                    {
                        m_sparkEffectTime = 0f;
                        Game.PlayEffect(EffectName.ItemGleam, m_rotor.Object.GetWorldPosition());
                        Game.PlayEffect(EffectName.DestroyMetal, m_rotor.Object.GetWorldPosition());
                        Game.PlaySound("ElectricSparks", m_rotor.Object.GetWorldPosition());
                    }
                }
            }

            if (HasDamage(TurretDamage.BarrelDamaged))
            {
                m_smokeEffectTime += elapsed;

                if (m_smokeEffectTime >= 500)
                {
                    Game.PlayEffect(EffectName.Dig, m_tip.GetWorldPosition());
                    m_smokeEffectTime = 0f;
                }
            }
        }

        public bool HasDamage(TurretDamage damage) { return (m_damage & damage) == damage; }
        public bool Totaled() { return m_damage ==
                (TurretDamage.BarrelDamaged
                | TurretDamage.ControllerDamaged
                | TurretDamage.RotorDamaged
                | TurretDamage.SensorDamaged); }

        private void OnBodyDamage(TurretDamage damage, string displayText)
        {
            Game.PlayEffect(EffectName.CustomFloatText, RotationCenter + Vector2.UnitY * 5, displayText);
            Game.PlayEffect(EffectName.Electric, RotationCenter);
            Game.PlayEffect(EffectName.Electric, RotationCenter);
            Game.PlaySound("ElectricSparks", RotationCenter);
            m_damage = m_damage | damage;
        }
        public override void OnDamage(IObject obj, ObjectDamageArgs args)
        {
            foreach (var dc in m_damageableComponents)
            {
                if (dc.Object.UniqueID == obj.UniqueID)
                {
                    // barrel component is indestructible and there are 4 dc. A cheap solution is
                    // to randomize to have barrel damage instead when other dc takes damage
                    if (RandomHelper.Between(0, 1) < (1f / 3f) - (1f / 4f))
                        m_damageableComponents.First().OnDamage(args);

                    dc.OnDamage(args);
                    break;
                }
            }

            // https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/
            if (m_barrel.Health == 0 && !HasDamage(TurretDamage.BarrelDamaged))
            {
                Game.PlayEffect(EffectName.CustomFloatText, RotationCenter + Vector2.UnitY * 5, "Barrel Damaged");
                m_damage = m_damage | TurretDamage.BarrelDamaged;
            }
            if (m_rotor.Health == 0 && !HasDamage(TurretDamage.RotorDamaged))
            {
                OnBodyDamage(TurretDamage.RotorDamaged, "Rotor Damaged");
            }
            if (m_sensor.Health == 0 && !HasDamage(TurretDamage.SensorDamaged))
            {
                OnBodyDamage(TurretDamage.SensorDamaged, "Sensor Damaged");
            }
            if (m_controller.Health == 0 && !HasDamage(TurretDamage.ControllerDamaged))
            {
                OnBodyDamage(TurretDamage.ControllerDamaged, "Controller Damaged");
            }

            if (Totaled() && !IsDestroyed)
            {
                Destroy();
            }
        }

        public static readonly float Range = 500;
        private Vector2[] GetLineOfSight(Vector2 direction)
        {
            direction.Normalize();
            return new Vector2[]
            {
                RotationCenter + direction * 22,
                RotationCenter + direction * (Range + 22),
            };
        }

        private List<IPlayer> GetPlayersInRange()
        {
            var scanRange = Range + 22;
            var topPosition = RotationCenter + ScriptHelper.GetDirection(MaxAngle) * scanRange;
            var botPosition = RotationCenter + ScriptHelper.GetDirection(MinAngle) * scanRange;

            var left = Math.Min(RotationCenter.X, RotationCenter.X + scanRange * Direction);
            var right = Math.Max(RotationCenter.X, RotationCenter.X + scanRange * Direction);
            var bottom = Math.Min(topPosition.Y, botPosition.Y);
            var top = Math.Max(topPosition.Y, botPosition.Y);
            var filterArea = new Area(top, left, bottom, right);

            Game.DrawLine(RotationCenter, RotationCenter + ScriptHelper.GetDirection(MinAngle) * scanRange, Color.Cyan);
            Game.DrawLine(RotationCenter, RotationCenter + ScriptHelper.GetDirection(MaxAngle) * scanRange, Color.Cyan);
            Game.DrawArea(filterArea);

            var players = Game.GetObjectsByArea<IPlayer>(filterArea)
                .Where((p) => ScriptHelper.IntersectCircle(p.GetAABB(), RotationCenter, scanRange, MinAngle, MaxAngle)
                && !p.IsDead)
                .ToList();

            // nearest player first
            players.Sort((p1, p2) =>
            {
                var p1Distance = Vector2.Distance(p1.GetWorldPosition(), RotationCenter);
                var p2Distance = Vector2.Distance(p2.GetWorldPosition(), RotationCenter);
                if (p1Distance < p2Distance)
                    return -1;
                return 1;
            });

            return players;
        }

        private IEnumerable<IPlayer> RayCast(Vector2 start, Vector2 end)
        {
            if (HasDamage(TurretDamage.SensorDamaged))
            {
                foreach (var result in RayCastHelper.Players(start, end))
                    yield return Game.GetPlayer(result.ObjectID);
            }
            else
            {
                foreach (var result in RayCastHelper.Players(start, end, true, Team, Owner))
                    yield return Game.GetPlayer(result.ObjectID);
            }
        }

        private float m_changeTargetCooldown = 0f;
        private void ScanTargets(float elasped)
        {
            if (HasDamage(TurretDamage.BarrelDamaged)) return;

            var players = GetPlayersInRange();
            var targetDirection = Vector2.Zero;
            IPlayer target = null;

            if (HasDamage(TurretDamage.RotorDamaged))
            {
                CheckFire();
                return;
            }

            foreach (var player in players)
            {
                var direction = player.GetWorldPosition() - RotationCenter;
                var los = GetLineOfSight(direction);
                var targets = RayCast(los[0], los[1]);

                if (targets.Count() > 0)
                {
                    targetDirection = direction;
                    target = player; break;
                }
            }

            m_changeTargetCooldown += elasped;

            if (target != null && m_changeTargetCooldown > 500)
            {
                m_changeTargetCooldown = 0;
                CurrentTarget = target;
                RotateTo(ScriptHelper.GetAngle(targetDirection));
            }

            CheckFire(target);
        }

        private void CheckFire(IPlayer target)
        {
            if (target == null)
            {
                StopFiring();
                return;
            }

            var los = GetLineOfSight(AimVector);
            var players = RayCast(los[0], los[1]);
            Game.DrawLine(los[0], los[1], Color.Green);

            if (!players.Any())
            {
                StopFiring();
                return;
            }

            foreach (var player in players)
            {
                if (player.UniqueID == target.UniqueID)
                {
                    StartFiring();
                    break;
                }
            }
        }

        private void CheckFire()
        {
            var los = GetLineOfSight(AimVector);
            var players = RayCast(los[0], los[1]);
            Game.DrawLine(los[0], los[1], Color.Green);

            if (players.Any())
            {
                StartFiring();
            }
            else
                StopFiring();
        }

        private float m_rotateTimer = 0;
        private float m_targetAngle = 0;
        private void RotateTo(float angle)
        {
            m_targetAngle = NormalizeAngle(angle);
        }

        private float m_rndRotationTime = 0f;
        private void UpdateRotation(float elapsed)
        {
            if (HasDamage(TurretDamage.RotorDamaged))
                return;

            if (HasDamage(TurretDamage.ControllerDamaged))
            {
                m_rndRotationTime += elapsed;
                if (m_rndRotationTime >= 1000)
                {
                    if (RandomHelper.Boolean())
                    {
                        RotateTo(RandomHelper.Between(MinAngle, MaxAngle));
                        m_rndRotationTime = 0f;
                    }
                    else
                        m_rndRotationTime -= RandomHelper.Between(0, 500);
                }
            }

            if (Math.Abs(Angle - m_targetAngle) > MathExtension.OneDeg)
            {
                m_rotateTimer += elapsed;
                if (m_rotateTimer >= 1/60)
                {
                    if (m_targetAngle > Angle)
                        Angle+= .0174f;
                    else
                        Angle-= .0174f;
                    m_rotateTimer = 0;
                }
            }
        }

        private void Fire()
        {
            if (HasDamage(TurretDamage.BarrelDamaged))
                return;

            var aimVector = AimVector;
            var oneDeg = .0174f;

            aimVector.X += RandomHelper.Between(-oneDeg, oneDeg);
            aimVector.Y += RandomHelper.Between(-oneDeg, oneDeg);

            Game.SpawnProjectile(ProjectileItem.M60, FirePosition, aimVector);
            // More info about muzzle effect
            // https://www.mythologicinteractiveforums.com/viewtopic.php?p=23313#p23313
            Game.PlayEffect("MZLED", Vector2.Zero, m_tip.UniqueID, "MuzzleFlashAssaultRifle");
            Game.PlaySound("Magnum", FirePosition);
            m_currentAmmo--;

            var emittedAngle = (Direction > 0 ? 90 + 45 : 45) + RandomHelper.Between(-.3f, .3f);
            // "ShellBig" "ShellSmall" "ShellShotgun" "ShellGLauncher"
            var casing = Game.CreateObject("ShellBig", RotationCenter, 0,
                ScriptHelper.GetDirection(emittedAngle) * 4, RandomHelper.Between(-5, 5));
        }

        private void StartFiring() { if (m_state != TurretState.Firing) m_state = TurretState.Firing; }
        private void StopFiring() { if (m_state != TurretState.Idle) m_state = TurretState.Idle; }

        public void Destroy()
        {
            if (IsDestroyed) return;

            foreach (var component in Components)
            {
                if (component.CustomID.StartsWith("TurretLeg"))
                {
                    component.Destroy();
                }
                else
                    component.SetBodyType(BodyType.Dynamic);
            }
            m_components.Clear();

            IsDestroyed = true;
        }
    }
    class TurretPlaceholder
    {
        public int UniqueID { get { return m_components.First().UniqueID; } }
        public Vector2 Position { get; private set; }
        public Area GetAABB() { return m_components.First().GetAABB(); }
        public bool IsRemoved { get; private set; }

        public IObject RepresentedObject { get { return m_components.First(); } }

        private List<IObject> m_components = new List<IObject>();
        public TurretDirection Direction { get; private set; }
        private IObject m_ground;

        private Vector2 m_placeholderBgPosition;
        private List<IObject> m_progressIndicators = new List<IObject>();

        public PlayerTeam Team { get; private set; }
        public IPlayer OriginalBuilder { get; private set; }

        private float m_buildProgress = 0f;
        // 0-1, 1 is finished
        public float BuildProgress
        {
            get { return m_buildProgress; }
            set
            {
                if (m_buildProgress == value) return;
                var progress = -1;

                if (value >= .8 && m_buildProgress < .8)
                    progress = 4;
                else if (value >= .6 && m_buildProgress < .6)
                    progress = 3;
                else if (value >= .4 && m_buildProgress < .4)
                    progress = 2;
                else if (value >= .2 && m_buildProgress < .2)
                    progress = 1;
                else if (m_buildProgress == 0)
                    progress = 0;

                if (progress > -1)
                {
                    foreach(var indicator in m_progressIndicators)
                        indicator.Remove();
                    m_progressIndicators.Clear();

                    var rows = (int)Math.Ceiling(progress / 2.0);

                    for (var r = 0; r < rows; r++)
                    {
                        var indicator = Game.CreateObject("BgFrame00B", m_placeholderBgPosition - Vector2.UnitY * 8 * r);
                        int c;

                        if (r == rows - 1) c = progress % 2 == 1 ? 1 : 2;
                        else c = 2;

                        indicator.SetColor1("BgGray");
                        indicator.SetSizeFactor(new Point(c, 1));
                        m_progressIndicators.Add(indicator);
                    }
                }

                m_buildProgress = value;
            }
        }

        public TurretPlaceholder(Vector2 worldPosition, TurretDirection direction, IPlayer builder)
        {
            OriginalBuilder = builder;
            Team = builder.GetTeam();
            Direction = direction;
            IsRemoved = false;

            var dir = (direction == TurretDirection.Left) ? -1 : 1;

            var ux = Vector2.UnitX * -dir;
            var uy = Vector2.UnitY;

            // worldPosition works best when get from player.GetWorldPosition()
            Position = worldPosition - ux * 10 + uy * 9;
            m_placeholderBgPosition = Position - Vector2.UnitX * (Direction > 0 ? 5 : 3) - uy * 1;
            var legLeft1Position = Position - ux * 3 + uy * 1;
            var legLeft2Position = Position - ux * 6 - uy * 5;
            var legRight1Position = Position + ux * 1 - uy * 5;
            var legRight2Position = Position + ux * 5 - uy * 13;
            var legMiddle1Position = Position - ux * 1.8f - uy * 3;
            var legMiddle2Position = Position - ux * 1.8f - uy * 6;

            var placeholderBg = Game.CreateObject("BgFrame00B", m_placeholderBgPosition);
            var legMiddle1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle1Position, -dir * 0.41f);
            var legMiddle2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legMiddle2Position, -dir * 0.41f);
            var legLeft1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft1Position);
            var legLeft2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legLeft2Position);
            var legRight1 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight1Position, MathHelper.PI);
            var legRight2 = (IObjectActivateTrigger)Game.CreateObject("Lever01", legRight2Position, MathHelper.PI);
            m_ground = Turret.GetGround(Position);

            legMiddle1.SetEnabled(false);
            legMiddle2.SetEnabled(false);
            legLeft1.SetEnabled(false);
            legLeft2.SetEnabled(false);
            legRight1.SetEnabled(false);
            legRight2.SetEnabled(false);

            legLeft1.SetFaceDirection(-dir);
            legLeft2.SetFaceDirection(-dir);
            legRight1.SetFaceDirection(dir);
            legRight2.SetFaceDirection(dir);
            legMiddle1.SetFaceDirection(-dir);
            legMiddle2.SetFaceDirection(-dir);

            placeholderBg.SetSizeFactor(new Point(2, 2));

            m_components.Add(placeholderBg); legMiddle1.CustomID = "PlaceholderBg";
            m_components.Add(legMiddle1); legMiddle1.CustomID = "LegMiddle1";
            m_components.Add(legMiddle2); legMiddle2.CustomID = "LegMiddle2";
            m_components.Add(legLeft1); legLeft1.CustomID = "LegLeft1";
            m_components.Add(legLeft2); legLeft2.CustomID = "LegLeft2";
            m_components.Add(legRight1); legRight1.CustomID = "LegRight1";
            m_components.Add(legRight2); legRight2.CustomID = "LegRight2";
        }

        public void Update(float elapsed)
        {
            if (m_ground.GetBodyType() == BodyType.Dynamic)
                Remove();
        }

        public void Remove()
        {
            if (IsRemoved) return;
            IsRemoved = true;

            foreach (var component in m_components)
            {
                component.Remove();
            }
            foreach (var indicator in m_progressIndicators)
            {
                indicator.Remove();
            }
            WeaponManager.RemoveTurretPlaceholder(UniqueID);
        }
    }
    abstract class Weapon
    {
        public virtual bool IsDestroyed { get; protected set; }

        public abstract Vector2 Position { get; }
        public abstract IEnumerable<IObject> Components { get; }

        public abstract void Update(float elapsed);
        public virtual void OnDamage(IObject component, ObjectDamageArgs args) { }
        public virtual void OnComponentTerminated(IObject component) { }
    }
    class TurretPlaceholderInfo
    {
        public TurretPlaceholder Placeholder;
        public IPlayer Builder;
    }

    static class WeaponManager
    {
        private static List<Weapon> m_weapons = new List<Weapon>();
        private static Dictionary<int, TurretPlaceholderInfo> m_turretPlaceholders = new Dictionary<int, TurretPlaceholderInfo>();

        public static void Initialize()
        {
            Events.UpdateCallback.Start(OnUpdate);
            Events.ObjectDamageCallback.Start(OnObjectDamage);
            Events.ObjectTerminatedCallback.Start(OnObjectTerminated);
        }

        public static void SpawnTurret(IPlayer owner, Vector2 position, TurretDirection direction)
        {
            m_weapons.Add(new Turret(position, direction, owner));
        }

        public static IEnumerable<T> GetWeapons<T>() where T : Weapon
        {
            foreach (var weapon in m_weapons)
            {
                var w = weapon as T;
                if (w != null) yield return w;
            }
        }

        private static float m_lastUpdateTime = 0f;
        private static void OnUpdate(float elapsed)
        {
            foreach (var weapon in m_weapons.ToList())
            {
                weapon.Update(Game.TotalElapsedGameTime - m_lastUpdateTime);

                if (weapon.IsDestroyed)
                    m_weapons.Remove(weapon);
            }

            foreach (var placeholderInfo in m_turretPlaceholders.Values.ToList())
            {
                var placeholder = placeholderInfo.Placeholder;

                placeholder.Update(Game.TotalElapsedGameTime - m_lastUpdateTime);

                if (placeholder.IsRemoved)
                    placeholder.Remove();
            }

            m_lastUpdateTime = Game.TotalElapsedGameTime;
        }

        private static void OnObjectDamage(IObject obj, ObjectDamageArgs arg)
        {
            if (string.IsNullOrEmpty(obj.CustomID)) return;

            foreach (var weapon in m_weapons)
            {
                foreach (var component in weapon.Components.ToList())
                {
                    if (obj.UniqueID == component.UniqueID)
                    {
                        weapon.OnDamage(obj, arg);
                    }
                }
            }
        }

        private static void OnObjectTerminated(IObject[] objects)
        {
            foreach (var o in objects)
            {
                if (string.IsNullOrEmpty(o.CustomID)) continue;

                foreach (var weapon in m_weapons)
                {
                    foreach (var component in weapon.Components.ToList())
                    {
                        if (o.CustomID == component.CustomID)
                        {
                            weapon.OnComponentTerminated(o);
                        }
                    }
                }
            }
        }

        public static TurretPlaceholder CreateTurretPlaceholder(IPlayer player, TurretDirection direction)
        {
            var placeholder = new TurretPlaceholder(player.GetWorldPosition(), direction, player);

            m_turretPlaceholders.Add(placeholder.UniqueID, new TurretPlaceholderInfo()
            {
                Builder = player,
                Placeholder = placeholder,
            });
            return placeholder;
        }

        public static IEnumerable<KeyValuePair<int, TurretPlaceholderInfo>> GetUntouchedTurretPlaceholders()
        {
            return m_turretPlaceholders.Where((p) => p.Value.Builder == null);
        }
        public static void RemoveBuilderFromTurretPlaceholder(int uniqueID)
        {
            if (m_turretPlaceholders.ContainsKey(uniqueID))
                m_turretPlaceholders[uniqueID].Builder = null;
        }
        public static void AddBuilderToTurretPlaceholder(int uniqueID, IPlayer builder) { m_turretPlaceholders[uniqueID].Builder = builder; }
        public static void RemoveTurretPlaceholder(int uniqueID) { m_turretPlaceholders.Remove(uniqueID); }
    }

