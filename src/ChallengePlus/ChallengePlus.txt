// This file is auto generated by ScriptLinker at 18:38:04 23/05/2022
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: NearHuscarl
* description: Bunch of challenges
* mapmodes: 
*/
public void OnStartup(){var _=Player.None;}public void AfterStartup(){Initialize();}private static void Initialize(){if(Game.IsEditorTest){for(var i=0;i<5;i++){var bot=ScriptHelper.SpawnBot(PredefinedAIType.BotB);if(bot==null)continue;if(i<3)bot.SetTeam(PlayerTeam.Team2);else bot.SetTeam(PlayerTeam.Team3);}}Storage.Initialize();PlayerManager.Initialize();ChallengeManager.Initialize();}public void OnShutdown(){}public class Challenge:ChallengeBase<object>{public Challenge(ChallengeName name):base(name){}}public class ChallengeBase<PlayerData>:IChallenge where PlayerData:new(){public override ChallengeName Name{get;protected set;}public ChallengeBase(ChallengeName name){Name=name;Description="";}public override string Description{get;protected set;}public override void OnSpawn(IPlayer[]players){Game.ShowPopupMessage(string.Format(@"Challenge: {0}
{1}",Name,Description),ScriptColors.WARNING_COLOR);ScriptHelper.Timeout(()=>Game.HidePopupMessage(),5000);}public override void OnUpdate(float e){foreach(var p in Game.GetProjectiles())OnUpdate(e,p);}protected static readonly Dictionary<int,PlayerData>PData=new Dictionary<int,PlayerData>();public override void OnPlayerCreated(Player player){PData[player.UniqueID]=new PlayerData();}protected PlayerData GetPlayerData(int uniqueID){PlayerData pData;if(PData.TryGetValue(uniqueID,out pData))return pData;return default(PlayerData);}public override void OnPlayerDealth(Player player,PlayerDeathArgs args){if(args.Removed)PData.Remove(player.UniqueID);}}public static class ChallengeFactory{public static IChallenge Create(ChallengeName name){switch(name){case ChallengeName.Athelete:return new AtheleteChallenge(name);case ChallengeName.Bouncing:return new BouncingChallenge(name);case ChallengeName.BuffGun:return new BuffGunChallenge(name);case ChallengeName.BuffMelee:return new BuffMeleeChallenge(name);case ChallengeName.Chonky:return new ChonkyChallenge(name);case ChallengeName.Crit:return new CritChallenge(name);case ChallengeName.Danger:return new DangerChallenge(name);case ChallengeName.Disease:return new DiseaseChallenge(name);case ChallengeName.Drug:return new DrugChallenge(name);case ChallengeName.FastBullet:return new FastBulletChallenge(name);case ChallengeName.Fire:return new FireChallenge(name);case ChallengeName.Impostor:return new ImpostorChallenge(name);case ChallengeName.InfiniteAmmo:return new InfiniteAmmoChallenge(name);case ChallengeName.Kickass:return new KickassChallenge(name);case ChallengeName.LootBox:return new LootBoxChallenge(name);case ChallengeName.Minesweeper:return new MinesweeperChallenge(name);case ChallengeName.Moonwalk:return new MoonwalkChallenge(name);case ChallengeName.Nuclear:return new NuclearChallenge(name);case ChallengeName.Precision:return new PrecisionChallenge(name);case ChallengeName.SlowBullet:return new SlowBulletChallenge(name);case ChallengeName.Sniper:return new SniperChallenge(name);case ChallengeName.SpecificWeapon:return new SpecificWpnChallenge(name);case ChallengeName.StrongObject:return new StrongObjectChallenge(name);case ChallengeName.Switcharoo:return new SwitcharooChallenge(name);case ChallengeName.Tiny:return new TinyChallenge(name);case ChallengeName.Trap:return new TrapChallenge(name);case ChallengeName.Unstable:return new UnstableChallenge(name);case ChallengeName.Weak:return new WeakChallenge(name);case ChallengeName.WeakObject:return new WeakObjectChallenge(name);default:throw new ArgumentException("Challenge name "+name+" is not implemented");}}}public static class ChallengeManager{private static IChallenge _challenge;public static void Initialize(){var name=GetCurrentChallenge();if(name==ChallengeName.None)return;_challenge=ChallengeFactory.Create(name);Events.UserMessageCallback.Start(Command.OnUserMessage);Events.UpdateCallback.Start(_challenge.OnUpdate);Events.PlayerWeaponAddedActionCallback.Start(OnPlayerWeaponAdded);Events.ProjectileCreatedCallback.Start(OnProjectileCreated);Events.ProjectileHitCallback.Start(_challenge.OnProjectileHit);Events.ObjectCreatedCallback.Start(OnObjectCreated);Events.ObjectDamageCallback.Start(OnObjectDamage);Events.ObjectTerminatedCallback.Start(OnObjectTerminated);_challenge.OnSpawn(Game.GetPlayers());}private static ChallengeName GetCurrentChallenge(){var settings=Settings.Get();var currentChallenge=settings.CurrentChallenge;if(settings.RoundsUntilRotation==1){List<ChallengeName>challenges;if(settings.EnabledChallenges.Count>1)challenges=settings.EnabledChallenges.Where((f)=>f!=settings.CurrentChallenge).ToList();else challenges=settings.EnabledChallenges;currentChallenge=RandomHelper.GetItem(challenges);ScriptHelper.PrintMessage("Change challenge to "+currentChallenge);}Storage.SetItem("CURRENT_CHALLENGE",currentChallenge.ToString());if(settings.RotationEnabled){var roundTillNextRotation=settings.RoundsUntilRotation==1?settings.RotationInterval:settings.RoundsUntilRotation-1;Storage.SetItem("ROUNDS_UNTIL_ROTATION",roundTillNextRotation);}return currentChallenge;}internal static void OnPlayerCreated(Player p){_challenge.OnPlayerCreated(p);}internal static void OnPlayerKeyInput(Player player,VirtualKeyInfo[]keyInfos){_challenge.OnPlayerKeyInput(player,keyInfos);}internal static void OnUpdate(float e,Player p){_challenge.OnUpdate(e,p);}private static void OnPlayerWeaponAdded(IPlayer player,PlayerWeaponAddedArg args){_challenge.OnPlayerWeaponAdded(PlayerManager.GetPlayer(player),args);}private static void OnProjectileCreated(IProjectile[]projectiles){foreach(var p in projectiles)_challenge.OnProjectileCreated(p);}internal static void OnPlayerDamage(Player p,PlayerDamageArgs args,Player attacker){_challenge.OnPlayerDamage(p,args,attacker);}internal static void OnPlayerDealth(Player p,PlayerDeathArgs args){_challenge.OnPlayerDealth(p,args);}private static void OnObjectCreated(IObject[]objs){foreach(var o in objs)_challenge.OnObjectCreated(o);}private static void OnObjectDamage(IObject o,ObjectDamageArgs args){_challenge.OnObjectDamage(o,args);}private static void OnObjectTerminated(IObject[]objs){foreach(var o in objs)_challenge.OnObjectTerminated(o);}}public enum ChallengeName{None,Athelete,Bouncing,BuffGun,BuffMelee,Chonky,Crit,Danger,Disease,Drug,FastBullet,Fire,Impostor,InfiniteAmmo,Kickass,LootBox,Minesweeper,Moonwalk,Nuclear,Precision,SlowBullet,Sniper,SpecificWeapon,StrongObject,Switcharoo,Tiny,Trap,Unstable,Weak,WeakObject,}public static class Command{private static readonly string NAME=Constants.SCRIPT_NAME;public static void OnUserMessage(UserMessageCallbackArgs args){if(!args.User.IsHost||!args.IsCommand||(args.Command!=NAME.ToUpperInvariant()&&args.Command!="CP")){return;}var message=args.CommandArguments.ToLowerInvariant();var words=message.Split(' ');var command=words.FirstOrDefault();var arguments=words.Skip(1);switch(command){case"?":case"h":case"help":PrintHelp();break;case"v":case"version":PrintVersion();break;case"s":case"settings":ShowCurrentSettings();break;case"lc":case"listchallenges":PrintChallenges();break;case"ec":case"enabledchallenges":SetEnabledChallenges(arguments);break;case"ri":case"rotationinterval":SetChallengeRotationInterval(arguments);break;case"nc":case"nextchallenge":SkipCurrentChallenge();break;default:ScriptHelper.PrintMessage("Invalid command: "+command,ScriptColors.ERROR_COLOR);break;}}private static void PrintHelp(){var command=NAME.ToLowerInvariant();ScriptHelper.PrintMessage(string.Format("--{0} help--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [help|h|?]: Print this help",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [version|v]: Print the current version",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [listchallenges|lc]: List all challenges",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [settings|s]: Display the current script's settings",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [enabledchallenges|ec] [-e] <names|indexes|all>: Set enabled challenges to play with",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [rotationinterval|ri] <1-10>: Set challenge rotation interval for every n rounds",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [nextchallenge|nc]: Reset the rotation interval and skip to the next challenge",command));}private static void PrintVersion(){ScriptHelper.PrintMessage(string.Format("--{0} version--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("v"+Constants.CURRENT_VERSION);}private static IEnumerable<string>GetChallenges(){var challenges=ScriptHelper.EnumToArray<ChallengeName>();foreach(var challenge in challenges){yield return((int)challenge).ToString()+": "+ScriptHelper.EnumToString(challenge);}}private static void PrintChallenges(){ScriptHelper.PrintMessage(string.Format("--{0} list challenges--",NAME),ScriptColors.ERROR_COLOR);foreach(var challenge in GetChallenges()){ScriptHelper.PrintMessage(challenge,ScriptColors.WARNING_COLOR);}}private static void ShowCurrentSettings(){ScriptHelper.PrintMessage(string.Format("--{0} settings--",NAME),ScriptColors.ERROR_COLOR);var settings=Settings.Get();var challengeNames=settings.EnabledChallenges;var currentChallenge=settings.CurrentChallenge;var isAllChallenges=challengeNames.Count==ScriptHelper.EnumToArray<ChallengeName>().Count()-1;var challengesValue=isAllChallenges?"All":string.Join(",",challengeNames);ScriptHelper.PrintMessage(string.Format("-Current Challenge: {0}",currentChallenge));ScriptHelper.PrintMessage(string.Format("-Enabled Challenges: {0}",challengesValue));var rotationInterval=settings.RotationEnabled?settings.RotationInterval.ToString():"Disabled";var roundsUntilRotation=settings.RotationEnabled?settings.RoundsUntilRotation.ToString():"N/a";ScriptHelper.PrintMessage("-Challenge rotation interval: "+rotationInterval,ScriptColors.WARNING_COLOR);ScriptHelper.PrintMessage("-Rounds until rotation: "+roundsUntilRotation,ScriptColors.WARNING_COLOR);}private static void SetEnabledChallenges(IEnumerable<string>arguments){var allChallenges=ScriptHelper.EnumToArray<ChallengeName>().Select((f)=>ScriptHelper.EnumToString(f)).ToList();var challenges=new List<string>();var excludeFlag=false;ChallengeName challenge;if(arguments.Count()==0){ScriptHelper.PrintMessage(string.Format("--{0} SetEnabledChallenges--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("Invalid command: Argument is empty",ScriptColors.WARNING_COLOR);return;}if(arguments.Count()==1&&(arguments.Single()=="all"||arguments.Single()=="none")){if(arguments.Single()=="all")challenges=new List<string>{"All"};if(arguments.Single()=="none")challenges=new List<string>{"None"};}else{if(arguments.First()=="-e"){excludeFlag=true;arguments=arguments.Skip(1);}foreach(var arg in arguments){if(arg=="none"){ScriptHelper.PrintMessage(string.Format("--{0} SetEnabledChallenges--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("Invalid argument: Cannot mix None with other options",ScriptColors.WARNING_COLOR);return;}if(ScriptHelper.TryParseEnum(arg,out challenge)){challenges.Add(ScriptHelper.EnumToString(challenge));}else{ScriptHelper.PrintMessage(string.Format("--{0} SetEnabledChallenges--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("Invalid argument: "+arg,ScriptColors.WARNING_COLOR);return;}}}if(excludeFlag){challenges=allChallenges.Where((f)=>!challenges.Contains(f)).ToList();}Storage.SetItem("ENABLED_CHALLENGES",challenges.Distinct().ToArray());ScriptHelper.PrintMessage(string.Format("[{0}] Update successfully",NAME));}private static void SetChallengeRotationInterval(IEnumerable<string>arguments){var firstArg=arguments.FirstOrDefault();if(firstArg==null)return;int value=-1;if(int.TryParse(firstArg,out value)){value=(int)MathHelper.Clamp(value,0,10);Storage.SetItem("ROTATION_INTERVAL",value);Storage.SetItem("ROUNDS_UNTIL_ROTATION",value);ScriptHelper.PrintMessage(string.Format("[{0}] Update successfully--",NAME));}else ScriptHelper.PrintMessage(string.Format("[{0}] Invalid query: {1}",NAME,firstArg),ScriptColors.WARNING_COLOR);}private static void SkipCurrentChallenge(){Storage.SetItem("ROUNDS_UNTIL_ROTATION",1);ScriptHelper.PrintMessage(string.Format("[{0}] Update successfully",NAME));}}public static class Constants{internal const float CORPSE_MAX_HEALTH=150;internal const float MAX_WALK_SPEED=2.5f;internal const float MAX_SPRINT_SPEED=3.5f;internal const string SCRIPT_NAME="ChallengePlus";internal const string STORAGE_KEY_PREFIX="CP_";internal const string CURRENT_VERSION="0.0.0";internal const float ExplosionRadius=38.5f;internal const int DEFAULT_CHALLENGE_ROTATION_INTERVAL=3;internal static readonly string[]DEFAULT_ENABLED_CHALLENGES=new string[]{"All"};internal const int TOGGLE_ON=1;internal const int TOGGLE_OFF=0;internal static readonly WeaponItemType[]WeaponItemTypes=new WeaponItemType[]{WeaponItemType.Melee,WeaponItemType.Rifle,WeaponItemType.Handgun,WeaponItemType.Thrown,WeaponItemType.Powerup,WeaponItemType.InstantPickup,};internal static readonly PlayerTeam[]Teams=new PlayerTeam[]{PlayerTeam.Team1,PlayerTeam.Team2,PlayerTeam.Team3,PlayerTeam.Team4,};internal static readonly string[]Giblets=new string[]{"Giblet00","Giblet01","Giblet02","Giblet03","Giblet04",};internal static readonly string[]WeaponNames=new string[]{"WpnPistol","WpnPistol45","WpnSilencedPistol","WpnMachinePistol","WpnMagnum","WpnRevolver","WpnPumpShotgun","WpnDarkShotgun","WpnTommygun","WpnSMG","WpnM60","WpnPipeWrench","WpnChain","WpnWhip","WpnHammer","WpnKatana","WpnMachete","WpnChainsaw","WpnKnife","WpnSawedoff","WpnBat","WpnBaton","WpnShockBaton","WpnLeadPipe","WpnUzi","WpnSilencedUzi","WpnBazooka","WpnAxe","WpnAssaultRifle","WpnMP50","WpnSniperRifle","WpnCarbine","WpnFlamethrower","ItemPills","ItemMedkit","ItemSlomo5","ItemSlomo10","ItemStrengthBoost","ItemSpeedBoost","ItemLaserSight","ItemBouncingAmmo","ItemFireAmmo","WpnGrenades","WpnMolotovs","WpnMines","WpnShuriken","WpnBow","WpnFlareGun","WpnGrenadeLauncher",};internal static CollisionFilter NoCollision{get{return new CollisionFilter(){AboveBits=0,CategoryBits=0,MaskBits=0,AbsorbProjectile=false,BlockExplosions=false,BlockFire=false,BlockMelee=false,ProjectileHit=false,};}}}public struct ScriptColors{public static readonly Color Team1=new Color(64,64,128);public static readonly Color Team2=new Color(128,40,40);public static readonly Color Team3=new Color(0,112,0);public static readonly Color Team4=new Color(112,112,0);public static readonly Color Red=new Color(128,32,32);public static readonly Color Orange=new Color(255,128,24);public static readonly Color MESSAGE_COLOR=new Color(24,238,200);public static readonly Color ERROR_COLOR=new Color(244,77,77);public static readonly Color WARNING_COLOR=new Color(249,191,11);}public enum FaceDirection{None,Left,Right,}public enum ClothingType{Accesory,ChestOver,ChestUnder,Feet,Hands,Head,Legs,Waist,}public static class Health{internal const int Hacker=400;internal const int UltraStrong=300;internal const int ExtremelyStrong=250;internal const int VeryStrong=200;internal const int Strong=150;internal const int AboveNormal=125;internal const int Normal=100;internal const int BelowNormal=80;internal const int Weak=65;internal const int VeryWeak=50;internal const int ExtremelyWeak=35;internal const int EmbarrassinglyWeak=20;internal const int BarelyAny=5;}public static class Stamina{internal const int Hacker=400;internal const int UltraHigh=300;internal const int ExtremelyHigh=250;internal const int VeryHigh=200;internal const int High=150;internal const int AboveNormal=125;internal const int Normal=100;internal const int BelowNormal=80;internal const int Low=65;internal const int VeryLow=50;internal const int ExtremelyLow=35;internal const int EmbarrassinglyLow=20;internal const int BarelyAny=5;}public static class Speed{internal const float Hacker=2f;internal const float UltraFast=1.75f;internal const float ExtremelyFast=1.5f;internal const float VeryFast=1.35f;internal const float Fast=1.2f;internal const float AboveNormal=1.1f;internal const float Normal=1f;internal const float BelowNormal=.9f;internal const float Slow=.8f;internal const float VerySlow=.7f;internal const float ExtremelySlow=.6f;internal const float BarelyAny=.5f;}public static class Size{internal const float Chonky=1.25f;internal const float ExtremelyBig=1.2f;internal const float VeryBig=1.15f;internal const float Big=1.1f;internal const float AboveNormal=1.05f;internal const float Normal=1f;internal const float BelowNormal=.95f;internal const float Small=.9f;internal const float VerySmall=.85f;internal const float ExtremelySmall=.8f;internal const float Tiny=.75f;}public static class MeleeForce{internal const float OnePunch=5f;internal const float UltraStrong=3f;internal const float ExtremelyStrong=2f;internal const float VeryStrong=1.75f;internal const float Strong=1.5f;internal const float AboveNormal=1.25f;internal const float Normal=1f;internal const float Weak=0.5f;internal const float None=0f;}public static class EnergyRecharge{internal const float Quick=1.5f;internal const float Normal=1f;internal const float Slow=.5f;}public static class DamageDealt{internal const float OnePunch=10f;internal const float UltraHigh=5f;internal const float ExtremelyHigh=2f;internal const float VeryHigh=1.5f;internal const float High=1.25f;internal const float FairlyHigh=1.2f;internal const float AboveNormal=1.1f;internal const float Normal=1f;internal const float BelowNormal=.9f;internal const float FairlyLow=.8f;internal const float Low=.75f;internal const float VeryLow=.5f;internal const float ExtremelyLow=.25f;internal const float UltraLow=.1f;internal const float None=0f;}public static class DamageTaken{internal const float Defenseless=10f;internal const float UltraVulnerable=5f;internal const float ExtremelyVulnerable=2f;internal const float VeryVulnerable=1.5f;internal const float Vulnerable=1.25f;internal const float FairlyVulnerable=1.2f;internal const float SlightlyVulnerable=1.1f;internal const float Normal=1f;internal const float SlightlyResistant=.9f;internal const float FairlyResistant=.8f;internal const float Resistant=.75f;internal const float VeryResistant=.5f;internal const float ExtremelyResistant=.25f;internal const float UltraResistant=.1f;internal const float Unbeatable=0f;}public static class ItemDropMode{internal const int Normal=0;internal const int Break=1;internal const int Remove=2;}public static class CategoryBits{internal const ushort None=0x0000;internal const ushort StaticGround=0x0001;internal const ushort DynamicPlatform=0x0002;internal const ushort Player=0x0004;internal const ushort DynamicG1=0x0008;internal const ushort DynamicG2=0x0010;internal const ushort Dynamic=DynamicG1+DynamicG2;internal const ushort Items=0x0020;internal const ushort Debris=0x0010;internal const ushort DynamicsThrown=0x8000;}public static class WpnSearchRange{public const float Infinite=0f;public const float InSight=80f;public const float Nearby=20f;}public abstract class IChallenge{public virtual ChallengeName Name{get;protected set;}public virtual string Description{get;protected set;}public virtual void OnSpawn(IPlayer[]players){}public virtual void OnUpdate(float e){}public virtual void OnPlayerCreated(Player player){}public virtual void OnPlayerKeyInput(Player player,VirtualKeyInfo[]keyInfos){}public virtual void OnUpdate(float e,Player player){}public virtual void OnPlayerDamage(Player player,PlayerDamageArgs args,Player attacker){}public virtual void OnPlayerWeaponAdded(Player player,PlayerWeaponAddedArg args){}public virtual void OnPlayerDealth(Player player,PlayerDeathArgs args){}public virtual void OnObjectCreated(IObject obj){}public virtual void OnObjectDamage(IObject o,ObjectDamageArgs args){}public virtual void OnObjectTerminated(IObject obj){}public virtual void OnProjectileCreated(IProjectile projectile){}public virtual void OnUpdate(float e,IProjectile projectile){}public virtual void OnProjectileHit(IProjectile projectile,ProjectileHitArgs args){}}public static class Mapper{public static WeaponItemType GetWeaponItemType(WeaponItem weaponItem){switch(weaponItem){case WeaponItem.ASSAULT:case WeaponItem.BAZOOKA:case WeaponItem.BOW:case WeaponItem.CARBINE:case WeaponItem.DARK_SHOTGUN:case WeaponItem.FLAMETHROWER:case WeaponItem.GRENADE_LAUNCHER:case WeaponItem.M60:case WeaponItem.MP50:case WeaponItem.SAWED_OFF:case WeaponItem.SHOTGUN:case WeaponItem.SMG:case WeaponItem.SNIPER:case WeaponItem.TOMMYGUN:return WeaponItemType.Rifle;case WeaponItem.FLAREGUN:case WeaponItem.MACHINE_PISTOL:case WeaponItem.MAGNUM:case WeaponItem.PISTOL:case WeaponItem.PISTOL45:case WeaponItem.REVOLVER:case WeaponItem.SILENCEDPISTOL:case WeaponItem.SILENCEDUZI:case WeaponItem.UZI:return WeaponItemType.Handgun;case WeaponItem.PIPE:case WeaponItem.CHAIN:case WeaponItem.WHIP:case WeaponItem.HAMMER:case WeaponItem.KATANA:case WeaponItem.MACHETE:case WeaponItem.CHAINSAW:case WeaponItem.KNIFE:case WeaponItem.BAT:case WeaponItem.BATON:case WeaponItem.SHOCK_BATON:case WeaponItem.LEAD_PIPE:case WeaponItem.AXE:case WeaponItem.BASEBALL:return WeaponItemType.Melee;case WeaponItem.BOTTLE:case WeaponItem.BROKEN_BOTTLE:case WeaponItem.CHAIR:case WeaponItem.CUESTICK:case WeaponItem.CUESTICK_SHAFT:case WeaponItem.FLAGPOLE:case WeaponItem.PILLOW:case WeaponItem.SUITCASE:case WeaponItem.TEAPOT:case WeaponItem.TRASH_BAG:case WeaponItem.TRASHCAN_LID:case WeaponItem.CHAIR_LEG:return WeaponItemType.Melee;case WeaponItem.GRENADES:case WeaponItem.MOLOTOVS:case WeaponItem.MINES:case WeaponItem.C4:case WeaponItem.C4DETONATOR:case WeaponItem.SHURIKEN:return WeaponItemType.Thrown;case WeaponItem.STRENGTHBOOST:case WeaponItem.SPEEDBOOST:case WeaponItem.SLOWMO_5:case WeaponItem.SLOWMO_10:return WeaponItemType.Powerup;case WeaponItem.PILLS:case WeaponItem.MEDKIT:case WeaponItem.LAZER:case WeaponItem.BOUNCINGAMMO:case WeaponItem.FIREAMMO:case WeaponItem.STREETSWEEPER:return WeaponItemType.InstantPickup;default:return WeaponItemType.NONE;}}public static bool IsMakeshiftWeapon(WeaponItem weaponItem){return weaponItem==WeaponItem.BOTTLE||weaponItem==WeaponItem.BROKEN_BOTTLE||weaponItem==WeaponItem.CUESTICK||weaponItem==WeaponItem.CUESTICK_SHAFT||weaponItem==WeaponItem.CHAIR||weaponItem==WeaponItem.CHAIR_LEG||weaponItem==WeaponItem.FLAGPOLE||weaponItem==WeaponItem.PILLOW||weaponItem==WeaponItem.SUITCASE||weaponItem==WeaponItem.TEAPOT||weaponItem==WeaponItem.TRASH_BAG||weaponItem==WeaponItem.TRASHCAN_LID;}public static ProjectileItem GetProjectile(WeaponItem weaponItem){switch(weaponItem){case WeaponItem.ASSAULT:return ProjectileItem.ASSAULT;case WeaponItem.BAZOOKA:return ProjectileItem.BAZOOKA;case WeaponItem.BOW:return ProjectileItem.BOW;case WeaponItem.CARBINE:return ProjectileItem.CARBINE;case WeaponItem.DARK_SHOTGUN:return ProjectileItem.DARK_SHOTGUN;case WeaponItem.GRENADE_LAUNCHER:return ProjectileItem.GRENADE_LAUNCHER;case WeaponItem.M60:return ProjectileItem.M60;case WeaponItem.MP50:return ProjectileItem.MP50;case WeaponItem.SAWED_OFF:return ProjectileItem.SAWED_OFF;case WeaponItem.SHOTGUN:return ProjectileItem.SHOTGUN;case WeaponItem.SMG:return ProjectileItem.SMG;case WeaponItem.SNIPER:return ProjectileItem.SNIPER;case WeaponItem.TOMMYGUN:return ProjectileItem.TOMMYGUN;case WeaponItem.FLAREGUN:return ProjectileItem.FLAREGUN;case WeaponItem.MACHINE_PISTOL:return ProjectileItem.MACHINE_PISTOL;case WeaponItem.MAGNUM:return ProjectileItem.MAGNUM;case WeaponItem.PISTOL:return ProjectileItem.PISTOL;case WeaponItem.PISTOL45:return ProjectileItem.PISTOL45;case WeaponItem.REVOLVER:return ProjectileItem.REVOLVER;case WeaponItem.SILENCEDPISTOL:return ProjectileItem.SILENCEDPISTOL;case WeaponItem.SILENCEDUZI:return ProjectileItem.SILENCEDUZI;case WeaponItem.UZI:return ProjectileItem.UZI;default:return ProjectileItem.NONE;}}}static class MathExtension{public const float TwoPI=MathHelper.TwoPI;public const float PI=MathHelper.PI;public const float PIOver2=MathHelper.PIOver2;public const float PIOver4=MathHelper.PIOver4;public const float PIOver8=MathHelper.PIOver8;public const float PI_3Over2=TwoPI-PIOver2;public const float OneDeg=MathHelper.PI/180;public static float ToRadians(float angleDegree){return(float)(angleDegree*Math.PI)/180;}public static float ToDegree(float radians){return radians*180/(float)Math.PI;}public static float NormalizeAngle(float radian){var result=radian%MathHelper.TwoPI;return result<0?result+MathHelper.TwoPI:result;}public static float Diff(float a,float b){return Math.Abs(Math.Abs(a)-Math.Abs(b));}public static bool InRange(float value,float min,float max){return min<=value&&value<=max;}public static float AngleBetween(Vector2 vector1,Vector2 vector2){double sin=vector1.X*vector2.Y-vector2.X*vector1.Y;double cos=vector1.X*vector2.X+vector1.Y*vector2.Y;return(float)Math.Atan2(sin,cos);}}public class Player{public static readonly Player None;public static readonly string NoneCustomID="BeNonePlayer";public IPlayer Instance{get;private set;}public bool IsDead{get{return Instance.IsDead;}}public bool IsBot{get{return Instance.IsBot;}}public int UniqueID{get{return Instance.UniqueID;}}public int Direction{get{return Instance.FacingDirection;}}public Area Hitbox{get{return Instance.GetAABB();}}public Vector2 Position{get{return Instance.GetWorldPosition();}set{Instance.SetWorldPosition(value);}}public Vector2 Velocity{get{return Instance.GetLinearVelocity();}set{Instance.SetLinearVelocity(value);}}public IProfile Profile{get{return Instance.GetProfile();}set{Instance.SetProfile(value);}}public void DealDamage(float damage){Instance.DealDamage(damage);}public void DealDamage(float damage,int sourceID){Instance.DealDamage(damage,sourceID);}static Player(){var nonePlayer=Game.CreatePlayer(Vector2.Zero);nonePlayer.Remove();nonePlayer.CustomID=NoneCustomID;None=new Player(nonePlayer);}public Player(IPlayer player){Instance=player;}}public class PlayerManager{private static readonly Dictionary<int,Player>Players=new Dictionary<int,Player>();public static void Initialize(){Events.UpdateCallback.Start(OnUpdate);Events.PlayerDamageCallback.Start(OnPlayerDamage);Events.PlayerDeathCallback.Start(OnPlayerDeath);Events.PlayerKeyInputCallback.Start(OnPlayerKeyInput);}public static Player GetPlayer(int uniqueID){Player player;if(Players.TryGetValue(uniqueID,out player))return player;return Player.None;}public static IEnumerable<Player>GetPlayers(){return Players.Values;}public static Player GetPlayer(IObject player){return GetPlayer(player.UniqueID);}public static void OnUpdate(float e){foreach(var player in Game.GetPlayers()){var p=GetPlayer(player);if(p!=Player.None){ChallengeManager.OnUpdate(e,p);}else if(!player.IsRemoved&&player.CustomID!=Player.NoneCustomID){p=Wrap(player);ChallengeManager.OnPlayerCreated(p);}}}private static Player Wrap(IPlayer player){var p=new Player(player);Players.Add(player.UniqueID,p);return p;}private static void OnPlayerDamage(IPlayer player,PlayerDamageArgs args){var p=GetPlayer(player);if(p==Player.None)return;var attacker=(IPlayer)null;if(args.DamageType==PlayerDamageEventType.Melee){attacker=Game.GetPlayer(args.SourceID);}if(args.DamageType==PlayerDamageEventType.Projectile){var projectile=Game.GetProjectile(args.SourceID);attacker=Game.GetPlayer(projectile.OwnerPlayerID);}var attackPlayer=attacker==null?null:GetPlayer(attacker);ChallengeManager.OnPlayerDamage(p,args,attackPlayer);}private static void OnPlayerDeath(IPlayer player,PlayerDeathArgs args){if(player==null)return;var p=GetPlayer(player);if(p==Player.None)return;ChallengeManager.OnPlayerDealth(p,args);if(args.Removed){Players.Remove(player.UniqueID);}}private static void OnPlayerKeyInput(IPlayer player,VirtualKeyInfo[]keyInfos){var p=GetPlayer(player);ChallengeManager.OnPlayerKeyInput(p,keyInfos);}}public static class RandomHelper{public static Random Rnd{get;set;}static RandomHelper(){Rnd=new Random();}public static bool Boolean(){return Rnd.NextDouble()>=0.5;}public static float Between(float min,float max){return(float)Rnd.NextDouble()*(max-min)+min;}public static int BetweenInt(int min,int max){return Rnd.Next(min,max);}public static T GetItem<T>(List<T>list){if(list.Count==0)throw new Exception("list is empty");var rndIndex=Rnd.Next(list.Count);return list[rndIndex];}public static T GetItem<T>(params T[]list){if(list.Length==0)throw new Exception("list is empty");var rndIndex=Rnd.Next(list.Length);return list[rndIndex];}public static List<T>Shuffle<T>(List<T>list){var result=new List<T>(list);var n=result.Count;while(n>1){n--;var k=Rnd.Next(n+1);T value=result[k];result[k]=result[n];result[n]=value;}return result;}public static T GetEnumValue<T>()where T:struct,IConvertible{if(!typeof(T).IsEnum){throw new ArgumentException("T must be an enumerated type");}var enumValues=Enum.GetValues(typeof(T));return(T)enumValues.GetValue(Rnd.Next(enumValues.Length));}public static bool Percentage(float chance){return Between(0f,1f)<chance;}public static IList<T>Shuffle<T>(IList<T>list){var n=list.Count;while(n>1){n--;var k=Rnd.Next(n+1);var swap=list[k];list[k]=list[n];list[n]=swap;}return list;}}public static class ScriptHelper{public static void PrintMessage(string message,Color?color=null){Game.ShowChatMessage(message,color??ScriptColors.MESSAGE_COLOR);}public class PlayerSpawner{public Vector2 Position{get;set;}public bool HasSpawned{get;set;}}public static List<PlayerSpawner>GetPlayerSpawners(){var spawners=Game.GetObjectsByName("SpawnPlayer");var emptySpawners=new List<PlayerSpawner>();var players=Game.GetPlayers().Where(p=>!p.IsDead).ToList();foreach(var spawner in spawners){var hasPlayer=players.Any(x=>x.GetAABB().Intersects(spawner.GetAABB()));emptySpawners.Add(new PlayerSpawner{Position=spawner.GetWorldPosition(),HasSpawned=hasPlayer,});}return emptySpawners;}public static Vector2 GetDirection(float radianAngle){return new Vector2(){X=(float)Math.Cos(radianAngle),Y=(float)Math.Sin(radianAngle),};}private static List<PlayerSpawner>_spawners=GetPlayerSpawners();public static IPlayer SpawnBot(PredefinedAIType ai){if(_spawners.Count==0)return null;var spawner=RandomHelper.GetItem(_spawners.Where(s=>!s.HasSpawned).ToList());var player=Game.CreatePlayer(spawner.Position);player.SetBotBehavior(new BotBehavior{PredefinedAI=ai,Active=true,});spawner.HasSpawned=true;return player;}public static void Timeout(Action callback,uint interval){Events.UpdateCallback.Start(e=>callback.Invoke(),interval,1);}public static bool IsElapsed(float timeStarted,float timeToElapse){return Game.TotalElapsedGameTime-timeStarted>=timeToElapse;}public static Func<float,bool>WithIsElapsed(){var timeStarted=0f;return(interval)=>{if(IsElapsed(timeStarted,interval)){timeStarted=Game.TotalElapsedGameTime;return true;}return false;};}public static Func<float,float,bool>WithIsElapsed2(){var timeStarted=0f;var interval=0f;return(minTime,maxTime)=>{if(IsElapsed(timeStarted,interval)){timeStarted=Game.TotalElapsedGameTime;interval=RandomHelper.Between(minTime,maxTime);return true;}return false;};}public static bool IsPlayer(IObject obj){if(obj==null)return false;return obj.GetCollisionFilter().CategoryBits==CategoryBits.Player;}public static IPlayer AsPlayer(IObject obj){if(obj==null)return null;return Game.GetPlayer(obj.UniqueID);}public static bool IsDynamicObject(IObject obj){var cf=obj.GetCollisionFilter();return cf.CategoryBits==CategoryBits.DynamicG1||cf.CategoryBits==CategoryBits.DynamicG2||cf.CategoryBits==CategoryBits.Dynamic;}public static bool IsStaticGround(IObject o){return o.GetCollisionFilter().CategoryBits==CategoryBits.StaticGround;}public static bool IsHardStaticGround(IObject o){return IsStaticGround(o)&&!IsPlatform(o);}public static bool IsPlatform(IObject o){var cf=o.GetCollisionFilter();return cf.CategoryBits==CategoryBits.StaticGround&&!cf.AbsorbProjectile&&!cf.BlockExplosions;}public static bool IsDynamicG1(IObject o){return o.GetCollisionFilter().CategoryBits==CategoryBits.DynamicG1;}public static bool IsDynamicG2(IObject o){return o.GetCollisionFilter().CategoryBits==CategoryBits.DynamicG2;}public static bool IsInteractiveObject(IObject obj){var cf=obj.GetCollisionFilter();return cf.CategoryBits==CategoryBits.DynamicG1||cf.CategoryBits==CategoryBits.DynamicG2||cf.CategoryBits==CategoryBits.Dynamic||cf.CategoryBits==CategoryBits.Player;}public static bool IsActiveObject(IObject obj){var cf=obj.GetCollisionFilter();return cf.CategoryBits==CategoryBits.DynamicG1||cf.CategoryBits==CategoryBits.DynamicG2||cf.CategoryBits==CategoryBits.Dynamic||cf.CategoryBits==CategoryBits.Player||cf.CategoryBits==CategoryBits.DynamicPlatform||cf.CategoryBits==CategoryBits.StaticGround;}public static Vector2 GetFarAwayPosition(){var randX=RandomHelper.Between(0,200);var randy=RandomHelper.Between(0,200);return Game.GetCameraMaxArea().TopLeft+new Vector2(-10-randX,10+randy);}public static bool TryParseEnum<T>(string str,out T result)where T:struct,IConvertible{result=default(T);if(!typeof(T).IsEnum){return false;}int index=-1;if(int.TryParse(str,out index)){if(Enum.IsDefined(typeof(T),index)){result=(T)(object)index;}else{return false;}}else{if(!Enum.TryParse(str,ignoreCase:true,result:out result)){return false;}}return true;}public static T StringToEnum<T>(string str){return(T)Enum.Parse(typeof(T),str);}public static string EnumToString<T>(T enumVal){return Enum.GetName(typeof(T),enumVal);}public static T[]EnumToArray<T>(){return(T[])Enum.GetValues(typeof(T));}}class Settings{public readonly int RotationInterval;public bool RotationEnabled{get{return RotationInterval!=0;}}public readonly int RoundsUntilRotation;public readonly List<ChallengeName>EnabledChallenges;public readonly ChallengeName CurrentChallenge;public Settings(int rotationInterval,int roundsUntilRotation,List<ChallengeName>enabledChallenges,ChallengeName currentChallenge){RotationInterval=rotationInterval;RoundsUntilRotation=roundsUntilRotation;EnabledChallenges=enabledChallenges;CurrentChallenge=currentChallenge;}public static Settings Get(){var rotationIntervalResult=Storage.GetInt("ROTATION_INTERVAL");if(!rotationIntervalResult.Success){rotationIntervalResult.Data=Constants.DEFAULT_CHALLENGE_ROTATION_INTERVAL;Storage.SetItem("ROTATION_INTERVAL",Constants.DEFAULT_CHALLENGE_ROTATION_INTERVAL);}var roundsUntilRotationResult=Storage.GetInt("ROUNDS_UNTIL_ROTATION");if(!roundsUntilRotationResult.Success){roundsUntilRotationResult.Data=rotationIntervalResult.Data;Storage.SetItem("ROUNDS_UNTIL_ROTATION",rotationIntervalResult.Data);}var currentChallengeResult=Storage.GetString("CURRENT_CHALLENGE");if(!currentChallengeResult.Success){currentChallengeResult.Data="None";Storage.SetItem("CURRENT_CHALLENGE",currentChallengeResult.Data);}var currentChallenge=ScriptHelper.StringToEnum<ChallengeName>(currentChallengeResult.Data);var enabledChallengesResult=Storage.GetStringArr("ENABLED_CHALLENGES");if(!enabledChallengesResult.Success){enabledChallengesResult.Data=Constants.DEFAULT_ENABLED_CHALLENGES;Storage.SetItem("ENABLED_CHALLENGES",Constants.DEFAULT_ENABLED_CHALLENGES);}var enabledChallenges=new List<ChallengeName>();if(enabledChallengesResult.Data.Count()==1&&enabledChallengesResult.Data.Single()=="All"){enabledChallenges=ScriptHelper.EnumToArray<ChallengeName>().Where((x)=>x!=ChallengeName.None).ToList();}else{foreach(var c in enabledChallengesResult.Data){enabledChallenges.Add(ScriptHelper.StringToEnum<ChallengeName>(c));}}return new Settings(rotationIntervalResult.Data,roundsUntilRotationResult.Data,enabledChallenges,currentChallenge);}}public static class SFD{public static IGame Game;}public struct StorageResult<T>{public T Data;public bool Success;}public static class Storage{public static IScriptStorage Instance;public static void Initialize(){Instance=Game.GetSharedStorage(Constants.SCRIPT_NAME);}public static string StorageKey(string key){return Constants.STORAGE_KEY_PREFIX+key;}public static void SetItem(string key,int value){Instance.SetItem(StorageKey(key),value);}public static void SetItem(string key,string[]value){Instance.SetItem(StorageKey(key),value);}public static void SetItem(string key,string value){Instance.SetItem(StorageKey(key),value);}public static StorageResult<int>GetInt(string key){int value;if(Instance.TryGetItemInt(StorageKey(key),out value)){return new StorageResult<int>{Data=value,Success=true};}return new StorageResult<int>{Data=default(int),Success=false};}public static StorageResult<string>GetString(string key){string value;if(Instance.TryGetItemString(StorageKey(key),out value)){return new StorageResult<string>{Data=value,Success=true};}return new StorageResult<string>{Data=default(string),Success=false};}public static StorageResult<string[]>GetStringArr(string key){string[]value;if(Instance.TryGetItemStringArr(StorageKey(key),out value)){return new StorageResult<string[]>{Data=value,Success=true};}return new StorageResult<string[]>{Data=new string[]{},Success=false};}}public class AtheleteChallenge:ChallengeBase<AtheleteChallenge.PlayerData>{public static readonly float IdleMaxTime=1500;public AtheleteChallenge(ChallengeName name):base(name){}public override string Description{get{return"Players explode if standing for too long.";}}private static Vector2 HidePosition=ScriptHelper.GetFarAwayPosition();public class PlayerData{public float LastIdleTime=-1;public IObjectText Text;public bool IsIdle=false;}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.EnergyConsumptionModifier=0;mod.MeleeDamageDealtModifier=DamageDealt.VeryLow;p.SetModifiers(mod);var bs=p.GetBotBehaviorSet();bs.MeleeWaitTimeLimitMin=0;bs.MeleeWaitTimeLimitMax=IdleMaxTime;bs.RangedWeaponAimShootDelayMin=0;bs.RangedWeaponAimShootDelayMax=IdleMaxTime/2;bs.RangedWeaponPrecisionAimShootDelayMin=0;bs.RangedWeaponPrecisionAimShootDelayMax=IdleMaxTime/2;bs.RangedWeaponPrecisionInterpolateTime=IdleMaxTime/4;p.SetBotBehaviorSet(bs);}}public override void OnUpdate(float e,Player player){base.OnUpdate(e,player);if(Game.TotalElapsedGameTime<3000)return;var pData=GetPlayerData(player.UniqueID);if(pData==null)return;if(pData.Text==null){pData.Text=(IObjectText)Game.CreateObject("Text",HidePosition);pData.Text.SetTextColor(Color.Red);pData.Text.SetTextScale(1f);}var p=player.Instance;var isIdle=(p.IsIdle||p.IsManualAiming)&&player.Velocity.Length()<1;if(!pData.IsIdle&&isIdle){pData.LastIdleTime=Game.TotalElapsedGameTime;pData.Text.SetWorldPosition(player.Position+new Vector2(-6,-10));}if(pData.IsIdle&&!isIdle){pData.LastIdleTime=-1;pData.Text.SetWorldPosition(HidePosition);}if(pData.IsIdle==isIdle&&isIdle){pData.Text.SetText(((IdleMaxTime-Game.TotalElapsedGameTime+pData.LastIdleTime)/1000).ToString("0.0").Replace(",","."));}pData.IsIdle=isIdle;if(pData.LastIdleTime!=-1&&ScriptHelper.IsElapsed(pData.LastIdleTime,IdleMaxTime))Game.TriggerExplosion(player.Position);}public override void OnPlayerDealth(Player player,PlayerDeathArgs args){var pData=GetPlayerData(player.UniqueID);if(pData==null)return;pData.Text.Remove();base.OnPlayerDealth(player,args);}}public class BouncingChallenge:Challenge{public BouncingChallenge(ChallengeName name):base(name){}public override string Description{get{return"All guns have bouncing powerup.";}}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);projectile.PowerupBounceActive=true;}}public class BuffGunChallenge:ChallengeBase<BuffGunChallenge.PlayerData>{public BuffGunChallenge(ChallengeName name):base(name){}public override string Description{get{return"All guns deal x8 damage, melee weapons deal x0.1 damage.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var spawnChance=Game.GetWeaponSpawnChances();ScriptHelper.EnumToArray<WeaponItem>().ToList().ForEach(w=>{var type=Mapper.GetWeaponItemType(w);if(type==WeaponItemType.Rifle||type==WeaponItemType.Handgun)spawnChance[(short)w]=99;else spawnChance[(short)w]=1;});Game.UpdateWeaponSpawnChances(spawnChance);foreach(var p in players){var mod=p.GetModifiers();mod.MeleeDamageDealtModifier=DamageDealt.UltraLow;mod.ProjectileDamageDealtModifier=8f;p.SetModifiers(mod);var bs=p.GetBotBehaviorSet();bs.AggroRange=5;bs.SearchItems=SearchItems.Primary|SearchItems.Secondary|SearchItems.Streetsweeper|SearchItems.Health|SearchItems.Powerups;bs.MeleeWeaponUsage=false;bs.RangedWeaponUsage=true;p.SetBotBehaviorSet(bs);}}public class PlayerData{public bool HasRangedWeapon;}public override void OnUpdate(float e,Player player){base.OnUpdate(e,player);if(!player.IsBot||player.IsDead)return;var pData=GetPlayerData(player.UniqueID);if(pData==null)return;var hasRangedWeapon=player.Instance.CurrentWeaponDrawn==WeaponItemType.Rifle||player.Instance.CurrentWeaponDrawn!=WeaponItemType.Handgun;if(!pData.HasRangedWeapon&&hasRangedWeapon){var bs=player.Instance.GetBotBehaviorSet();bs.AggroRange=0;player.Instance.SetBotBehaviorSet(bs);pData.HasRangedWeapon=hasRangedWeapon;}if(pData.HasRangedWeapon&&!hasRangedWeapon){var bs=player.Instance.GetBotBehaviorSet();bs.AggroRange=5;player.Instance.SetBotBehaviorSet(bs);pData.HasRangedWeapon=hasRangedWeapon;}}}public class BuffMeleeChallenge:Challenge{public BuffMeleeChallenge(ChallengeName name):base(name){}public override string Description{get{return"All melee weapons (including fist) deal x8 damage, guns deal x0.1 damage.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.ProjectileDamageDealtModifier=DamageDealt.UltraLow;mod.MeleeDamageDealtModifier=8f;p.SetModifiers(mod);var bs=p.GetBotBehaviorSet();bs.SearchItems=SearchItems.Makeshift|SearchItems.Melee|SearchItems.Streetsweeper|SearchItems.Health|SearchItems.Powerups;bs.MeleeUsage=true;bs.RangedWeaponUsage=false;p.SetBotBehaviorSet(bs);}}}public class ChonkyChallenge:Challenge{public ChonkyChallenge(ChallengeName name):base(name){}public override string Description{get{return"All players are huge, extremely slow, have high melee damage and very strong melee forces.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.SizeModifier=Size.Chonky;mod.RunSpeedModifier=Speed.ExtremelySlow;mod.SprintSpeedModifier=Speed.ExtremelySlow;mod.MeleeForceModifier=MeleeForce.VeryStrong;mod.MeleeDamageDealtModifier=DamageDealt.High;p.SetModifiers(mod);}}}public class CritChallenge:Challenge{public CritChallenge(ChallengeName name):base(name){}public override string Description{get{return"All projectiles deal critical damage 100% of the time.";}}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);projectile.CritChanceDealtModifier=100f;}}public class DangerChallenge:Challenge{public DangerChallenge(ChallengeName name):base(name){}public override string Description{get{return"Dynamic objects are explosion barrels, small objects are propane tanks or gas cans.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var objs=Game.GetObjects<IObject>().Where(o=>ScriptHelper.IsDynamicG1(o));foreach(var o in objs){var size=o.GetSize();if(size.X<=8)continue;if(size.Y>=16)Game.CreateObject("BarrelExplosive",o.GetWorldPosition());else if(size.Y>=11)Game.CreateObject("PropaneTank",o.GetWorldPosition());else if(size.Y>=10)Game.CreateObject("Gascan00",o.GetWorldPosition());o.Remove();}}}public class DiseaseChallenge:Challenge{public DiseaseChallenge(ChallengeName name):base(name){}public override string Description{get{return"Players' health reduce gradually, deal damage to heal.";}}private readonly Func<float,bool>_isElapsedDisease=ScriptHelper.WithIsElapsed();public override void OnUpdate(float e){base.OnUpdate(e);if(!_isElapsedDisease(300))return;foreach(var p in PlayerManager.GetPlayers())p.DealDamage(1f);}public override void OnPlayerDamage(Player player,PlayerDamageArgs args,Player attacker){base.OnPlayerDamage(player,args,attacker);if(attacker==null)return;attacker.Instance.SetHealth(attacker.Instance.GetHealth()+5);}}public class DrugChallenge:Challenge{public static readonly float IdleMaxTime=1500;public DrugChallenge(ChallengeName name):base(name){}public override string Description{get{return"All players have unlimited strengthboost and speedboost.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){p.SetStrengthBoostTime(float.MaxValue);p.SetSpeedBoostTime(float.MaxValue);}}}public class FastBulletChallenge:Challenge{public FastBulletChallenge(ChallengeName name):base(name){}public override string Description{get{return"All projectiles have max velocity.";}}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);projectile.Velocity*=10;}public override void OnUpdate(float e,IProjectile projectile){base.OnUpdate(e,projectile);projectile.Position+=projectile.Velocity*(e/1000);}}public class FireChallenge:Challenge{public FireChallenge(ChallengeName name):base(name){}public override string Description{get{return"All guns have fire powerup.";}}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);projectile.PowerupFireActive=true;projectile.DamageDealtModifier=0.01f;}}public class ImpostorChallenge:Challenge{public static readonly float SwitchCooldown=2000;public ImpostorChallenge(ChallengeName name):base(name){}public override string Description{get{return"Players swap body on contact.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);ScriptHelper.Timeout(()=>{var playerList=players.ToList();var shuffledPlayers=RandomHelper.Shuffle(playerList);for(var i=0;i<playerList.Count;i++){var p1=playerList[i];var p2=shuffledPlayers[i];if(p1.UniqueID==p2.UniqueID)continue;var u1=p1.GetUser();var u2=p2.GetUser();var bs1=p1.GetBotBehaviorSet();var bs2=p2.GetBotBehaviorSet();p1.SetUser(u2,flash:false);p2.SetUser(u1,flash:false);p1.SetBotBehaviorSet(bs2);p2.SetBotBehaviorSet(bs1);p1.SetBotBehaviorActive(true);p2.SetBotBehaviorActive(true);p1.SetNametagVisible(false);p1.SetStatusBarsVisible(false);}},50);}public override void OnUpdate(float e,Player player){base.OnUpdate(e,player);var p=player.Instance;Game.DrawText((p.GetUser()==null)+" "+p.GetBotBehaviorActive()+" "+p.GetBotBehavior().PredefinedAI,player.Position);}}public class InfiniteAmmoChallenge:Challenge{public InfiniteAmmoChallenge(ChallengeName name):base(name){}public override string Description{get{return"Guns never run out of ammo.";}}public override void OnUpdate(float e,Player player){base.OnUpdate(e,player);var p=player.Instance;if(p.CurrentPrimaryWeapon.CurrentAmmo<p.CurrentPrimaryWeapon.MaxTotalAmmo)p.SetCurrentPrimaryWeaponAmmo(p.CurrentPrimaryWeapon.MaxTotalAmmo);if(p.CurrentSecondaryWeapon.CurrentAmmo<p.CurrentSecondaryWeapon.MaxTotalAmmo)p.SetCurrentSecondaryWeaponAmmo(p.CurrentSecondaryWeapon.MaxTotalAmmo);}}public class KickassChallenge:Challenge{public KickassChallenge(ChallengeName name):base(name){}public override string Description{get{return"Players have huge melee forces.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.MeleeForceModifier=MeleeForce.OnePunch;mod.ImpactDamageTakenModifier=DamageTaken.ExtremelyResistant;mod.ProjectileDamageTakenModifier=DamageTaken.VeryResistant;mod.MeleeDamageTakenModifier=DamageTaken.VeryResistant;p.SetModifiers(mod);}}}public class LootBoxChallenge:Challenge{public LootBoxChallenge(ChallengeName name):base(name){}public override string Description{get{return"Dynamic objects have 50% health. Destroyed objects spawn weapons.";}}public static readonly HashSet<string>DangerousObjects=new HashSet<string>(){"BarrelExplosive","PropaneTank","Gascan00",};public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var objs=Game.GetObjects<IObject>().Where(o=>ScriptHelper.IsDynamicG1(o)&&!DangerousObjects.Contains(o.Name));foreach(var o in objs)o.SetHealth(o.GetHealth()/2);}public override void OnObjectTerminated(IObject o){base.OnObjectTerminated(o);if(ScriptHelper.IsDynamicG1(o)&&!DangerousObjects.Contains(o.Name))Game.CreateObject(RandomHelper.GetItem(Constants.WeaponNames),o.GetWorldPosition());}}public class MinesweeperChallenge:Challenge{public MinesweeperChallenge(ChallengeName name):base(name){}public override string Description{get{return"Spawns mine randomly every 2 seconds.";}}private readonly Func<float,bool>_isElapsedSpawnMine=ScriptHelper.WithIsElapsed();private static readonly List<IObject>Mines=new List<IObject>();public override void OnUpdate(float e){base.OnUpdate(e);if(Game.IsEditorTest)Game.DrawText(Mines.Count+"",Vector2.Zero);if(_isElapsedSpawnMine(2000))SpawnMineRandomly();}private static void SpawnMineRandomly(){var groundPathNodes=Game.GetObjects<IObjectPathNode>().Where(x=>IsGroundPathNode(x)&&Mines.All(m=>!m.GetAABB().Intersects(x.GetAABB()))).ToList();if(groundPathNodes.Count==0)return;var node=RandomHelper.GetItem(groundPathNodes);var mine=Game.CreateObject("WpnMineThrown",node.GetWorldPosition());Mines.Add(mine);}public override void OnObjectTerminated(IObject o){base.OnObjectTerminated(o);if(o.Name=="WpnMineThrown")Mines.Remove(o);}private static bool IsGroundPathNode(IObjectPathNode n){return n.GetPathNodeType()==PathNodeType.Ground||n.GetPathNodeType()==PathNodeType.Platform;}}public class MoonwalkChallenge:ChallengeBase<MoonwalkChallenge.PlayerData>{public MoonwalkChallenge(ChallengeName name):base(name){}public override string Description{get{return" (EXPERIMENTAL) Players can only walk backward and face the wrong direction.";}}private static float GetSpeed(Player player){if(player.Instance.IsWalking)return 1.5f;if(player.Instance.IsRunning)return 2.5f;if(player.Instance.IsSprinting)return 3.5f;return Math.Abs(player.Velocity.X);}public class PlayerData{public bool PortalCooldown;public bool IsFlippedInPortal;}private static readonly List<IObjectPortal>Portals=Game.GetObjects<IObjectPortal>().ToList();public override void OnPlayerKeyInput(Player player,VirtualKeyInfo[]keyInfos){base.OnPlayerKeyInput(player,keyInfos);var pData=GetPlayerData(player.UniqueID);foreach(var keyInfo in keyInfos){if(keyInfo.Event==VirtualKeyEvent.Released){if(keyInfo.Key==VirtualKey.AIM_RUN_LEFT){pData.IsFlippedInPortal=false;}if(keyInfo.Key==VirtualKey.AIM_RUN_RIGHT){pData.IsFlippedInPortal=false;}}}}public override void OnUpdate(float e,Player player){base.OnUpdate(e,player);if(player.IsBot||player.IsDead)return;var pData=GetPlayerData(player.UniqueID);if(player.Instance.Name=="Near")Game.DrawText((pData==null)+"",player.Position);if(pData==null)return;if(!pData.PortalCooldown){foreach(var portal in Portals){if(portal.GetAABB().Intersects(player.Hitbox)){var destination=portal.GetDestinationPortal();if(destination!=null){player.Position=destination.GetWorldPosition();pData.PortalCooldown=true;pData.IsFlippedInPortal=true;ScriptHelper.Timeout(()=>pData.PortalCooldown=false,2000);break;}}}}var speed=GetSpeed(player);player.Position+=Vector2.UnitX*speed*-player.Direction*(pData.IsFlippedInPortal?-1:1);Game.DrawText(speed+"",player.Position);if(player.Instance.Name=="Near"){}}}public class NuclearChallenge:Challenge{public NuclearChallenge(ChallengeName name):base(name){}public override string Description{get{return"Explodes and destroys all entities in a radius on dealth.";}}public override void OnPlayerDealth(Player player,PlayerDeathArgs args){base.OnPlayerDealth(player,args);var position=player.Position;var angle=0;while(true){var totalBullets=10;var angleInBetween=360/totalBullets;var direction=ScriptHelper.GetDirection(MathExtension.ToRadians(angle));var pos=position+direction*15;Game.TriggerFireplosion(pos);Game.TriggerExplosion(pos);if(angle==360-angleInBetween)break;angle+=angleInBetween;}}}public class PrecisionChallenge:Challenge{public PrecisionChallenge(ChallengeName name):base(name){}public override string Description{get{return"All guns have laser and pinpoint accuracy.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var bs=p.GetBotBehaviorSet();bs.RangedWeaponPrecisionAccuracy=Math.Max(bs.RangedWeaponPrecisionAccuracy,.85f);p.SetBotBehaviorSet(bs);}}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);var owner=Game.GetPlayer(projectile.InitialOwnerPlayerID);Vector2 position,direction;if(owner==null||!owner.GetWeaponMuzzleInfo(out position,out direction))return;projectile.Direction=direction;}public override void OnPlayerWeaponAdded(Player player,PlayerWeaponAddedArg args){base.OnPlayerWeaponAdded(player,args);var p=player.Instance;var noPrimaryLaser=!p.CurrentPrimaryRangedWeapon.LazerEquipped&&args.WeaponItemType==WeaponItemType.Rifle;var noSecondaryLaser=!p.CurrentSecondaryRangedWeapon.LazerEquipped&&args.WeaponItemType==WeaponItemType.Handgun;if(noPrimaryLaser||noSecondaryLaser)p.GiveWeaponItem(WeaponItem.LAZER);}}public class SlowBulletChallenge:Challenge{public SlowBulletChallenge(ChallengeName name):base(name){}public override string Description{get{return"All projectiles have min velocity.";}}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);projectile.Velocity/=100;}}public class SniperChallenge:Challenge{public SniperChallenge(ChallengeName name):base(name){}public override string Description{get{return"You start with a sniper, all projectiles have infinite bouncing and fire powerups.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){p.GiveWeaponItem(WeaponItem.SNIPER);var mod=p.GetModifiers();mod.RunSpeedModifier=0;mod.SprintSpeedModifier=0;mod.InfiniteAmmo=1;mod.MaxEnergy=0;p.SetModifiers(mod);}}public override void OnUpdate(float e,IProjectile projectile){base.OnUpdate(e,projectile);if(projectile.BounceCount>0)projectile.BounceCount=0;}public override void OnProjectileCreated(IProjectile projectile){base.OnProjectileCreated(projectile);projectile.PowerupBounceActive=true;projectile.PowerupFireActive=true;}}public class SpecificWpnChallenge:Challenge{private readonly WeaponItem Weapon;private readonly static HashSet<WeaponItem>Blacklist=new HashSet<WeaponItem>{WeaponItem.NONE,WeaponItem.SLOWMO_10,WeaponItem.SLOWMO_5,WeaponItem.FIREAMMO,WeaponItem.BOUNCINGAMMO};private readonly static List<WeaponItem>AllWeapons=ScriptHelper.EnumToArray<WeaponItem>().Where(w=>!Blacklist.Contains(w)&&Mapper.GetWeaponItemType(w)!=WeaponItemType.Thrown).ToList();public SpecificWpnChallenge(ChallengeName name):base(name){Weapon=RandomHelper.GetItem(AllWeapons);}public override string Description{get{return string.Format("All supply crates spawn {0} weapon.",Weapon);}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var spawnChance=Game.GetWeaponSpawnChances();ScriptHelper.EnumToArray<WeaponItem>().ToList().ForEach(w=>spawnChance[(short)w]=w==Weapon?100:0);Game.UpdateWeaponSpawnChances(spawnChance);}}public class StrongObjectChallenge:Challenge{public StrongObjectChallenge(ChallengeName name):base(name){}public override string Description{get{return"Dynamic objects have infinite health.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var objs=Game.GetObjects<IObject>().Where(o=>ScriptHelper.IsDynamicObject(o));foreach(var o in objs)o.SetHealth(Math.Min(o.GetHealth()*100,5000));}public override void OnObjectDamage(IObject o,ObjectDamageArgs args){base.OnObjectDamage(o,args);if(ScriptHelper.IsDynamicObject(o))o.SetHealth(o.GetHealth()+args.Damage);}}public class SwitcharooChallenge:ChallengeBase<SwitcharooChallenge.PlayerData>{public static readonly float SwitchCooldown=2000;public SwitcharooChallenge(ChallengeName name):base(name){}public override string Description{get{return"Players swap body on contact.";}}public class PlayerData{public float LastSwapTime=0;public readonly Func<float,bool>IsElapsedCheckSwap=ScriptHelper.WithIsElapsed();}private bool CanBeSwitched(Player player){var pData=GetPlayerData(player.UniqueID);if(pData==null)return false;return ScriptHelper.IsElapsed(pData.LastSwapTime,SwitchCooldown);}public override void OnUpdate(float e,Player player){base.OnUpdate(e,player);var pData=GetPlayerData(player.UniqueID);if(pData==null)return;if(!pData.IsElapsedCheckSwap(200))return;var swappedPlayer=PlayerManager.GetPlayers().FirstOrDefault(p=>!p.IsDead&&p.UniqueID!=player.UniqueID&&CanBeSwitched(p)&&p.Hitbox.Intersects(player.Hitbox));if(swappedPlayer==null)return;if(ScriptHelper.IsElapsed(pData.LastSwapTime,SwitchCooldown)){var p1=player;var p2=swappedPlayer;var u1=p1.Instance.GetUser();var u2=p2.Instance.GetUser();var bs1=p1.Instance.GetBotBehaviorSet();var bs2=p2.Instance.GetBotBehaviorSet();p1.Instance.SetUser(u2,flash:false);p2.Instance.SetUser(u1,flash:false);p2.Instance.SetBotBehaviorSet(bs1);p1.Instance.SetBotBehaviorSet(bs2);p1.Instance.SetBotBehaviorActive(true);p2.Instance.SetBotBehaviorActive(true);GetPlayerData(p1.UniqueID).LastSwapTime=Game.TotalElapsedGameTime;GetPlayerData(p2.UniqueID).LastSwapTime=Game.TotalElapsedGameTime;Game.PlayEffect(EffectName.CustomFloatText,p1.Position+((p2.Position-p1.Position)/2),"swapped");}}}public class TinyChallenge:Challenge{public TinyChallenge(ChallengeName name):base(name){}public override string Description{get{return"All players are tiny, very fast, have low melee damage and weak melee forces.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.SizeModifier=Size.Tiny;mod.RunSpeedModifier=Speed.ExtremelyFast;mod.SprintSpeedModifier=Speed.ExtremelyFast;mod.MeleeForceModifier=MeleeForce.Weak;mod.MeleeDamageDealtModifier=DamageDealt.Low;p.SetModifiers(mod);}}}public class TrapChallenge:Challenge{public TrapChallenge(ChallengeName name):base(name){}public override string Description{get{return"Dynamic objects have 50% health. Destroyed objects spawn either cooked grenades, molotovs or mines.";}}public static readonly List<string>Traps=new List<string>(){"WpnGrenadesThrown","WpnMolotovsThrown","WpnMineThrown",};public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var objs=Game.GetObjects<IObject>().Where(o=>ScriptHelper.IsDynamicG1(o)&&!LootBoxChallenge.DangerousObjects.Contains(o.Name));foreach(var o in objs)o.SetHealth(o.GetHealth()/2);}public override void OnObjectTerminated(IObject o){base.OnObjectTerminated(o);if(ScriptHelper.IsDynamicG1(o)&&!LootBoxChallenge.DangerousObjects.Contains(o.Name))Game.CreateObject(RandomHelper.GetItem(Traps),o.GetWorldPosition());}}public class UnstableChallenge:Challenge{public UnstableChallenge(ChallengeName name):base(name){}public override string Description{get{return"Players have 15% chance of exploding after taking damage.";}}public override void OnPlayerDamage(Player player,PlayerDamageArgs args,Player attacker){base.OnPlayerDamage(player,args,attacker);if(RandomHelper.Percentage(.15f))Game.TriggerExplosion(player.Position);}}public class WeakChallenge:Challenge{public WeakChallenge(ChallengeName name):base(name){}public override string Description{get{return"All players are weak. Damage taken x3.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.ExplosionDamageTakenModifier=3f;mod.FireDamageTakenModifier=3f;mod.ImpactDamageTakenModifier=3f;mod.MeleeDamageTakenModifier=3f;mod.ProjectileCritChanceTakenModifier=3f;mod.ProjectileDamageTakenModifier=3f;p.SetModifiers(mod);}}}public class WeakObjectChallenge:Challenge{public WeakObjectChallenge(ChallengeName name):base(name){}public override string Description{get{return"Dynamic objects have 20 health max.";}}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);var objs=Game.GetObjects<IObject>().Where(o=>ScriptHelper.IsDynamicObject(o));foreach(var o in objs)o.SetHealth(Math.Min(o.GetHealth()/10,20));}}