// This file is auto generated by ScriptLinker at 18:00:45 22/05/2022
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: NearHuscarl
* description: Bunch of challenges
* mapmodes: 
*/
public void OnStartup(){if(Game.IsEditorTest){for(var i=0;i<5;i++){var bot=ScriptHelper.SpawnBot(BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotB));if(bot==null)continue;if(i<3)bot.SetTeam(PlayerTeam.Team2);else bot.SetTeam(PlayerTeam.Team3);}}Storage.Initialize();ChallengeManager.Initialize();}public void OnShutdown(){}public class Challenge{public ChallengeName Name{get;private set;}public Challenge(ChallengeName name){Name=name;Description="";}public virtual string Description{get;protected set;}public virtual void OnSpawn(IPlayer[]players){Game.ShowPopupMessage(string.Format(@"Challenge: {0}
{1}",Name,Description),ScriptColors.WARNING_COLOR);ScriptHelper.Timeout(()=>Game.HidePopupMessage(),5000);}public virtual void Update(float e){}public virtual void OnPlayerDealth(IPlayer player,PlayerDeathArgs args){}public virtual void OnObjectTerminated(IObject[]objs){}}public static class ChallengeFactory{public static Challenge Create(ChallengeName name){switch(name){case ChallengeName.Chonky:return new ChonkyChallenge(name);case ChallengeName.Kickass:return new KickassChallenge(name);case ChallengeName.Minesweeper:return new MinesweeperChallenge(name);case ChallengeName.Tiny:return new TinyChallenge(name);default:throw new ArgumentException("Challenge name "+name+" is not implemented");}}}public static class ChallengeManager{private static Challenge _challenge;public static void Initialize(){var name=GetCurrentChallenge();if(name==ChallengeName.None)return;_challenge=ChallengeFactory.Create(name);Events.UserMessageCallback.Start(Command.OnUserMessage);Events.UpdateCallback.Start(_challenge.Update);Events.PlayerDeathCallback.Start(_challenge.OnPlayerDealth);Events.ObjectTerminatedCallback.Start(_challenge.OnObjectTerminated);_challenge.OnSpawn(Game.GetPlayers());}private static ChallengeName GetCurrentChallenge(){var settings=Settings.Get();var currentChallenge=settings.CurrentChallenge;if(settings.RoundsUntilRotation==1){List<ChallengeName>challenges;if(settings.EnabledChallenges.Count>1)challenges=settings.EnabledChallenges.Where((f)=>f!=settings.CurrentChallenge).ToList();else challenges=settings.EnabledChallenges;currentChallenge=RandomHelper.GetItem(challenges);ScriptHelper.PrintMessage("Change challenge to "+currentChallenge);}Storage.SetItem("CURRENT_CHALLENGE",currentChallenge.ToString());if(settings.RotationEnabled){var roundTillNextRotation=settings.RoundsUntilRotation==1?settings.RotationInterval:settings.RoundsUntilRotation-1;Storage.SetItem("ROUNDS_UNTIL_ROTATION",roundTillNextRotation);}return currentChallenge;}}public enum ChallengeName{None,Chonky,Kickass,Minesweeper,Tiny,}public static class Command{private static readonly string NAME=Constants.SCRIPT_NAME;public static void OnUserMessage(UserMessageCallbackArgs args){if(!args.User.IsHost||!args.IsCommand||(args.Command!=NAME.ToUpperInvariant()&&args.Command!="CP")){return;}var message=args.CommandArguments.ToLowerInvariant();var words=message.Split(' ');var command=words.FirstOrDefault();var arguments=words.Skip(1);switch(command){case"?":case"h":case"help":PrintHelp();break;case"v":case"version":PrintVersion();break;case"s":case"settings":ShowCurrentSettings();break;case"lc":case"listchallenges":PrintChallenges();break;case"ec":case"enabledchallenges":SetEnabledChallenges(arguments);break;case"ri":case"rotationinterval":SetChallengeRotationInterval(arguments);break;case"nc":case"nextchallenge":SkipCurrentChallenge();break;default:ScriptHelper.PrintMessage("Invalid command: "+command,ScriptColors.ERROR_COLOR);break;}}private static void PrintHelp(){var command=NAME.ToLowerInvariant();ScriptHelper.PrintMessage(string.Format("--{0} help--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [help|h|?]: Print this help",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [version|v]: Print the current version",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [listchallenges|lc]: List all challenges",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [settings|s]: Display the current script's settings",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [enabledchallenges|ec] [-e] <names|indexes|all>: Set enabled challenges to play with",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [rotationinterval|ri] <1-10>: Set challenge rotation interval for every n rounds",command));ScriptHelper.PrintMessage(string.Format("/<{0}|cp> [nextchallenge|nc]: Reset the rotation interval and skip to the next challenge",command));}private static void PrintVersion(){ScriptHelper.PrintMessage(string.Format("--{0} version--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("v"+Constants.CURRENT_VERSION);}private static IEnumerable<string>GetChallenges(){var challenges=ScriptHelper.EnumToArray<ChallengeName>();foreach(var challenge in challenges){yield return((int)challenge).ToString()+": "+ScriptHelper.EnumToString(challenge);}}private static void PrintChallenges(){ScriptHelper.PrintMessage(string.Format("--{0} list challenges--",NAME),ScriptColors.ERROR_COLOR);foreach(var challenge in GetChallenges()){ScriptHelper.PrintMessage(challenge,ScriptColors.WARNING_COLOR);}}private static void ShowCurrentSettings(){ScriptHelper.PrintMessage(string.Format("--{0} settings--",NAME),ScriptColors.ERROR_COLOR);var settings=Settings.Get();var challengeNames=settings.EnabledChallenges;var currentChallenge=settings.CurrentChallenge;var isAllChallenges=challengeNames.Count==ScriptHelper.EnumToArray<ChallengeName>().Count()-1;var challengesValue=isAllChallenges?"All":string.Join(",",challengeNames);ScriptHelper.PrintMessage(string.Format("-Current Challenge: {0}",currentChallenge));ScriptHelper.PrintMessage(string.Format("-Enabled Challenges: {0}",challengesValue));var rotationInterval=settings.RotationEnabled?settings.RotationInterval.ToString():"Disabled";var roundsUntilRotation=settings.RotationEnabled?settings.RoundsUntilRotation.ToString():"N/a";ScriptHelper.PrintMessage("-Challenge rotation interval: "+rotationInterval,ScriptColors.WARNING_COLOR);ScriptHelper.PrintMessage("-Rounds until rotation: "+roundsUntilRotation,ScriptColors.WARNING_COLOR);}private static void SetEnabledChallenges(IEnumerable<string>arguments){var allChallenges=ScriptHelper.EnumToArray<ChallengeName>().Select((f)=>ScriptHelper.EnumToString(f)).ToList();var challenges=new List<string>();var excludeFlag=false;ChallengeName challenge;if(arguments.Count()==0){ScriptHelper.PrintMessage(string.Format("--{0} SetEnabledChallenges--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("Invalid command: Argument is empty",ScriptColors.WARNING_COLOR);return;}if(arguments.Count()==1&&(arguments.Single()=="all"||arguments.Single()=="none")){if(arguments.Single()=="all")challenges=new List<string>{"All"};if(arguments.Single()=="none")challenges=new List<string>{"None"};}else{if(arguments.First()=="-e"){excludeFlag=true;arguments=arguments.Skip(1);}foreach(var arg in arguments){if(arg=="none"){ScriptHelper.PrintMessage(string.Format("--{0} SetEnabledChallenges--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("Invalid argument: Cannot mix None with other options",ScriptColors.WARNING_COLOR);return;}if(ScriptHelper.TryParseEnum(arg,out challenge)){challenges.Add(ScriptHelper.EnumToString(challenge));}else{ScriptHelper.PrintMessage(string.Format("--{0} SetEnabledChallenges--",NAME),ScriptColors.ERROR_COLOR);ScriptHelper.PrintMessage("Invalid argument: "+arg,ScriptColors.WARNING_COLOR);return;}}}if(excludeFlag){challenges=allChallenges.Where((f)=>!challenges.Contains(f)).ToList();}Storage.SetItem("ENABLED_CHALLENGES",challenges.Distinct().ToArray());ScriptHelper.PrintMessage(string.Format("[{0}] Update successfully",NAME));}private static void SetChallengeRotationInterval(IEnumerable<string>arguments){var firstArg=arguments.FirstOrDefault();if(firstArg==null)return;int value=-1;if(int.TryParse(firstArg,out value)){value=(int)MathHelper.Clamp(value,0,10);Storage.SetItem("ROTATION_INTERVAL",value);Storage.SetItem("ROUNDS_UNTIL_ROTATION",value);ScriptHelper.PrintMessage(string.Format("[{0}] Update successfully--",NAME));}else ScriptHelper.PrintMessage(string.Format("[{0}] Invalid query: {1}",NAME,firstArg),ScriptColors.WARNING_COLOR);}private static void SkipCurrentChallenge(){Storage.SetItem("ROUNDS_UNTIL_ROTATION",1);ScriptHelper.PrintMessage(string.Format("[{0}] Update successfully",NAME));}}public static class Constants{internal const float CORPSE_MAX_HEALTH=150;internal const float MAX_WALK_SPEED=2.5f;internal const float MAX_SPRINT_SPEED=3.5f;internal const string SCRIPT_NAME="ChallengePlus";internal const string STORAGE_KEY_PREFIX="CP_";internal const string CURRENT_VERSION="0.0.0";internal const float ExplosionRadius=38.5f;internal const int DEFAULT_CHALLENGE_ROTATION_INTERVAL=3;internal static readonly string[]DEFAULT_ENABLED_CHALLENGES=new string[]{"All"};internal const int TOGGLE_ON=1;internal const int TOGGLE_OFF=0;internal static readonly WeaponItemType[]WeaponItemTypes=new WeaponItemType[]{WeaponItemType.Melee,WeaponItemType.Rifle,WeaponItemType.Handgun,WeaponItemType.Thrown,WeaponItemType.Powerup,WeaponItemType.InstantPickup,};internal static readonly PlayerTeam[]Teams=new PlayerTeam[]{PlayerTeam.Team1,PlayerTeam.Team2,PlayerTeam.Team3,PlayerTeam.Team4,};internal static readonly string[]Giblets=new string[]{"Giblet00","Giblet01","Giblet02","Giblet03","Giblet04",};internal static readonly string[]WeaponNames=new string[]{"WpnPistol","WpnPistol45","WpnSilencedPistol","WpnMachinePistol","WpnMagnum","WpnRevolver","WpnPumpShotgun","WpnDarkShotgun","WpnTommygun","WpnSMG","WpnM60","WpnPipeWrench","WpnChain","WpnWhip","WpnHammer","WpnKatana","WpnMachete","WpnChainsaw","WpnKnife","WpnSawedoff","WpnBat","WpnBaton","WpnShockBaton","WpnLeadPipe","WpnUzi","WpnSilencedUzi","WpnBazooka","WpnAxe","WpnAssaultRifle","WpnMP50","WpnSniperRifle","WpnCarbine","WpnFlamethrower","ItemPills","ItemMedkit","ItemSlomo5","ItemSlomo10","ItemStrengthBoost","ItemSpeedBoost","ItemLaserSight","ItemBouncingAmmo","ItemFireAmmo","WpnGrenades","WpnMolotovs","WpnMines","WpnShuriken","WpnBow","WpnFlareGun","WpnGrenadeLauncher",};internal static CollisionFilter NoCollision{get{return new CollisionFilter(){AboveBits=0,CategoryBits=0,MaskBits=0,AbsorbProjectile=false,BlockExplosions=false,BlockFire=false,BlockMelee=false,ProjectileHit=false,};}}}public struct ScriptColors{public static readonly Color Team1=new Color(64,64,128);public static readonly Color Team2=new Color(128,40,40);public static readonly Color Team3=new Color(0,112,0);public static readonly Color Team4=new Color(112,112,0);public static readonly Color Red=new Color(128,32,32);public static readonly Color Orange=new Color(255,128,24);public static readonly Color MESSAGE_COLOR=new Color(24,238,200);public static readonly Color ERROR_COLOR=new Color(244,77,77);public static readonly Color WARNING_COLOR=new Color(249,191,11);}public enum FaceDirection{None,Left,Right,}public enum ClothingType{Accesory,ChestOver,ChestUnder,Feet,Hands,Head,Legs,Waist,}public static class Health{internal const int Hacker=400;internal const int UltraStrong=300;internal const int ExtremelyStrong=250;internal const int VeryStrong=200;internal const int Strong=150;internal const int AboveNormal=125;internal const int Normal=100;internal const int BelowNormal=80;internal const int Weak=65;internal const int VeryWeak=50;internal const int ExtremelyWeak=35;internal const int EmbarrassinglyWeak=20;internal const int BarelyAny=5;}public static class Stamina{internal const int Hacker=400;internal const int UltraHigh=300;internal const int ExtremelyHigh=250;internal const int VeryHigh=200;internal const int High=150;internal const int AboveNormal=125;internal const int Normal=100;internal const int BelowNormal=80;internal const int Low=65;internal const int VeryLow=50;internal const int ExtremelyLow=35;internal const int EmbarrassinglyLow=20;internal const int BarelyAny=5;}public static class Speed{internal const float Hacker=2f;internal const float UltraFast=1.75f;internal const float ExtremelyFast=1.5f;internal const float VeryFast=1.35f;internal const float Fast=1.2f;internal const float AboveNormal=1.1f;internal const float Normal=1f;internal const float BelowNormal=.9f;internal const float Slow=.8f;internal const float VerySlow=.7f;internal const float ExtremelySlow=.6f;internal const float BarelyAny=.5f;}public static class Size{internal const float Chonky=1.25f;internal const float ExtremelyBig=1.2f;internal const float VeryBig=1.15f;internal const float Big=1.1f;internal const float AboveNormal=1.05f;internal const float Normal=1f;internal const float BelowNormal=.95f;internal const float Small=.9f;internal const float VerySmall=.85f;internal const float ExtremelySmall=.8f;internal const float Tiny=.75f;}public static class MeleeForce{internal const float OnePunch=5f;internal const float UltraStrong=3f;internal const float ExtremelyStrong=2f;internal const float VeryStrong=1.75f;internal const float Strong=1.5f;internal const float AboveNormal=1.25f;internal const float Normal=1f;internal const float Weak=0.5f;internal const float None=0f;}public static class EnergyRecharge{internal const float Quick=1.5f;internal const float Normal=1f;internal const float Slow=.5f;}public static class DamageDealt{internal const float OnePunch=10f;internal const float UltraHigh=5f;internal const float ExtremelyHigh=2f;internal const float VeryHigh=1.5f;internal const float High=1.25f;internal const float FairlyHigh=1.2f;internal const float AboveNormal=1.1f;internal const float Normal=1f;internal const float BelowNormal=.9f;internal const float FairlyLow=.8f;internal const float Low=.75f;internal const float VeryLow=.5f;internal const float ExtremelyLow=.25f;internal const float UltraLow=.1f;internal const float None=0f;}public static class DamageTaken{internal const float Defenseless=10f;internal const float UltraVulnerable=5f;internal const float ExtremelyVulnerable=2f;internal const float VeryVulnerable=1.5f;internal const float Vulnerable=1.25f;internal const float FairlyVulnerable=1.2f;internal const float SlightlyVulnerable=1.1f;internal const float Normal=1f;internal const float SlightlyResistant=.9f;internal const float FairlyResistant=.8f;internal const float Resistant=.75f;internal const float VeryResistant=.5f;internal const float ExtremelyResistant=.25f;internal const float UltraResistant=.1f;internal const float Unbeatable=0f;}public static class ItemDropMode{internal const int Normal=0;internal const int Break=1;internal const int Remove=2;}public static class CategoryBits{internal const ushort None=0x0000;internal const ushort StaticGround=0x0001;internal const ushort DynamicPlatform=0x0002;internal const ushort Player=0x0004;internal const ushort DynamicG1=0x0008;internal const ushort DynamicG2=0x0010;internal const ushort Dynamic=DynamicG1+DynamicG2;internal const ushort Items=0x0020;internal const ushort Debris=0x0010;internal const ushort DynamicsThrown=0x8000;}public static class WpnSearchRange{public const float Infinite=0f;public const float InSight=80f;public const float Nearby=20f;}static class MathExtension{public const float TwoPI=MathHelper.TwoPI;public const float PI=MathHelper.PI;public const float PIOver2=MathHelper.PIOver2;public const float PIOver4=MathHelper.PIOver4;public const float PIOver8=MathHelper.PIOver8;public const float PI_3Over2=TwoPI-PIOver2;public const float OneDeg=MathHelper.PI/180;public static float ToRadians(float angleDegree){return(float)(angleDegree*Math.PI)/180;}public static float ToDegree(float radians){return radians*180/(float)Math.PI;}public static float NormalizeAngle(float radian){var result=radian%MathHelper.TwoPI;return result<0?result+MathHelper.TwoPI:result;}public static float Diff(float a,float b){return Math.Abs(Math.Abs(a)-Math.Abs(b));}public static bool InRange(float value,float min,float max){return min<=value&&value<=max;}public static float AngleBetween(Vector2 vector1,Vector2 vector2){double sin=vector1.X*vector2.Y-vector2.X*vector1.Y;double cos=vector1.X*vector2.X+vector1.Y*vector2.Y;return(float)Math.Atan2(sin,cos);}}public static class RandomHelper{public static Random Rnd{get;set;}static RandomHelper(){Rnd=new Random();}public static bool Boolean(){return Rnd.NextDouble()>=0.5;}public static float Between(float min,float max){return(float)Rnd.NextDouble()*(max-min)+min;}public static int BetweenInt(int min,int max){return Rnd.Next(min,max);}public static T GetItem<T>(List<T>list){if(list.Count==0)throw new Exception("list is empty");var rndIndex=Rnd.Next(list.Count);return list[rndIndex];}public static T GetItem<T>(params T[]list){if(list.Length==0)throw new Exception("list is empty");var rndIndex=Rnd.Next(list.Length);return list[rndIndex];}public static T GetEnumValue<T>()where T:struct,IConvertible{if(!typeof(T).IsEnum){throw new ArgumentException("T must be an enumerated type");}var enumValues=Enum.GetValues(typeof(T));return(T)enumValues.GetValue(Rnd.Next(enumValues.Length));}public static bool Percentage(float chance){return Between(0f,1f)<chance;}public static IList<T>Shuffle<T>(IList<T>list){var n=list.Count;while(n>1){n--;var k=Rnd.Next(n+1);var swap=list[k];list[k]=list[n];list[n]=swap;}return list;}}public static class ScriptHelper{public static void PrintMessage(string message,Color?color=null){Game.ShowChatMessage(message,color??ScriptColors.MESSAGE_COLOR);}public class PlayerSpawner{public Vector2 Position{get;set;}public bool HasSpawned{get;set;}}public static List<PlayerSpawner>GetPlayerSpawners(){var spawners=Game.GetObjectsByName("SpawnPlayer");var emptySpawners=new List<PlayerSpawner>();var players=Game.GetPlayers().Where(p=>!p.IsDead).ToList();foreach(var spawner in spawners){var hasPlayer=players.Any(x=>x.GetAABB().Intersects(spawner.GetAABB()));emptySpawners.Add(new PlayerSpawner{Position=spawner.GetWorldPosition(),HasSpawned=hasPlayer,});}return emptySpawners;}private static List<PlayerSpawner>_spawners=GetPlayerSpawners();public static IPlayer SpawnBot(BotBehaviorSet botBehaviorSet){if(_spawners.Count==0)return null;var spawner=RandomHelper.GetItem(_spawners.Where(s=>!s.HasSpawned).ToList());var player=Game.CreatePlayer(spawner.Position);player.SetBotBehaviorSet(botBehaviorSet);player.SetBotBehaviorActive(true);spawner.HasSpawned=true;return player;}public static void Timeout(Action callback,uint interval){Events.UpdateCallback.Start(e=>callback.Invoke(),interval,1);}public static bool IsElapsed(float timeStarted,float timeToElapse){return Game.TotalElapsedGameTime-timeStarted>=timeToElapse;}public static Func<float,bool>WithIsElapsed(){var timeStarted=0f;return(interval)=>{if(IsElapsed(timeStarted,interval)){timeStarted=Game.TotalElapsedGameTime;return true;}return false;};}public static Func<float,float,bool>WithIsElapsed2(){var timeStarted=0f;var interval=0f;return(minTime,maxTime)=>{if(IsElapsed(timeStarted,interval)){timeStarted=Game.TotalElapsedGameTime;interval=RandomHelper.Between(minTime,maxTime);return true;}return false;};}public static bool TryParseEnum<T>(string str,out T result)where T:struct,IConvertible{result=default(T);if(!typeof(T).IsEnum){return false;}int index=-1;if(int.TryParse(str,out index)){if(Enum.IsDefined(typeof(T),index)){result=(T)(object)index;}else{return false;}}else{if(!Enum.TryParse(str,ignoreCase:true,result:out result)){return false;}}return true;}public static T StringToEnum<T>(string str){return(T)Enum.Parse(typeof(T),str);}public static string EnumToString<T>(T enumVal){return Enum.GetName(typeof(T),enumVal);}public static T[]EnumToArray<T>(){return(T[])Enum.GetValues(typeof(T));}}class Settings{public readonly int RotationInterval;public bool RotationEnabled{get{return RotationInterval!=0;}}public readonly int RoundsUntilRotation;public readonly List<ChallengeName>EnabledChallenges;public readonly ChallengeName CurrentChallenge;public Settings(int rotationInterval,int roundsUntilRotation,List<ChallengeName>enabledChallenges,ChallengeName currentChallenge){RotationInterval=rotationInterval;RoundsUntilRotation=roundsUntilRotation;EnabledChallenges=enabledChallenges;CurrentChallenge=currentChallenge;}public static Settings Get(){var rotationIntervalResult=Storage.GetInt("ROTATION_INTERVAL");if(!rotationIntervalResult.Success){rotationIntervalResult.Data=Constants.DEFAULT_CHALLENGE_ROTATION_INTERVAL;Storage.SetItem("ROTATION_INTERVAL",Constants.DEFAULT_CHALLENGE_ROTATION_INTERVAL);}var roundsUntilRotationResult=Storage.GetInt("ROUNDS_UNTIL_ROTATION");if(!roundsUntilRotationResult.Success){roundsUntilRotationResult.Data=rotationIntervalResult.Data;Storage.SetItem("ROUNDS_UNTIL_ROTATION",rotationIntervalResult.Data);}var currentChallengeResult=Storage.GetString("CURRENT_CHALLENGE");if(!currentChallengeResult.Success){currentChallengeResult.Data="None";Storage.SetItem("CURRENT_CHALLENGE",currentChallengeResult.Data);}var currentChallenge=ScriptHelper.StringToEnum<ChallengeName>(currentChallengeResult.Data);var enabledChallengesResult=Storage.GetStringArr("ENABLED_CHALLENGES");if(!enabledChallengesResult.Success){enabledChallengesResult.Data=Constants.DEFAULT_ENABLED_CHALLENGES;Storage.SetItem("ENABLED_CHALLENGES",Constants.DEFAULT_ENABLED_CHALLENGES);}var enabledChallenges=new List<ChallengeName>();if(enabledChallengesResult.Data.Count()==1&&enabledChallengesResult.Data.Single()=="All"){enabledChallenges=ScriptHelper.EnumToArray<ChallengeName>().Where((x)=>x!=ChallengeName.None).ToList();}else{foreach(var c in enabledChallengesResult.Data){enabledChallenges.Add(ScriptHelper.StringToEnum<ChallengeName>(c));}}return new Settings(rotationIntervalResult.Data,roundsUntilRotationResult.Data,enabledChallenges,currentChallenge);}}public static class SFD{public static IGame Game;}public struct StorageResult<T>{public T Data;public bool Success;}public static class Storage{public static IScriptStorage Instance;public static void Initialize(){Instance=Game.GetSharedStorage(Constants.SCRIPT_NAME);}public static string StorageKey(string key){return Constants.STORAGE_KEY_PREFIX+key;}public static void SetItem(string key,int value){Instance.SetItem(StorageKey(key),value);}public static void SetItem(string key,string[]value){Instance.SetItem(StorageKey(key),value);}public static void SetItem(string key,string value){Instance.SetItem(StorageKey(key),value);}public static StorageResult<int>GetInt(string key){int value;if(Instance.TryGetItemInt(StorageKey(key),out value)){return new StorageResult<int>{Data=value,Success=true};}return new StorageResult<int>{Data=default(int),Success=false};}public static StorageResult<string>GetString(string key){string value;if(Instance.TryGetItemString(StorageKey(key),out value)){return new StorageResult<string>{Data=value,Success=true};}return new StorageResult<string>{Data=default(string),Success=false};}public static StorageResult<string[]>GetStringArr(string key){string[]value;if(Instance.TryGetItemStringArr(StorageKey(key),out value)){return new StorageResult<string[]>{Data=value,Success=true};}return new StorageResult<string[]>{Data=new string[]{},Success=false};}}public class ChonkyChallenge:Challenge{public ChonkyChallenge(ChallengeName name):base(name){}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.SizeModifier=Size.Chonky;mod.RunSpeedModifier=Speed.ExtremelySlow;mod.SprintSpeedModifier=Speed.ExtremelySlow;mod.MeleeForceModifier=MeleeForce.VeryStrong;mod.MeleeDamageDealtModifier=DamageDealt.High;p.SetModifiers(mod);}}}public class KickassChallenge:Challenge{public KickassChallenge(ChallengeName name):base(name){}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.MeleeForceModifier=MeleeForce.OnePunch;mod.ImpactDamageTakenModifier=DamageTaken.ExtremelyResistant;mod.ProjectileDamageTakenModifier=DamageTaken.VeryResistant;mod.MeleeDamageTakenModifier=DamageTaken.VeryResistant;p.SetModifiers(mod);}}}public class MinesweeperChallenge:Challenge{public MinesweeperChallenge(ChallengeName name):base(name){}public override string Description{get{return"Spawns mine randomly every 2 seconds.";}}private readonly Func<float,bool>_isElapsedSpawnMine=ScriptHelper.WithIsElapsed();private static readonly List<IObject>Mines=new List<IObject>();public override void Update(float e){base.Update(e);if(Game.IsEditorTest)Game.DrawText(Mines.Count+"",Vector2.Zero);if(_isElapsedSpawnMine(2000))SpawnMineRandomly();}private static void SpawnMineRandomly(){var groundPathNodes=Game.GetObjects<IObjectPathNode>().Where(x=>IsGroundPathNode(x)&&Mines.All(m=>!m.GetAABB().Intersects(x.GetAABB()))).ToList();if(groundPathNodes.Count==0)return;var node=RandomHelper.GetItem(groundPathNodes);var mine=Game.CreateObject("WpnMineThrown",node.GetWorldPosition());Mines.Add(mine);}public override void OnObjectTerminated(IObject[]objs){base.OnObjectTerminated(objs);foreach(var o in objs){if(o.Name=="WpnMineThrown")Mines.Remove(o);}}private static bool IsGroundPathNode(IObjectPathNode n){return n.GetPathNodeType()==PathNodeType.Ground||n.GetPathNodeType()==PathNodeType.Platform;}}public class TinyChallenge:Challenge{public TinyChallenge(ChallengeName name):base(name){}public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.SizeModifier=Size.Tiny;mod.RunSpeedModifier=Speed.ExtremelyFast;mod.SprintSpeedModifier=Speed.ExtremelyFast;mod.MeleeForceModifier=MeleeForce.Weak;mod.MeleeDamageDealtModifier=DamageDealt.Low;p.SetModifiers(mod);}}}