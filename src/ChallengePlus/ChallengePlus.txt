// This file is auto generated by ScriptLinker at 23:52:25 20/05/2022
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: NearHuscarl
* description: Bunch of challenges
* mapmodes: 
*/
public void OnStartup(){if(Game.IsEditorTest){for(var i=0;i<5;i++){var bot=ScriptHelper.SpawnBot(BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.BotB));if(bot==null)continue;if(i<3)bot.SetTeam(PlayerTeam.Team2);else bot.SetTeam(PlayerTeam.Team3);}}ChallengeManager.Initialize();}public void OnShutdown(){}public class Challenge{public virtual void OnSpawn(IPlayer[]players){}public virtual void Update(float e){}public virtual void OnPlayerDealth(IPlayer player,PlayerDeathArgs args){}}public static class ChallengeFactory{public static Challenge Create(ChallengeName name){switch(name){case ChallengeName.Tiny:return new TinyChallenge();case ChallengeName.Chonky:return new ChonkyChallenge();default:throw new ArgumentException("Challenge name "+name+" is not implemented");}}}public static class ChallengeManager{private static Challenge _challenge;public static void Initialize(){var names=ScriptHelper.EnumToArray<ChallengeName>().Where(x=>x!=ChallengeName.None);var name=RandomHelper.GetItem(names.ToList());_challenge=ChallengeFactory.Create(name);ScriptHelper.PrintMessage("Current challenge: "+name);Events.UpdateCallback.Start(_challenge.Update);Events.PlayerDeathCallback.Start(_challenge.OnPlayerDealth);_challenge.OnSpawn(Game.GetPlayers());}}public enum ChallengeName{None,Tiny,Chonky,}public static class Constants{internal const float CORPSE_MAX_HEALTH=150;internal const float MAX_WALK_SPEED=2.5f;internal const float MAX_SPRINT_SPEED=3.5f;internal const string STORAGE_KEY_PREFIX="CP_";internal const float ExplosionRadius=38.5f;internal const int DEFAULT_CHALLENGE_ROTATION_INTERVAL=3;internal const int TOGGLE_ON=1;internal const int TOGGLE_OFF=0;internal static readonly WeaponItemType[]WeaponItemTypes=new WeaponItemType[]{WeaponItemType.Melee,WeaponItemType.Rifle,WeaponItemType.Handgun,WeaponItemType.Thrown,WeaponItemType.Powerup,WeaponItemType.InstantPickup,};internal static readonly PlayerTeam[]Teams=new PlayerTeam[]{PlayerTeam.Team1,PlayerTeam.Team2,PlayerTeam.Team3,PlayerTeam.Team4,};internal static readonly string[]Giblets=new string[]{"Giblet00","Giblet01","Giblet02","Giblet03","Giblet04",};internal static readonly string[]WeaponNames=new string[]{"WpnPistol","WpnPistol45","WpnSilencedPistol","WpnMachinePistol","WpnMagnum","WpnRevolver","WpnPumpShotgun","WpnDarkShotgun","WpnTommygun","WpnSMG","WpnM60","WpnPipeWrench","WpnChain","WpnWhip","WpnHammer","WpnKatana","WpnMachete","WpnChainsaw","WpnKnife","WpnSawedoff","WpnBat","WpnBaton","WpnShockBaton","WpnLeadPipe","WpnUzi","WpnSilencedUzi","WpnBazooka","WpnAxe","WpnAssaultRifle","WpnMP50","WpnSniperRifle","WpnCarbine","WpnFlamethrower","ItemPills","ItemMedkit","ItemSlomo5","ItemSlomo10","ItemStrengthBoost","ItemSpeedBoost","ItemLaserSight","ItemBouncingAmmo","ItemFireAmmo","WpnGrenades","WpnMolotovs","WpnMines","WpnShuriken","WpnBow","WpnFlareGun","WpnGrenadeLauncher",};internal static CollisionFilter NoCollision{get{return new CollisionFilter(){AboveBits=0,CategoryBits=0,MaskBits=0,AbsorbProjectile=false,BlockExplosions=false,BlockFire=false,BlockMelee=false,ProjectileHit=false,};}}}public struct BeColors{public static readonly Color Team1=new Color(64,64,128);public static readonly Color Team2=new Color(128,40,40);public static readonly Color Team3=new Color(0,112,0);public static readonly Color Team4=new Color(112,112,0);public static readonly Color Red=new Color(128,32,32);public static readonly Color Orange=new Color(255,128,24);public static readonly Color MESSAGE_COLOR=new Color(24,238,200);public static readonly Color ERROR_COLOR=new Color(244,77,77);public static readonly Color WARNING_COLOR=new Color(249,191,11);}public enum FaceDirection{None,Left,Right,}public enum ClothingType{Accesory,ChestOver,ChestUnder,Feet,Hands,Head,Legs,Waist,}public static class Health{internal const int Hacker=400;internal const int UltraStrong=300;internal const int ExtremelyStrong=250;internal const int VeryStrong=200;internal const int Strong=150;internal const int AboveNormal=125;internal const int Normal=100;internal const int BelowNormal=80;internal const int Weak=65;internal const int VeryWeak=50;internal const int ExtremelyWeak=35;internal const int EmbarrassinglyWeak=20;internal const int BarelyAny=5;}public static class Stamina{internal const int Hacker=400;internal const int UltraHigh=300;internal const int ExtremelyHigh=250;internal const int VeryHigh=200;internal const int High=150;internal const int AboveNormal=125;internal const int Normal=100;internal const int BelowNormal=80;internal const int Low=65;internal const int VeryLow=50;internal const int ExtremelyLow=35;internal const int EmbarrassinglyLow=20;internal const int BarelyAny=5;}public static class Speed{internal const float Hacker=2f;internal const float UltraFast=1.75f;internal const float ExtremelyFast=1.5f;internal const float VeryFast=1.35f;internal const float Fast=1.2f;internal const float AboveNormal=1.1f;internal const float Normal=1f;internal const float BelowNormal=.9f;internal const float Slow=.8f;internal const float VerySlow=.7f;internal const float ExtremelySlow=.6f;internal const float BarelyAny=.5f;}public static class Size{internal const float Chonky=1.25f;internal const float ExtremelyBig=1.2f;internal const float VeryBig=1.15f;internal const float Big=1.1f;internal const float AboveNormal=1.05f;internal const float Normal=1f;internal const float BelowNormal=.95f;internal const float Small=.9f;internal const float VerySmall=.85f;internal const float ExtremelySmall=.8f;internal const float Tiny=.75f;}public static class MeleeForce{internal const float OnePunch=5f;internal const float UltraStrong=3f;internal const float ExtremelyStrong=2f;internal const float VeryStrong=1.75f;internal const float Strong=1.5f;internal const float AboveNormal=1.25f;internal const float Normal=1f;internal const float Weak=0.5f;internal const float None=0f;}public static class EnergyRecharge{internal const float Quick=1.5f;internal const float Normal=1f;internal const float Slow=.5f;}public static class DamageDealt{internal const float OnePunch=10f;internal const float UltraHigh=5f;internal const float ExtremelyHigh=2f;internal const float VeryHigh=1.5f;internal const float High=1.25f;internal const float FairlyHigh=1.2f;internal const float AboveNormal=1.1f;internal const float Normal=1f;internal const float BelowNormal=.9f;internal const float FairlyLow=.8f;internal const float Low=.75f;internal const float VeryLow=.5f;internal const float ExtremelyLow=.25f;internal const float UltraLow=.1f;internal const float None=0f;}public static class DamageTaken{internal const float Defenseless=10f;internal const float UltraVulnerable=5f;internal const float ExtremelyVulnerable=2f;internal const float VeryVulnerable=1.5f;internal const float Vulnerable=1.25f;internal const float FairlyVulnerable=1.2f;internal const float SlightlyVulnerable=1.1f;internal const float Normal=1f;internal const float SlightlyResistant=.9f;internal const float FairlyResistant=.8f;internal const float Resistant=.75f;internal const float VeryResistant=.5f;internal const float ExtremelyResistant=.25f;internal const float UltraResistant=.1f;internal const float Unbeatable=0f;}public static class ItemDropMode{internal const int Normal=0;internal const int Break=1;internal const int Remove=2;}public static class CategoryBits{internal const ushort None=0x0000;internal const ushort StaticGround=0x0001;internal const ushort DynamicPlatform=0x0002;internal const ushort Player=0x0004;internal const ushort DynamicG1=0x0008;internal const ushort DynamicG2=0x0010;internal const ushort Dynamic=DynamicG1+DynamicG2;internal const ushort Items=0x0020;internal const ushort Debris=0x0010;internal const ushort DynamicsThrown=0x8000;}public static class WpnSearchRange{public const float Infinite=0f;public const float InSight=80f;public const float Nearby=20f;}public static class RandomHelper{public static Random Rnd{get;set;}static RandomHelper(){Rnd=new Random();}public static bool Boolean(){return Rnd.NextDouble()>=0.5;}public static float Between(float min,float max){return(float)Rnd.NextDouble()*(max-min)+min;}public static int BetweenInt(int min,int max){return Rnd.Next(min,max);}public static T GetItem<T>(List<T>list){if(list.Count==0)throw new Exception("list is empty");var rndIndex=Rnd.Next(list.Count);return list[rndIndex];}public static T GetItem<T>(params T[]list){if(list.Length==0)throw new Exception("list is empty");var rndIndex=Rnd.Next(list.Length);return list[rndIndex];}public static T GetEnumValue<T>()where T:struct,IConvertible{if(!typeof(T).IsEnum){throw new ArgumentException("T must be an enumerated type");}var enumValues=Enum.GetValues(typeof(T));return(T)enumValues.GetValue(Rnd.Next(enumValues.Length));}public static bool Percentage(float chance){return Between(0f,1f)<chance;}public static IList<T>Shuffle<T>(IList<T>list){var n=list.Count;while(n>1){n--;var k=Rnd.Next(n+1);var swap=list[k];list[k]=list[n];list[n]=swap;}return list;}}public static class ScriptHelper{public static void PrintMessage(string message,Color?color=null){Game.ShowChatMessage(message,color??BeColors.MESSAGE_COLOR);}public class PlayerSpawner{public Vector2 Position{get;set;}public bool HasSpawned{get;set;}}public static List<PlayerSpawner>GetPlayerSpawners(){var spawners=Game.GetObjectsByName("SpawnPlayer");var emptySpawners=new List<PlayerSpawner>();var players=Game.GetPlayers().Where(p=>!p.IsDead).ToList();foreach(var spawner in spawners){var hasPlayer=players.Any(x=>x.GetAABB().Intersects(spawner.GetAABB()));emptySpawners.Add(new PlayerSpawner{Position=spawner.GetWorldPosition(),HasSpawned=hasPlayer,});}return emptySpawners;}private static List<PlayerSpawner>_spawners=GetPlayerSpawners();public static IPlayer SpawnBot(BotBehaviorSet botBehaviorSet){if(_spawners.Count==0)return null;var spawner=RandomHelper.GetItem(_spawners);var player=Game.CreatePlayer(spawner.Position);player.SetBotBehaviorSet(botBehaviorSet);player.SetBotBehaviorActive(true);return player;}public static T[]EnumToArray<T>(){return(T[])Enum.GetValues(typeof(T));}public static List<T>EnumToList<T>(){return EnumToArray<T>().ToList();}}public static class SFD{public static IGame Game;}public class ChonkyChallenge:Challenge{public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.SizeModifier=Size.Chonky;mod.RunSpeedModifier=Speed.ExtremelySlow;mod.SprintSpeedModifier=Speed.ExtremelySlow;mod.MeleeForceModifier=MeleeForce.VeryStrong;mod.MeleeDamageDealtModifier=DamageDealt.High;p.SetModifiers(mod);}}}public class TinyChallenge:Challenge{public override void OnSpawn(IPlayer[]players){base.OnSpawn(players);foreach(var p in players){var mod=p.GetModifiers();mod.SizeModifier=Size.Tiny;mod.RunSpeedModifier=Speed.ExtremelyFast;mod.SprintSpeedModifier=Speed.ExtremelyFast;mod.MeleeForceModifier=MeleeForce.Weak;mod.MeleeDamageDealtModifier=DamageDealt.Low;p.SetModifiers(mod);}}}